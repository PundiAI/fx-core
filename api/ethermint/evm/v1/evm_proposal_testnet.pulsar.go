// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package evmv1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_InitEvmParamsProposal                  protoreflect.MessageDescriptor
	fd_InitEvmParamsProposal_title            protoreflect.FieldDescriptor
	fd_InitEvmParamsProposal_description      protoreflect.FieldDescriptor
	fd_InitEvmParamsProposal_evm_params       protoreflect.FieldDescriptor
	fd_InitEvmParamsProposal_feemarket_params protoreflect.FieldDescriptor
)

func init() {
	file_ethermint_evm_v1_evm_proposal_testnet_proto_init()
	md_InitEvmParamsProposal = File_ethermint_evm_v1_evm_proposal_testnet_proto.Messages().ByName("InitEvmParamsProposal")
	fd_InitEvmParamsProposal_title = md_InitEvmParamsProposal.Fields().ByName("title")
	fd_InitEvmParamsProposal_description = md_InitEvmParamsProposal.Fields().ByName("description")
	fd_InitEvmParamsProposal_evm_params = md_InitEvmParamsProposal.Fields().ByName("evm_params")
	fd_InitEvmParamsProposal_feemarket_params = md_InitEvmParamsProposal.Fields().ByName("feemarket_params")
}

var _ protoreflect.Message = (*fastReflection_InitEvmParamsProposal)(nil)

type fastReflection_InitEvmParamsProposal InitEvmParamsProposal

func (x *InitEvmParamsProposal) ProtoReflect() protoreflect.Message {
	return (*fastReflection_InitEvmParamsProposal)(x)
}

func (x *InitEvmParamsProposal) slowProtoReflect() protoreflect.Message {
	mi := &file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_InitEvmParamsProposal_messageType fastReflection_InitEvmParamsProposal_messageType
var _ protoreflect.MessageType = fastReflection_InitEvmParamsProposal_messageType{}

type fastReflection_InitEvmParamsProposal_messageType struct{}

func (x fastReflection_InitEvmParamsProposal_messageType) Zero() protoreflect.Message {
	return (*fastReflection_InitEvmParamsProposal)(nil)
}
func (x fastReflection_InitEvmParamsProposal_messageType) New() protoreflect.Message {
	return new(fastReflection_InitEvmParamsProposal)
}
func (x fastReflection_InitEvmParamsProposal_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_InitEvmParamsProposal
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_InitEvmParamsProposal) Descriptor() protoreflect.MessageDescriptor {
	return md_InitEvmParamsProposal
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_InitEvmParamsProposal) Type() protoreflect.MessageType {
	return _fastReflection_InitEvmParamsProposal_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_InitEvmParamsProposal) New() protoreflect.Message {
	return new(fastReflection_InitEvmParamsProposal)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_InitEvmParamsProposal) Interface() protoreflect.ProtoMessage {
	return (*InitEvmParamsProposal)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_InitEvmParamsProposal) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Title != "" {
		value := protoreflect.ValueOfString(x.Title)
		if !f(fd_InitEvmParamsProposal_title, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_InitEvmParamsProposal_description, value) {
			return
		}
	}
	if x.EvmParams != nil {
		value := protoreflect.ValueOfMessage(x.EvmParams.ProtoReflect())
		if !f(fd_InitEvmParamsProposal_evm_params, value) {
			return
		}
	}
	if x.FeemarketParams != nil {
		value := protoreflect.ValueOfMessage(x.FeemarketParams.ProtoReflect())
		if !f(fd_InitEvmParamsProposal_feemarket_params, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_InitEvmParamsProposal) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ethermint.evm.v1.InitEvmParamsProposal.title":
		return x.Title != ""
	case "ethermint.evm.v1.InitEvmParamsProposal.description":
		return x.Description != ""
	case "ethermint.evm.v1.InitEvmParamsProposal.evm_params":
		return x.EvmParams != nil
	case "ethermint.evm.v1.InitEvmParamsProposal.feemarket_params":
		return x.FeemarketParams != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.InitEvmParamsProposal"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.InitEvmParamsProposal does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InitEvmParamsProposal) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ethermint.evm.v1.InitEvmParamsProposal.title":
		x.Title = ""
	case "ethermint.evm.v1.InitEvmParamsProposal.description":
		x.Description = ""
	case "ethermint.evm.v1.InitEvmParamsProposal.evm_params":
		x.EvmParams = nil
	case "ethermint.evm.v1.InitEvmParamsProposal.feemarket_params":
		x.FeemarketParams = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.InitEvmParamsProposal"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.InitEvmParamsProposal does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_InitEvmParamsProposal) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ethermint.evm.v1.InitEvmParamsProposal.title":
		value := x.Title
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.InitEvmParamsProposal.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.InitEvmParamsProposal.evm_params":
		value := x.EvmParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "ethermint.evm.v1.InitEvmParamsProposal.feemarket_params":
		value := x.FeemarketParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.InitEvmParamsProposal"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.InitEvmParamsProposal does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InitEvmParamsProposal) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ethermint.evm.v1.InitEvmParamsProposal.title":
		x.Title = value.Interface().(string)
	case "ethermint.evm.v1.InitEvmParamsProposal.description":
		x.Description = value.Interface().(string)
	case "ethermint.evm.v1.InitEvmParamsProposal.evm_params":
		x.EvmParams = value.Message().Interface().(*EVMParams)
	case "ethermint.evm.v1.InitEvmParamsProposal.feemarket_params":
		x.FeemarketParams = value.Message().Interface().(*FeemarketParams)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.InitEvmParamsProposal"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.InitEvmParamsProposal does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InitEvmParamsProposal) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ethermint.evm.v1.InitEvmParamsProposal.evm_params":
		if x.EvmParams == nil {
			x.EvmParams = new(EVMParams)
		}
		return protoreflect.ValueOfMessage(x.EvmParams.ProtoReflect())
	case "ethermint.evm.v1.InitEvmParamsProposal.feemarket_params":
		if x.FeemarketParams == nil {
			x.FeemarketParams = new(FeemarketParams)
		}
		return protoreflect.ValueOfMessage(x.FeemarketParams.ProtoReflect())
	case "ethermint.evm.v1.InitEvmParamsProposal.title":
		panic(fmt.Errorf("field title of message ethermint.evm.v1.InitEvmParamsProposal is not mutable"))
	case "ethermint.evm.v1.InitEvmParamsProposal.description":
		panic(fmt.Errorf("field description of message ethermint.evm.v1.InitEvmParamsProposal is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.InitEvmParamsProposal"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.InitEvmParamsProposal does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_InitEvmParamsProposal) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ethermint.evm.v1.InitEvmParamsProposal.title":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.InitEvmParamsProposal.description":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.InitEvmParamsProposal.evm_params":
		m := new(EVMParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "ethermint.evm.v1.InitEvmParamsProposal.feemarket_params":
		m := new(FeemarketParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.InitEvmParamsProposal"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.InitEvmParamsProposal does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_InitEvmParamsProposal) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ethermint.evm.v1.InitEvmParamsProposal", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_InitEvmParamsProposal) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InitEvmParamsProposal) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_InitEvmParamsProposal) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_InitEvmParamsProposal) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*InitEvmParamsProposal)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Title)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EvmParams != nil {
			l = options.Size(x.EvmParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.FeemarketParams != nil {
			l = options.Size(x.FeemarketParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*InitEvmParamsProposal)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.FeemarketParams != nil {
			encoded, err := options.Marshal(x.FeemarketParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.EvmParams != nil {
			encoded, err := options.Marshal(x.EvmParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Title) > 0 {
			i -= len(x.Title)
			copy(dAtA[i:], x.Title)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Title)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*InitEvmParamsProposal)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InitEvmParamsProposal: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InitEvmParamsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Title = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EvmParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EvmParams == nil {
					x.EvmParams = &EVMParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EvmParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeemarketParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.FeemarketParams == nil {
					x.FeemarketParams = &FeemarketParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FeemarketParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_EVMParams_4_list)(nil)

type _EVMParams_4_list struct {
	list *[]int64
}

func (x *_EVMParams_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EVMParams_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfInt64((*x.list)[i])
}

func (x *_EVMParams_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_EVMParams_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Int()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_EVMParams_4_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message EVMParams at list field ExtraEips as it is not of Message kind"))
}

func (x *_EVMParams_4_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_EVMParams_4_list) NewElement() protoreflect.Value {
	v := int64(0)
	return protoreflect.ValueOfInt64(v)
}

func (x *_EVMParams_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_EVMParams               protoreflect.MessageDescriptor
	fd_EVMParams_evm_denom     protoreflect.FieldDescriptor
	fd_EVMParams_enable_create protoreflect.FieldDescriptor
	fd_EVMParams_enable_call   protoreflect.FieldDescriptor
	fd_EVMParams_extra_eips    protoreflect.FieldDescriptor
	fd_EVMParams_chain_config  protoreflect.FieldDescriptor
)

func init() {
	file_ethermint_evm_v1_evm_proposal_testnet_proto_init()
	md_EVMParams = File_ethermint_evm_v1_evm_proposal_testnet_proto.Messages().ByName("EVMParams")
	fd_EVMParams_evm_denom = md_EVMParams.Fields().ByName("evm_denom")
	fd_EVMParams_enable_create = md_EVMParams.Fields().ByName("enable_create")
	fd_EVMParams_enable_call = md_EVMParams.Fields().ByName("enable_call")
	fd_EVMParams_extra_eips = md_EVMParams.Fields().ByName("extra_eips")
	fd_EVMParams_chain_config = md_EVMParams.Fields().ByName("chain_config")
}

var _ protoreflect.Message = (*fastReflection_EVMParams)(nil)

type fastReflection_EVMParams EVMParams

func (x *EVMParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EVMParams)(x)
}

func (x *EVMParams) slowProtoReflect() protoreflect.Message {
	mi := &file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EVMParams_messageType fastReflection_EVMParams_messageType
var _ protoreflect.MessageType = fastReflection_EVMParams_messageType{}

type fastReflection_EVMParams_messageType struct{}

func (x fastReflection_EVMParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EVMParams)(nil)
}
func (x fastReflection_EVMParams_messageType) New() protoreflect.Message {
	return new(fastReflection_EVMParams)
}
func (x fastReflection_EVMParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EVMParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EVMParams) Descriptor() protoreflect.MessageDescriptor {
	return md_EVMParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EVMParams) Type() protoreflect.MessageType {
	return _fastReflection_EVMParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EVMParams) New() protoreflect.Message {
	return new(fastReflection_EVMParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EVMParams) Interface() protoreflect.ProtoMessage {
	return (*EVMParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EVMParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EvmDenom != "" {
		value := protoreflect.ValueOfString(x.EvmDenom)
		if !f(fd_EVMParams_evm_denom, value) {
			return
		}
	}
	if x.EnableCreate != false {
		value := protoreflect.ValueOfBool(x.EnableCreate)
		if !f(fd_EVMParams_enable_create, value) {
			return
		}
	}
	if x.EnableCall != false {
		value := protoreflect.ValueOfBool(x.EnableCall)
		if !f(fd_EVMParams_enable_call, value) {
			return
		}
	}
	if len(x.ExtraEips) != 0 {
		value := protoreflect.ValueOfList(&_EVMParams_4_list{list: &x.ExtraEips})
		if !f(fd_EVMParams_extra_eips, value) {
			return
		}
	}
	if x.ChainConfig != nil {
		value := protoreflect.ValueOfMessage(x.ChainConfig.ProtoReflect())
		if !f(fd_EVMParams_chain_config, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EVMParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ethermint.evm.v1.EVMParams.evm_denom":
		return x.EvmDenom != ""
	case "ethermint.evm.v1.EVMParams.enable_create":
		return x.EnableCreate != false
	case "ethermint.evm.v1.EVMParams.enable_call":
		return x.EnableCall != false
	case "ethermint.evm.v1.EVMParams.extra_eips":
		return len(x.ExtraEips) != 0
	case "ethermint.evm.v1.EVMParams.chain_config":
		return x.ChainConfig != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EVMParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ethermint.evm.v1.EVMParams.evm_denom":
		x.EvmDenom = ""
	case "ethermint.evm.v1.EVMParams.enable_create":
		x.EnableCreate = false
	case "ethermint.evm.v1.EVMParams.enable_call":
		x.EnableCall = false
	case "ethermint.evm.v1.EVMParams.extra_eips":
		x.ExtraEips = nil
	case "ethermint.evm.v1.EVMParams.chain_config":
		x.ChainConfig = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EVMParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ethermint.evm.v1.EVMParams.evm_denom":
		value := x.EvmDenom
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMParams.enable_create":
		value := x.EnableCreate
		return protoreflect.ValueOfBool(value)
	case "ethermint.evm.v1.EVMParams.enable_call":
		value := x.EnableCall
		return protoreflect.ValueOfBool(value)
	case "ethermint.evm.v1.EVMParams.extra_eips":
		if len(x.ExtraEips) == 0 {
			return protoreflect.ValueOfList(&_EVMParams_4_list{})
		}
		listValue := &_EVMParams_4_list{list: &x.ExtraEips}
		return protoreflect.ValueOfList(listValue)
	case "ethermint.evm.v1.EVMParams.chain_config":
		value := x.ChainConfig
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EVMParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ethermint.evm.v1.EVMParams.evm_denom":
		x.EvmDenom = value.Interface().(string)
	case "ethermint.evm.v1.EVMParams.enable_create":
		x.EnableCreate = value.Bool()
	case "ethermint.evm.v1.EVMParams.enable_call":
		x.EnableCall = value.Bool()
	case "ethermint.evm.v1.EVMParams.extra_eips":
		lv := value.List()
		clv := lv.(*_EVMParams_4_list)
		x.ExtraEips = *clv.list
	case "ethermint.evm.v1.EVMParams.chain_config":
		x.ChainConfig = value.Message().Interface().(*EVMChainConfig)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EVMParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ethermint.evm.v1.EVMParams.extra_eips":
		if x.ExtraEips == nil {
			x.ExtraEips = []int64{}
		}
		value := &_EVMParams_4_list{list: &x.ExtraEips}
		return protoreflect.ValueOfList(value)
	case "ethermint.evm.v1.EVMParams.chain_config":
		if x.ChainConfig == nil {
			x.ChainConfig = new(EVMChainConfig)
		}
		return protoreflect.ValueOfMessage(x.ChainConfig.ProtoReflect())
	case "ethermint.evm.v1.EVMParams.evm_denom":
		panic(fmt.Errorf("field evm_denom of message ethermint.evm.v1.EVMParams is not mutable"))
	case "ethermint.evm.v1.EVMParams.enable_create":
		panic(fmt.Errorf("field enable_create of message ethermint.evm.v1.EVMParams is not mutable"))
	case "ethermint.evm.v1.EVMParams.enable_call":
		panic(fmt.Errorf("field enable_call of message ethermint.evm.v1.EVMParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EVMParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ethermint.evm.v1.EVMParams.evm_denom":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMParams.enable_create":
		return protoreflect.ValueOfBool(false)
	case "ethermint.evm.v1.EVMParams.enable_call":
		return protoreflect.ValueOfBool(false)
	case "ethermint.evm.v1.EVMParams.extra_eips":
		list := []int64{}
		return protoreflect.ValueOfList(&_EVMParams_4_list{list: &list})
	case "ethermint.evm.v1.EVMParams.chain_config":
		m := new(EVMChainConfig)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EVMParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ethermint.evm.v1.EVMParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EVMParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EVMParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EVMParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EVMParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EVMParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.EvmDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EnableCreate {
			n += 2
		}
		if x.EnableCall {
			n += 2
		}
		if len(x.ExtraEips) > 0 {
			l = 0
			for _, e := range x.ExtraEips {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.ChainConfig != nil {
			l = options.Size(x.ChainConfig)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EVMParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ChainConfig != nil {
			encoded, err := options.Marshal(x.ChainConfig)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.ExtraEips) > 0 {
			var pksize2 int
			for _, num := range x.ExtraEips {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num1 := range x.ExtraEips {
				num := uint64(num1)
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x22
		}
		if x.EnableCall {
			i--
			if x.EnableCall {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.EnableCreate {
			i--
			if x.EnableCreate {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
		}
		if len(x.EvmDenom) > 0 {
			i -= len(x.EvmDenom)
			copy(dAtA[i:], x.EvmDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EvmDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EVMParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EVMParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EVMParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EvmDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EvmDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EnableCreate", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.EnableCreate = bool(v != 0)
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EnableCall", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.EnableCall = bool(v != 0)
			case 4:
				if wireType == 0 {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ExtraEips = append(x.ExtraEips, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.ExtraEips) == 0 {
						x.ExtraEips = make([]int64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v int64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= int64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ExtraEips = append(x.ExtraEips, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExtraEips", wireType)
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainConfig", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ChainConfig == nil {
					x.ChainConfig = &EVMChainConfig{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ChainConfig); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_EVMChainConfig                      protoreflect.MessageDescriptor
	fd_EVMChainConfig_homestead_block      protoreflect.FieldDescriptor
	fd_EVMChainConfig_dao_fork_block       protoreflect.FieldDescriptor
	fd_EVMChainConfig_dao_fork_support     protoreflect.FieldDescriptor
	fd_EVMChainConfig_eip150_block         protoreflect.FieldDescriptor
	fd_EVMChainConfig_eip150_hash          protoreflect.FieldDescriptor
	fd_EVMChainConfig_eip155_block         protoreflect.FieldDescriptor
	fd_EVMChainConfig_eip158_block         protoreflect.FieldDescriptor
	fd_EVMChainConfig_byzantium_block      protoreflect.FieldDescriptor
	fd_EVMChainConfig_constantinople_block protoreflect.FieldDescriptor
	fd_EVMChainConfig_petersburg_block     protoreflect.FieldDescriptor
	fd_EVMChainConfig_istanbul_block       protoreflect.FieldDescriptor
	fd_EVMChainConfig_muir_glacier_block   protoreflect.FieldDescriptor
	fd_EVMChainConfig_berlin_block         protoreflect.FieldDescriptor
	fd_EVMChainConfig_london_block         protoreflect.FieldDescriptor
)

func init() {
	file_ethermint_evm_v1_evm_proposal_testnet_proto_init()
	md_EVMChainConfig = File_ethermint_evm_v1_evm_proposal_testnet_proto.Messages().ByName("EVMChainConfig")
	fd_EVMChainConfig_homestead_block = md_EVMChainConfig.Fields().ByName("homestead_block")
	fd_EVMChainConfig_dao_fork_block = md_EVMChainConfig.Fields().ByName("dao_fork_block")
	fd_EVMChainConfig_dao_fork_support = md_EVMChainConfig.Fields().ByName("dao_fork_support")
	fd_EVMChainConfig_eip150_block = md_EVMChainConfig.Fields().ByName("eip150_block")
	fd_EVMChainConfig_eip150_hash = md_EVMChainConfig.Fields().ByName("eip150_hash")
	fd_EVMChainConfig_eip155_block = md_EVMChainConfig.Fields().ByName("eip155_block")
	fd_EVMChainConfig_eip158_block = md_EVMChainConfig.Fields().ByName("eip158_block")
	fd_EVMChainConfig_byzantium_block = md_EVMChainConfig.Fields().ByName("byzantium_block")
	fd_EVMChainConfig_constantinople_block = md_EVMChainConfig.Fields().ByName("constantinople_block")
	fd_EVMChainConfig_petersburg_block = md_EVMChainConfig.Fields().ByName("petersburg_block")
	fd_EVMChainConfig_istanbul_block = md_EVMChainConfig.Fields().ByName("istanbul_block")
	fd_EVMChainConfig_muir_glacier_block = md_EVMChainConfig.Fields().ByName("muir_glacier_block")
	fd_EVMChainConfig_berlin_block = md_EVMChainConfig.Fields().ByName("berlin_block")
	fd_EVMChainConfig_london_block = md_EVMChainConfig.Fields().ByName("london_block")
}

var _ protoreflect.Message = (*fastReflection_EVMChainConfig)(nil)

type fastReflection_EVMChainConfig EVMChainConfig

func (x *EVMChainConfig) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EVMChainConfig)(x)
}

func (x *EVMChainConfig) slowProtoReflect() protoreflect.Message {
	mi := &file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EVMChainConfig_messageType fastReflection_EVMChainConfig_messageType
var _ protoreflect.MessageType = fastReflection_EVMChainConfig_messageType{}

type fastReflection_EVMChainConfig_messageType struct{}

func (x fastReflection_EVMChainConfig_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EVMChainConfig)(nil)
}
func (x fastReflection_EVMChainConfig_messageType) New() protoreflect.Message {
	return new(fastReflection_EVMChainConfig)
}
func (x fastReflection_EVMChainConfig_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EVMChainConfig
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EVMChainConfig) Descriptor() protoreflect.MessageDescriptor {
	return md_EVMChainConfig
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EVMChainConfig) Type() protoreflect.MessageType {
	return _fastReflection_EVMChainConfig_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EVMChainConfig) New() protoreflect.Message {
	return new(fastReflection_EVMChainConfig)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EVMChainConfig) Interface() protoreflect.ProtoMessage {
	return (*EVMChainConfig)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EVMChainConfig) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.HomesteadBlock != "" {
		value := protoreflect.ValueOfString(x.HomesteadBlock)
		if !f(fd_EVMChainConfig_homestead_block, value) {
			return
		}
	}
	if x.DaoForkBlock != "" {
		value := protoreflect.ValueOfString(x.DaoForkBlock)
		if !f(fd_EVMChainConfig_dao_fork_block, value) {
			return
		}
	}
	if x.DaoForkSupport != false {
		value := protoreflect.ValueOfBool(x.DaoForkSupport)
		if !f(fd_EVMChainConfig_dao_fork_support, value) {
			return
		}
	}
	if x.Eip150Block != "" {
		value := protoreflect.ValueOfString(x.Eip150Block)
		if !f(fd_EVMChainConfig_eip150_block, value) {
			return
		}
	}
	if x.Eip150Hash != "" {
		value := protoreflect.ValueOfString(x.Eip150Hash)
		if !f(fd_EVMChainConfig_eip150_hash, value) {
			return
		}
	}
	if x.Eip155Block != "" {
		value := protoreflect.ValueOfString(x.Eip155Block)
		if !f(fd_EVMChainConfig_eip155_block, value) {
			return
		}
	}
	if x.Eip158Block != "" {
		value := protoreflect.ValueOfString(x.Eip158Block)
		if !f(fd_EVMChainConfig_eip158_block, value) {
			return
		}
	}
	if x.ByzantiumBlock != "" {
		value := protoreflect.ValueOfString(x.ByzantiumBlock)
		if !f(fd_EVMChainConfig_byzantium_block, value) {
			return
		}
	}
	if x.ConstantinopleBlock != "" {
		value := protoreflect.ValueOfString(x.ConstantinopleBlock)
		if !f(fd_EVMChainConfig_constantinople_block, value) {
			return
		}
	}
	if x.PetersburgBlock != "" {
		value := protoreflect.ValueOfString(x.PetersburgBlock)
		if !f(fd_EVMChainConfig_petersburg_block, value) {
			return
		}
	}
	if x.IstanbulBlock != "" {
		value := protoreflect.ValueOfString(x.IstanbulBlock)
		if !f(fd_EVMChainConfig_istanbul_block, value) {
			return
		}
	}
	if x.MuirGlacierBlock != "" {
		value := protoreflect.ValueOfString(x.MuirGlacierBlock)
		if !f(fd_EVMChainConfig_muir_glacier_block, value) {
			return
		}
	}
	if x.BerlinBlock != "" {
		value := protoreflect.ValueOfString(x.BerlinBlock)
		if !f(fd_EVMChainConfig_berlin_block, value) {
			return
		}
	}
	if x.LondonBlock != "" {
		value := protoreflect.ValueOfString(x.LondonBlock)
		if !f(fd_EVMChainConfig_london_block, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EVMChainConfig) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ethermint.evm.v1.EVMChainConfig.homestead_block":
		return x.HomesteadBlock != ""
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_block":
		return x.DaoForkBlock != ""
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_support":
		return x.DaoForkSupport != false
	case "ethermint.evm.v1.EVMChainConfig.eip150_block":
		return x.Eip150Block != ""
	case "ethermint.evm.v1.EVMChainConfig.eip150_hash":
		return x.Eip150Hash != ""
	case "ethermint.evm.v1.EVMChainConfig.eip155_block":
		return x.Eip155Block != ""
	case "ethermint.evm.v1.EVMChainConfig.eip158_block":
		return x.Eip158Block != ""
	case "ethermint.evm.v1.EVMChainConfig.byzantium_block":
		return x.ByzantiumBlock != ""
	case "ethermint.evm.v1.EVMChainConfig.constantinople_block":
		return x.ConstantinopleBlock != ""
	case "ethermint.evm.v1.EVMChainConfig.petersburg_block":
		return x.PetersburgBlock != ""
	case "ethermint.evm.v1.EVMChainConfig.istanbul_block":
		return x.IstanbulBlock != ""
	case "ethermint.evm.v1.EVMChainConfig.muir_glacier_block":
		return x.MuirGlacierBlock != ""
	case "ethermint.evm.v1.EVMChainConfig.berlin_block":
		return x.BerlinBlock != ""
	case "ethermint.evm.v1.EVMChainConfig.london_block":
		return x.LondonBlock != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMChainConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMChainConfig does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EVMChainConfig) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ethermint.evm.v1.EVMChainConfig.homestead_block":
		x.HomesteadBlock = ""
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_block":
		x.DaoForkBlock = ""
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_support":
		x.DaoForkSupport = false
	case "ethermint.evm.v1.EVMChainConfig.eip150_block":
		x.Eip150Block = ""
	case "ethermint.evm.v1.EVMChainConfig.eip150_hash":
		x.Eip150Hash = ""
	case "ethermint.evm.v1.EVMChainConfig.eip155_block":
		x.Eip155Block = ""
	case "ethermint.evm.v1.EVMChainConfig.eip158_block":
		x.Eip158Block = ""
	case "ethermint.evm.v1.EVMChainConfig.byzantium_block":
		x.ByzantiumBlock = ""
	case "ethermint.evm.v1.EVMChainConfig.constantinople_block":
		x.ConstantinopleBlock = ""
	case "ethermint.evm.v1.EVMChainConfig.petersburg_block":
		x.PetersburgBlock = ""
	case "ethermint.evm.v1.EVMChainConfig.istanbul_block":
		x.IstanbulBlock = ""
	case "ethermint.evm.v1.EVMChainConfig.muir_glacier_block":
		x.MuirGlacierBlock = ""
	case "ethermint.evm.v1.EVMChainConfig.berlin_block":
		x.BerlinBlock = ""
	case "ethermint.evm.v1.EVMChainConfig.london_block":
		x.LondonBlock = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMChainConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMChainConfig does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EVMChainConfig) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ethermint.evm.v1.EVMChainConfig.homestead_block":
		value := x.HomesteadBlock
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_block":
		value := x.DaoForkBlock
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_support":
		value := x.DaoForkSupport
		return protoreflect.ValueOfBool(value)
	case "ethermint.evm.v1.EVMChainConfig.eip150_block":
		value := x.Eip150Block
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.eip150_hash":
		value := x.Eip150Hash
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.eip155_block":
		value := x.Eip155Block
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.eip158_block":
		value := x.Eip158Block
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.byzantium_block":
		value := x.ByzantiumBlock
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.constantinople_block":
		value := x.ConstantinopleBlock
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.petersburg_block":
		value := x.PetersburgBlock
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.istanbul_block":
		value := x.IstanbulBlock
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.muir_glacier_block":
		value := x.MuirGlacierBlock
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.berlin_block":
		value := x.BerlinBlock
		return protoreflect.ValueOfString(value)
	case "ethermint.evm.v1.EVMChainConfig.london_block":
		value := x.LondonBlock
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMChainConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMChainConfig does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EVMChainConfig) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ethermint.evm.v1.EVMChainConfig.homestead_block":
		x.HomesteadBlock = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_block":
		x.DaoForkBlock = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_support":
		x.DaoForkSupport = value.Bool()
	case "ethermint.evm.v1.EVMChainConfig.eip150_block":
		x.Eip150Block = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.eip150_hash":
		x.Eip150Hash = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.eip155_block":
		x.Eip155Block = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.eip158_block":
		x.Eip158Block = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.byzantium_block":
		x.ByzantiumBlock = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.constantinople_block":
		x.ConstantinopleBlock = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.petersburg_block":
		x.PetersburgBlock = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.istanbul_block":
		x.IstanbulBlock = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.muir_glacier_block":
		x.MuirGlacierBlock = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.berlin_block":
		x.BerlinBlock = value.Interface().(string)
	case "ethermint.evm.v1.EVMChainConfig.london_block":
		x.LondonBlock = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMChainConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMChainConfig does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EVMChainConfig) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ethermint.evm.v1.EVMChainConfig.homestead_block":
		panic(fmt.Errorf("field homestead_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_block":
		panic(fmt.Errorf("field dao_fork_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_support":
		panic(fmt.Errorf("field dao_fork_support of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.eip150_block":
		panic(fmt.Errorf("field eip150_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.eip150_hash":
		panic(fmt.Errorf("field eip150_hash of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.eip155_block":
		panic(fmt.Errorf("field eip155_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.eip158_block":
		panic(fmt.Errorf("field eip158_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.byzantium_block":
		panic(fmt.Errorf("field byzantium_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.constantinople_block":
		panic(fmt.Errorf("field constantinople_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.petersburg_block":
		panic(fmt.Errorf("field petersburg_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.istanbul_block":
		panic(fmt.Errorf("field istanbul_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.muir_glacier_block":
		panic(fmt.Errorf("field muir_glacier_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.berlin_block":
		panic(fmt.Errorf("field berlin_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	case "ethermint.evm.v1.EVMChainConfig.london_block":
		panic(fmt.Errorf("field london_block of message ethermint.evm.v1.EVMChainConfig is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMChainConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMChainConfig does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EVMChainConfig) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ethermint.evm.v1.EVMChainConfig.homestead_block":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_block":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.dao_fork_support":
		return protoreflect.ValueOfBool(false)
	case "ethermint.evm.v1.EVMChainConfig.eip150_block":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.eip150_hash":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.eip155_block":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.eip158_block":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.byzantium_block":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.constantinople_block":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.petersburg_block":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.istanbul_block":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.muir_glacier_block":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.berlin_block":
		return protoreflect.ValueOfString("")
	case "ethermint.evm.v1.EVMChainConfig.london_block":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.EVMChainConfig"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.EVMChainConfig does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EVMChainConfig) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ethermint.evm.v1.EVMChainConfig", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EVMChainConfig) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EVMChainConfig) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EVMChainConfig) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EVMChainConfig) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EVMChainConfig)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.HomesteadBlock)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DaoForkBlock)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DaoForkSupport {
			n += 2
		}
		l = len(x.Eip150Block)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Eip150Hash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Eip155Block)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Eip158Block)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ByzantiumBlock)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConstantinopleBlock)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PetersburgBlock)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IstanbulBlock)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MuirGlacierBlock)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BerlinBlock)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LondonBlock)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EVMChainConfig)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.LondonBlock) > 0 {
			i -= len(x.LondonBlock)
			copy(dAtA[i:], x.LondonBlock)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LondonBlock)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if len(x.BerlinBlock) > 0 {
			i -= len(x.BerlinBlock)
			copy(dAtA[i:], x.BerlinBlock)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BerlinBlock)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.MuirGlacierBlock) > 0 {
			i -= len(x.MuirGlacierBlock)
			copy(dAtA[i:], x.MuirGlacierBlock)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MuirGlacierBlock)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.IstanbulBlock) > 0 {
			i -= len(x.IstanbulBlock)
			copy(dAtA[i:], x.IstanbulBlock)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IstanbulBlock)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.PetersburgBlock) > 0 {
			i -= len(x.PetersburgBlock)
			copy(dAtA[i:], x.PetersburgBlock)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PetersburgBlock)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.ConstantinopleBlock) > 0 {
			i -= len(x.ConstantinopleBlock)
			copy(dAtA[i:], x.ConstantinopleBlock)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConstantinopleBlock)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.ByzantiumBlock) > 0 {
			i -= len(x.ByzantiumBlock)
			copy(dAtA[i:], x.ByzantiumBlock)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ByzantiumBlock)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Eip158Block) > 0 {
			i -= len(x.Eip158Block)
			copy(dAtA[i:], x.Eip158Block)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Eip158Block)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Eip155Block) > 0 {
			i -= len(x.Eip155Block)
			copy(dAtA[i:], x.Eip155Block)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Eip155Block)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Eip150Hash) > 0 {
			i -= len(x.Eip150Hash)
			copy(dAtA[i:], x.Eip150Hash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Eip150Hash)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Eip150Block) > 0 {
			i -= len(x.Eip150Block)
			copy(dAtA[i:], x.Eip150Block)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Eip150Block)))
			i--
			dAtA[i] = 0x22
		}
		if x.DaoForkSupport {
			i--
			if x.DaoForkSupport {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if len(x.DaoForkBlock) > 0 {
			i -= len(x.DaoForkBlock)
			copy(dAtA[i:], x.DaoForkBlock)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DaoForkBlock)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.HomesteadBlock) > 0 {
			i -= len(x.HomesteadBlock)
			copy(dAtA[i:], x.HomesteadBlock)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HomesteadBlock)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EVMChainConfig)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EVMChainConfig: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EVMChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HomesteadBlock", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HomesteadBlock = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DaoForkBlock", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DaoForkBlock = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DaoForkSupport", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.DaoForkSupport = bool(v != 0)
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Eip150Block", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Eip150Block = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Eip150Hash", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Eip150Hash = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Eip155Block", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Eip155Block = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Eip158Block", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Eip158Block = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ByzantiumBlock", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ByzantiumBlock = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConstantinopleBlock", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConstantinopleBlock = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PetersburgBlock", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PetersburgBlock = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IstanbulBlock", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IstanbulBlock = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MuirGlacierBlock", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MuirGlacierBlock = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BerlinBlock", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BerlinBlock = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LondonBlock", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LondonBlock = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FeemarketParams                             protoreflect.MessageDescriptor
	fd_FeemarketParams_no_base_fee                 protoreflect.FieldDescriptor
	fd_FeemarketParams_base_fee_change_denominator protoreflect.FieldDescriptor
	fd_FeemarketParams_elasticity_multiplier       protoreflect.FieldDescriptor
	fd_FeemarketParams_initial_base_fee            protoreflect.FieldDescriptor
	fd_FeemarketParams_enable_height               protoreflect.FieldDescriptor
)

func init() {
	file_ethermint_evm_v1_evm_proposal_testnet_proto_init()
	md_FeemarketParams = File_ethermint_evm_v1_evm_proposal_testnet_proto.Messages().ByName("FeemarketParams")
	fd_FeemarketParams_no_base_fee = md_FeemarketParams.Fields().ByName("no_base_fee")
	fd_FeemarketParams_base_fee_change_denominator = md_FeemarketParams.Fields().ByName("base_fee_change_denominator")
	fd_FeemarketParams_elasticity_multiplier = md_FeemarketParams.Fields().ByName("elasticity_multiplier")
	fd_FeemarketParams_initial_base_fee = md_FeemarketParams.Fields().ByName("initial_base_fee")
	fd_FeemarketParams_enable_height = md_FeemarketParams.Fields().ByName("enable_height")
}

var _ protoreflect.Message = (*fastReflection_FeemarketParams)(nil)

type fastReflection_FeemarketParams FeemarketParams

func (x *FeemarketParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FeemarketParams)(x)
}

func (x *FeemarketParams) slowProtoReflect() protoreflect.Message {
	mi := &file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FeemarketParams_messageType fastReflection_FeemarketParams_messageType
var _ protoreflect.MessageType = fastReflection_FeemarketParams_messageType{}

type fastReflection_FeemarketParams_messageType struct{}

func (x fastReflection_FeemarketParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FeemarketParams)(nil)
}
func (x fastReflection_FeemarketParams_messageType) New() protoreflect.Message {
	return new(fastReflection_FeemarketParams)
}
func (x fastReflection_FeemarketParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FeemarketParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FeemarketParams) Descriptor() protoreflect.MessageDescriptor {
	return md_FeemarketParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FeemarketParams) Type() protoreflect.MessageType {
	return _fastReflection_FeemarketParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FeemarketParams) New() protoreflect.Message {
	return new(fastReflection_FeemarketParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FeemarketParams) Interface() protoreflect.ProtoMessage {
	return (*FeemarketParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FeemarketParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.NoBaseFee != false {
		value := protoreflect.ValueOfBool(x.NoBaseFee)
		if !f(fd_FeemarketParams_no_base_fee, value) {
			return
		}
	}
	if x.BaseFeeChangeDenominator != uint32(0) {
		value := protoreflect.ValueOfUint32(x.BaseFeeChangeDenominator)
		if !f(fd_FeemarketParams_base_fee_change_denominator, value) {
			return
		}
	}
	if x.ElasticityMultiplier != uint32(0) {
		value := protoreflect.ValueOfUint32(x.ElasticityMultiplier)
		if !f(fd_FeemarketParams_elasticity_multiplier, value) {
			return
		}
	}
	if x.InitialBaseFee != int64(0) {
		value := protoreflect.ValueOfInt64(x.InitialBaseFee)
		if !f(fd_FeemarketParams_initial_base_fee, value) {
			return
		}
	}
	if x.EnableHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.EnableHeight)
		if !f(fd_FeemarketParams_enable_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FeemarketParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "ethermint.evm.v1.FeemarketParams.no_base_fee":
		return x.NoBaseFee != false
	case "ethermint.evm.v1.FeemarketParams.base_fee_change_denominator":
		return x.BaseFeeChangeDenominator != uint32(0)
	case "ethermint.evm.v1.FeemarketParams.elasticity_multiplier":
		return x.ElasticityMultiplier != uint32(0)
	case "ethermint.evm.v1.FeemarketParams.initial_base_fee":
		return x.InitialBaseFee != int64(0)
	case "ethermint.evm.v1.FeemarketParams.enable_height":
		return x.EnableHeight != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.FeemarketParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.FeemarketParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeemarketParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "ethermint.evm.v1.FeemarketParams.no_base_fee":
		x.NoBaseFee = false
	case "ethermint.evm.v1.FeemarketParams.base_fee_change_denominator":
		x.BaseFeeChangeDenominator = uint32(0)
	case "ethermint.evm.v1.FeemarketParams.elasticity_multiplier":
		x.ElasticityMultiplier = uint32(0)
	case "ethermint.evm.v1.FeemarketParams.initial_base_fee":
		x.InitialBaseFee = int64(0)
	case "ethermint.evm.v1.FeemarketParams.enable_height":
		x.EnableHeight = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.FeemarketParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.FeemarketParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FeemarketParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "ethermint.evm.v1.FeemarketParams.no_base_fee":
		value := x.NoBaseFee
		return protoreflect.ValueOfBool(value)
	case "ethermint.evm.v1.FeemarketParams.base_fee_change_denominator":
		value := x.BaseFeeChangeDenominator
		return protoreflect.ValueOfUint32(value)
	case "ethermint.evm.v1.FeemarketParams.elasticity_multiplier":
		value := x.ElasticityMultiplier
		return protoreflect.ValueOfUint32(value)
	case "ethermint.evm.v1.FeemarketParams.initial_base_fee":
		value := x.InitialBaseFee
		return protoreflect.ValueOfInt64(value)
	case "ethermint.evm.v1.FeemarketParams.enable_height":
		value := x.EnableHeight
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.FeemarketParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.FeemarketParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeemarketParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "ethermint.evm.v1.FeemarketParams.no_base_fee":
		x.NoBaseFee = value.Bool()
	case "ethermint.evm.v1.FeemarketParams.base_fee_change_denominator":
		x.BaseFeeChangeDenominator = uint32(value.Uint())
	case "ethermint.evm.v1.FeemarketParams.elasticity_multiplier":
		x.ElasticityMultiplier = uint32(value.Uint())
	case "ethermint.evm.v1.FeemarketParams.initial_base_fee":
		x.InitialBaseFee = value.Int()
	case "ethermint.evm.v1.FeemarketParams.enable_height":
		x.EnableHeight = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.FeemarketParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.FeemarketParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeemarketParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ethermint.evm.v1.FeemarketParams.no_base_fee":
		panic(fmt.Errorf("field no_base_fee of message ethermint.evm.v1.FeemarketParams is not mutable"))
	case "ethermint.evm.v1.FeemarketParams.base_fee_change_denominator":
		panic(fmt.Errorf("field base_fee_change_denominator of message ethermint.evm.v1.FeemarketParams is not mutable"))
	case "ethermint.evm.v1.FeemarketParams.elasticity_multiplier":
		panic(fmt.Errorf("field elasticity_multiplier of message ethermint.evm.v1.FeemarketParams is not mutable"))
	case "ethermint.evm.v1.FeemarketParams.initial_base_fee":
		panic(fmt.Errorf("field initial_base_fee of message ethermint.evm.v1.FeemarketParams is not mutable"))
	case "ethermint.evm.v1.FeemarketParams.enable_height":
		panic(fmt.Errorf("field enable_height of message ethermint.evm.v1.FeemarketParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.FeemarketParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.FeemarketParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FeemarketParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "ethermint.evm.v1.FeemarketParams.no_base_fee":
		return protoreflect.ValueOfBool(false)
	case "ethermint.evm.v1.FeemarketParams.base_fee_change_denominator":
		return protoreflect.ValueOfUint32(uint32(0))
	case "ethermint.evm.v1.FeemarketParams.elasticity_multiplier":
		return protoreflect.ValueOfUint32(uint32(0))
	case "ethermint.evm.v1.FeemarketParams.initial_base_fee":
		return protoreflect.ValueOfInt64(int64(0))
	case "ethermint.evm.v1.FeemarketParams.enable_height":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: ethermint.evm.v1.FeemarketParams"))
		}
		panic(fmt.Errorf("message ethermint.evm.v1.FeemarketParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FeemarketParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in ethermint.evm.v1.FeemarketParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FeemarketParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeemarketParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FeemarketParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FeemarketParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FeemarketParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.NoBaseFee {
			n += 2
		}
		if x.BaseFeeChangeDenominator != 0 {
			n += 1 + runtime.Sov(uint64(x.BaseFeeChangeDenominator))
		}
		if x.ElasticityMultiplier != 0 {
			n += 1 + runtime.Sov(uint64(x.ElasticityMultiplier))
		}
		if x.InitialBaseFee != 0 {
			n += 1 + runtime.Sov(uint64(x.InitialBaseFee))
		}
		if x.EnableHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.EnableHeight))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FeemarketParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.EnableHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EnableHeight))
			i--
			dAtA[i] = 0x28
		}
		if x.InitialBaseFee != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.InitialBaseFee))
			i--
			dAtA[i] = 0x20
		}
		if x.ElasticityMultiplier != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ElasticityMultiplier))
			i--
			dAtA[i] = 0x18
		}
		if x.BaseFeeChangeDenominator != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BaseFeeChangeDenominator))
			i--
			dAtA[i] = 0x10
		}
		if x.NoBaseFee {
			i--
			if x.NoBaseFee {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FeemarketParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeemarketParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeemarketParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NoBaseFee", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.NoBaseFee = bool(v != 0)
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseFeeChangeDenominator", wireType)
				}
				x.BaseFeeChangeDenominator = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BaseFeeChangeDenominator |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ElasticityMultiplier", wireType)
				}
				x.ElasticityMultiplier = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ElasticityMultiplier |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitialBaseFee", wireType)
				}
				x.InitialBaseFee = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.InitialBaseFee |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EnableHeight", wireType)
				}
				x.EnableHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EnableHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: ethermint/evm/v1/evm_proposal_testnet.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deprecated: Do not use.
type InitEvmParamsProposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title           string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description     string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	EvmParams       *EVMParams       `protobuf:"bytes,3,opt,name=evm_params,json=evmParams,proto3" json:"evm_params,omitempty"`
	FeemarketParams *FeemarketParams `protobuf:"bytes,4,opt,name=feemarket_params,json=feemarketParams,proto3" json:"feemarket_params,omitempty"`
}

func (x *InitEvmParamsProposal) Reset() {
	*x = InitEvmParamsProposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitEvmParamsProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitEvmParamsProposal) ProtoMessage() {}

// Deprecated: Use InitEvmParamsProposal.ProtoReflect.Descriptor instead.
func (*InitEvmParamsProposal) Descriptor() ([]byte, []int) {
	return file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDescGZIP(), []int{0}
}

func (x *InitEvmParamsProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *InitEvmParamsProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *InitEvmParamsProposal) GetEvmParams() *EVMParams {
	if x != nil {
		return x.EvmParams
	}
	return nil
}

func (x *InitEvmParamsProposal) GetFeemarketParams() *FeemarketParams {
	if x != nil {
		return x.FeemarketParams
	}
	return nil
}

// Deprecated: Do not use.
type EVMParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EvmDenom     string          `protobuf:"bytes,1,opt,name=evm_denom,json=evmDenom,proto3" json:"evm_denom,omitempty"`
	EnableCreate bool            `protobuf:"varint,2,opt,name=enable_create,json=enableCreate,proto3" json:"enable_create,omitempty"`
	EnableCall   bool            `protobuf:"varint,3,opt,name=enable_call,json=enableCall,proto3" json:"enable_call,omitempty"`
	ExtraEips    []int64         `protobuf:"varint,4,rep,packed,name=extra_eips,json=extraEips,proto3" json:"extra_eips,omitempty"`
	ChainConfig  *EVMChainConfig `protobuf:"bytes,5,opt,name=chain_config,json=chainConfig,proto3" json:"chain_config,omitempty"`
}

func (x *EVMParams) Reset() {
	*x = EVMParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMParams) ProtoMessage() {}

// Deprecated: Use EVMParams.ProtoReflect.Descriptor instead.
func (*EVMParams) Descriptor() ([]byte, []int) {
	return file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDescGZIP(), []int{1}
}

func (x *EVMParams) GetEvmDenom() string {
	if x != nil {
		return x.EvmDenom
	}
	return ""
}

func (x *EVMParams) GetEnableCreate() bool {
	if x != nil {
		return x.EnableCreate
	}
	return false
}

func (x *EVMParams) GetEnableCall() bool {
	if x != nil {
		return x.EnableCall
	}
	return false
}

func (x *EVMParams) GetExtraEips() []int64 {
	if x != nil {
		return x.ExtraEips
	}
	return nil
}

func (x *EVMParams) GetChainConfig() *EVMChainConfig {
	if x != nil {
		return x.ChainConfig
	}
	return nil
}

// Deprecated: Do not use.
type EVMChainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HomesteadBlock      string `protobuf:"bytes,1,opt,name=homestead_block,json=homesteadBlock,proto3" json:"homestead_block,omitempty"`
	DaoForkBlock        string `protobuf:"bytes,2,opt,name=dao_fork_block,json=daoForkBlock,proto3" json:"dao_fork_block,omitempty"`
	DaoForkSupport      bool   `protobuf:"varint,3,opt,name=dao_fork_support,json=daoForkSupport,proto3" json:"dao_fork_support,omitempty"`
	Eip150Block         string `protobuf:"bytes,4,opt,name=eip150_block,json=eip150Block,proto3" json:"eip150_block,omitempty"`
	Eip150Hash          string `protobuf:"bytes,5,opt,name=eip150_hash,json=eip150Hash,proto3" json:"eip150_hash,omitempty"`
	Eip155Block         string `protobuf:"bytes,6,opt,name=eip155_block,json=eip155Block,proto3" json:"eip155_block,omitempty"`
	Eip158Block         string `protobuf:"bytes,7,opt,name=eip158_block,json=eip158Block,proto3" json:"eip158_block,omitempty"`
	ByzantiumBlock      string `protobuf:"bytes,8,opt,name=byzantium_block,json=byzantiumBlock,proto3" json:"byzantium_block,omitempty"`
	ConstantinopleBlock string `protobuf:"bytes,9,opt,name=constantinople_block,json=constantinopleBlock,proto3" json:"constantinople_block,omitempty"`
	PetersburgBlock     string `protobuf:"bytes,10,opt,name=petersburg_block,json=petersburgBlock,proto3" json:"petersburg_block,omitempty"`
	IstanbulBlock       string `protobuf:"bytes,11,opt,name=istanbul_block,json=istanbulBlock,proto3" json:"istanbul_block,omitempty"`
	MuirGlacierBlock    string `protobuf:"bytes,12,opt,name=muir_glacier_block,json=muirGlacierBlock,proto3" json:"muir_glacier_block,omitempty"`
	BerlinBlock         string `protobuf:"bytes,13,opt,name=berlin_block,json=berlinBlock,proto3" json:"berlin_block,omitempty"`
	LondonBlock         string `protobuf:"bytes,17,opt,name=london_block,json=londonBlock,proto3" json:"london_block,omitempty"`
}

func (x *EVMChainConfig) Reset() {
	*x = EVMChainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EVMChainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EVMChainConfig) ProtoMessage() {}

// Deprecated: Use EVMChainConfig.ProtoReflect.Descriptor instead.
func (*EVMChainConfig) Descriptor() ([]byte, []int) {
	return file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDescGZIP(), []int{2}
}

func (x *EVMChainConfig) GetHomesteadBlock() string {
	if x != nil {
		return x.HomesteadBlock
	}
	return ""
}

func (x *EVMChainConfig) GetDaoForkBlock() string {
	if x != nil {
		return x.DaoForkBlock
	}
	return ""
}

func (x *EVMChainConfig) GetDaoForkSupport() bool {
	if x != nil {
		return x.DaoForkSupport
	}
	return false
}

func (x *EVMChainConfig) GetEip150Block() string {
	if x != nil {
		return x.Eip150Block
	}
	return ""
}

func (x *EVMChainConfig) GetEip150Hash() string {
	if x != nil {
		return x.Eip150Hash
	}
	return ""
}

func (x *EVMChainConfig) GetEip155Block() string {
	if x != nil {
		return x.Eip155Block
	}
	return ""
}

func (x *EVMChainConfig) GetEip158Block() string {
	if x != nil {
		return x.Eip158Block
	}
	return ""
}

func (x *EVMChainConfig) GetByzantiumBlock() string {
	if x != nil {
		return x.ByzantiumBlock
	}
	return ""
}

func (x *EVMChainConfig) GetConstantinopleBlock() string {
	if x != nil {
		return x.ConstantinopleBlock
	}
	return ""
}

func (x *EVMChainConfig) GetPetersburgBlock() string {
	if x != nil {
		return x.PetersburgBlock
	}
	return ""
}

func (x *EVMChainConfig) GetIstanbulBlock() string {
	if x != nil {
		return x.IstanbulBlock
	}
	return ""
}

func (x *EVMChainConfig) GetMuirGlacierBlock() string {
	if x != nil {
		return x.MuirGlacierBlock
	}
	return ""
}

func (x *EVMChainConfig) GetBerlinBlock() string {
	if x != nil {
		return x.BerlinBlock
	}
	return ""
}

func (x *EVMChainConfig) GetLondonBlock() string {
	if x != nil {
		return x.LondonBlock
	}
	return ""
}

// Deprecated: Do not use.
type FeemarketParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoBaseFee                bool   `protobuf:"varint,1,opt,name=no_base_fee,json=noBaseFee,proto3" json:"no_base_fee,omitempty"`
	BaseFeeChangeDenominator uint32 `protobuf:"varint,2,opt,name=base_fee_change_denominator,json=baseFeeChangeDenominator,proto3" json:"base_fee_change_denominator,omitempty"`
	ElasticityMultiplier     uint32 `protobuf:"varint,3,opt,name=elasticity_multiplier,json=elasticityMultiplier,proto3" json:"elasticity_multiplier,omitempty"`
	InitialBaseFee           int64  `protobuf:"varint,4,opt,name=initial_base_fee,json=initialBaseFee,proto3" json:"initial_base_fee,omitempty"`
	EnableHeight             int64  `protobuf:"varint,5,opt,name=enable_height,json=enableHeight,proto3" json:"enable_height,omitempty"`
}

func (x *FeemarketParams) Reset() {
	*x = FeemarketParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeemarketParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeemarketParams) ProtoMessage() {}

// Deprecated: Use FeemarketParams.ProtoReflect.Descriptor instead.
func (*FeemarketParams) Descriptor() ([]byte, []int) {
	return file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDescGZIP(), []int{3}
}

func (x *FeemarketParams) GetNoBaseFee() bool {
	if x != nil {
		return x.NoBaseFee
	}
	return false
}

func (x *FeemarketParams) GetBaseFeeChangeDenominator() uint32 {
	if x != nil {
		return x.BaseFeeChangeDenominator
	}
	return 0
}

func (x *FeemarketParams) GetElasticityMultiplier() uint32 {
	if x != nil {
		return x.ElasticityMultiplier
	}
	return 0
}

func (x *FeemarketParams) GetInitialBaseFee() int64 {
	if x != nil {
		return x.InitialBaseFee
	}
	return 0
}

func (x *FeemarketParams) GetEnableHeight() int64 {
	if x != nil {
		return x.EnableHeight
	}
	return 0
}

var File_ethermint_evm_v1_evm_proposal_testnet_proto protoreflect.FileDescriptor

var file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x6d, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x76, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x1a,
	0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x69, 0x74, 0x45, 0x76,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x76, 0x6d, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x56, 0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x65, 0x76, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x10, 0x66, 0x65, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0f, 0x66, 0x65, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x3a, 0x0c, 0x88, 0xa0, 0x1f, 0x00, 0x98, 0xa0, 0x1f, 0x00, 0xe8, 0xa0, 0x1f, 0x00, 0x22,
	0xdb, 0x02, 0x0a, 0x09, 0x45, 0x56, 0x4d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x31, 0x0a,
	0x09, 0x65, 0x76, 0x6d, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0xf2, 0xde, 0x1f, 0x10, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x76, 0x6d, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x52, 0x08, 0x65, 0x76, 0x6d, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x12, 0x3d, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0xf2, 0xde, 0x1f, 0x14, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x22, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x37, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0xf2, 0xde, 0x1f, 0x12, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x22, 0x52, 0x0a, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x65, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x42, 0x22, 0xe2, 0xde,
	0x1f, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x49, 0x50, 0x73, 0xf2, 0xde, 0x1f, 0x11, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x69, 0x70, 0x73, 0x22,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x45, 0x69, 0x70, 0x73, 0x12, 0x60, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x65, 0x76,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x56, 0x4d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x1b, 0xc8, 0xde, 0x1f, 0x00, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xfd, 0x0a,
	0x0a, 0x0e, 0x45, 0x56, 0x4d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x5c, 0x0a, 0x0f, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x16, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x68, 0x6f,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0e,
	0x68, 0x6f, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x68,
	0x0a, 0x0e, 0x64, 0x61, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0xe2, 0xde, 0x1f, 0x0c, 0x44, 0x41, 0x4f, 0x46, 0x6f, 0x72, 0x6b, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x64, 0x61, 0x6f, 0x5f, 0x66,
	0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0c, 0x64, 0x61, 0x6f, 0x46,
	0x6f, 0x72, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x57, 0x0a, 0x10, 0x64, 0x61, 0x6f, 0x5f,
	0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x2d, 0xe2, 0xde, 0x1f, 0x0e, 0x44, 0x41, 0x4f, 0x46, 0x6f, 0x72, 0x6b, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0xf2, 0xde, 0x1f, 0x17, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x64, 0x61, 0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x52, 0x0e, 0x64, 0x61, 0x6f, 0x46, 0x6f, 0x72, 0x6b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x62, 0x0a, 0x0c, 0x65, 0x69, 0x70, 0x31, 0x35, 0x30, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xe2, 0xde, 0x1f, 0x0b, 0x45, 0x49, 0x50, 0x31, 0x35, 0x30, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x69, 0x70, 0x31, 0x35,
	0x30, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0b, 0x65, 0x69, 0x70, 0x31, 0x35, 0x30,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x49, 0x0a, 0x0b, 0x65, 0x69, 0x70, 0x31, 0x35, 0x30, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe2, 0xde, 0x1f, 0x0a,
	0x45, 0x49, 0x50, 0x31, 0x35, 0x30, 0x48, 0x61, 0x73, 0x68, 0xf2, 0xde, 0x1f, 0x16, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x75, 0x6d, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0a, 0x65, 0x69, 0x70, 0x31, 0x35, 0x30, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x62, 0x0a, 0x0c, 0x65, 0x69, 0x70, 0x31, 0x35, 0x35, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0xe2, 0xde, 0x1f, 0x0b, 0x45, 0x49, 0x50, 0x31, 0x35, 0x35, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x69, 0x70, 0x31, 0x35, 0x35,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0b, 0x65, 0x69, 0x70, 0x31, 0x35, 0x35, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x62, 0x0a, 0x0c, 0x65, 0x69, 0x70, 0x31, 0x35, 0x38, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xda, 0xde, 0x1f, 0x15,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x49, 0x6e, 0x74, 0xe2, 0xde, 0x1f, 0x0b, 0x45, 0x49, 0x50, 0x31, 0x35, 0x38, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x69,
	0x70, 0x31, 0x35, 0x38, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0b, 0x65, 0x69, 0x70,
	0x31, 0x35, 0x38, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x5c, 0x0a, 0x0f, 0x62, 0x79, 0x7a, 0x61,
	0x6e, 0x74, 0x69, 0x75, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x33, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x16,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x75, 0x6d, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0e, 0x62, 0x79, 0x7a, 0x61, 0x6e, 0x74, 0x69, 0x75,
	0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x6b, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2,
	0xde, 0x1f, 0x1b, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x69, 0x6e, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x52, 0x13,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x5f, 0x0a, 0x10, 0x70, 0x65, 0x74, 0x65, 0x72, 0x73, 0x62, 0x75, 0x72,
	0x67, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xda,
	0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x17, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x70, 0x65, 0x74, 0x65, 0x72, 0x73, 0x62, 0x75, 0x72, 0x67, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x52, 0x0f, 0x70, 0x65, 0x74, 0x65, 0x72, 0x73, 0x62, 0x75, 0x72, 0x67, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x59, 0x0a, 0x0e, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x62, 0x75, 0x6c,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x62, 0x75, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x52, 0x0d, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x62, 0x75, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x64, 0x0a, 0x12, 0x6d, 0x75, 0x69, 0x72, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xda, 0xde, 0x1f,
	0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x19, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x6d, 0x75, 0x69, 0x72, 0x5f, 0x67, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x52, 0x10, 0x6d, 0x75, 0x69, 0x72, 0x47, 0x6c, 0x61, 0x63, 0x69, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xda, 0xde, 0x1f,
	0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x62, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x52, 0x0b, 0x62,
	0x65, 0x72, 0x6c, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x53, 0x0a, 0x0c, 0x6c, 0x6f,
	0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xf2, 0xde, 0x1f, 0x13, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6c, 0x6f, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x52, 0x0b, 0x6c, 0x6f, 0x6e, 0x64, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4a,
	0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a, 0x04, 0x08, 0x10, 0x10,
	0x11, 0x52, 0x0d, 0x79, 0x6f, 0x6c, 0x6f, 0x5f, 0x76, 0x33, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x0b, 0x65, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0e, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x79, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xf4, 0x01,
	0x0a, 0x0f, 0x46, 0x65, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x6f, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65,
	0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x33, 0x0a, 0x15, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0xba, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x42, 0x17, 0x45,
	0x76, 0x6d, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x6e, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x27, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x76, 0x6d, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x45, 0x45, 0x58, 0xaa, 0x02, 0x10, 0x45, 0x74, 0x68, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x6d, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x45, 0x74, 0x68,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x5c, 0x45, 0x76, 0x6d, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c,
	0x45, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x5c, 0x45, 0x76, 0x6d, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x45,
	0x74, 0x68, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x3a, 0x3a, 0x45, 0x76, 0x6d, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDescOnce sync.Once
	file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDescData = file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDesc
)

func file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDescGZIP() []byte {
	file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDescOnce.Do(func() {
		file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDescData = protoimpl.X.CompressGZIP(file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDescData)
	})
	return file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDescData
}

var file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ethermint_evm_v1_evm_proposal_testnet_proto_goTypes = []interface{}{
	(*InitEvmParamsProposal)(nil), // 0: ethermint.evm.v1.InitEvmParamsProposal
	(*EVMParams)(nil),             // 1: ethermint.evm.v1.EVMParams
	(*EVMChainConfig)(nil),        // 2: ethermint.evm.v1.EVMChainConfig
	(*FeemarketParams)(nil),       // 3: ethermint.evm.v1.FeemarketParams
}
var file_ethermint_evm_v1_evm_proposal_testnet_proto_depIdxs = []int32{
	1, // 0: ethermint.evm.v1.InitEvmParamsProposal.evm_params:type_name -> ethermint.evm.v1.EVMParams
	3, // 1: ethermint.evm.v1.InitEvmParamsProposal.feemarket_params:type_name -> ethermint.evm.v1.FeemarketParams
	2, // 2: ethermint.evm.v1.EVMParams.chain_config:type_name -> ethermint.evm.v1.EVMChainConfig
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ethermint_evm_v1_evm_proposal_testnet_proto_init() }
func file_ethermint_evm_v1_evm_proposal_testnet_proto_init() {
	if File_ethermint_evm_v1_evm_proposal_testnet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitEvmParamsProposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVMParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EVMChainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeemarketParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ethermint_evm_v1_evm_proposal_testnet_proto_goTypes,
		DependencyIndexes: file_ethermint_evm_v1_evm_proposal_testnet_proto_depIdxs,
		MessageInfos:      file_ethermint_evm_v1_evm_proposal_testnet_proto_msgTypes,
	}.Build()
	File_ethermint_evm_v1_evm_proposal_testnet_proto = out.File
	file_ethermint_evm_v1_evm_proposal_testnet_proto_rawDesc = nil
	file_ethermint_evm_v1_evm_proposal_testnet_proto_goTypes = nil
	file_ethermint_evm_v1_evm_proposal_testnet_proto_depIdxs = nil
}
