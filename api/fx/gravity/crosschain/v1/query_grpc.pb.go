// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fx/gravity/crosschain/v1/query.proto

package crosschainv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                            = "/fx.gravity.crosschain.v1.Query/Params"
	Query_CurrentOracleSet_FullMethodName                  = "/fx.gravity.crosschain.v1.Query/CurrentOracleSet"
	Query_OracleSetRequest_FullMethodName                  = "/fx.gravity.crosschain.v1.Query/OracleSetRequest"
	Query_OracleSetConfirm_FullMethodName                  = "/fx.gravity.crosschain.v1.Query/OracleSetConfirm"
	Query_OracleSetConfirmsByNonce_FullMethodName          = "/fx.gravity.crosschain.v1.Query/OracleSetConfirmsByNonce"
	Query_LastOracleSetRequests_FullMethodName             = "/fx.gravity.crosschain.v1.Query/LastOracleSetRequests"
	Query_LastPendingOracleSetRequestByAddr_FullMethodName = "/fx.gravity.crosschain.v1.Query/LastPendingOracleSetRequestByAddr"
	Query_LastPendingBatchRequestByAddr_FullMethodName     = "/fx.gravity.crosschain.v1.Query/LastPendingBatchRequestByAddr"
	Query_LastEventNonceByAddr_FullMethodName              = "/fx.gravity.crosschain.v1.Query/LastEventNonceByAddr"
	Query_LastEventBlockHeightByAddr_FullMethodName        = "/fx.gravity.crosschain.v1.Query/LastEventBlockHeightByAddr"
	Query_LastObservedBlockHeight_FullMethodName           = "/fx.gravity.crosschain.v1.Query/LastObservedBlockHeight"
	Query_OutgoingTxBatches_FullMethodName                 = "/fx.gravity.crosschain.v1.Query/OutgoingTxBatches"
	Query_OutgoingTxBatch_FullMethodName                   = "/fx.gravity.crosschain.v1.Query/OutgoingTxBatch"
	Query_BatchConfirm_FullMethodName                      = "/fx.gravity.crosschain.v1.Query/BatchConfirm"
	Query_BatchConfirms_FullMethodName                     = "/fx.gravity.crosschain.v1.Query/BatchConfirms"
	Query_TokenToDenom_FullMethodName                      = "/fx.gravity.crosschain.v1.Query/TokenToDenom"
	Query_DenomToToken_FullMethodName                      = "/fx.gravity.crosschain.v1.Query/DenomToToken"
	Query_GetOracleByAddr_FullMethodName                   = "/fx.gravity.crosschain.v1.Query/GetOracleByAddr"
	Query_GetOracleByExternalAddr_FullMethodName           = "/fx.gravity.crosschain.v1.Query/GetOracleByExternalAddr"
	Query_GetOracleByBridgerAddr_FullMethodName            = "/fx.gravity.crosschain.v1.Query/GetOracleByBridgerAddr"
	Query_BridgeCalls_FullMethodName                       = "/fx.gravity.crosschain.v1.Query/BridgeCalls"
	Query_BridgeCallConfirmByNonce_FullMethodName          = "/fx.gravity.crosschain.v1.Query/BridgeCallConfirmByNonce"
	Query_BridgeCallByNonce_FullMethodName                 = "/fx.gravity.crosschain.v1.Query/BridgeCallByNonce"
	Query_BridgeCallBySender_FullMethodName                = "/fx.gravity.crosschain.v1.Query/BridgeCallBySender"
	Query_LastPendingBridgeCallByAddr_FullMethodName       = "/fx.gravity.crosschain.v1.Query/LastPendingBridgeCallByAddr"
	Query_PendingExecuteClaim_FullMethodName               = "/fx.gravity.crosschain.v1.Query/PendingExecuteClaim"
	Query_Oracles_FullMethodName                           = "/fx.gravity.crosschain.v1.Query/Oracles"
	Query_ProjectedBatchTimeoutHeight_FullMethodName       = "/fx.gravity.crosschain.v1.Query/ProjectedBatchTimeoutHeight"
	Query_BridgeTokens_FullMethodName                      = "/fx.gravity.crosschain.v1.Query/BridgeTokens"
	Query_BridgeCoinByDenom_FullMethodName                 = "/fx.gravity.crosschain.v1.Query/BridgeCoinByDenom"
	Query_BridgeChainList_FullMethodName                   = "/fx.gravity.crosschain.v1.Query/BridgeChainList"
	Query_BridgeCallQuoteByNonce_FullMethodName            = "/fx.gravity.crosschain.v1.Query/BridgeCallQuoteByNonce"
	Query_BridgeCallsByFeeReceiver_FullMethodName          = "/fx.gravity.crosschain.v1.Query/BridgeCallsByFeeReceiver"
	Query_BridgeTokensByChain_FullMethodName               = "/fx.gravity.crosschain.v1.Query/BridgeTokensByChain"
	Query_BridgeTokensByDenom_FullMethodName               = "/fx.gravity.crosschain.v1.Query/BridgeTokensByDenom"
	Query_BridgeTokensByERC20_FullMethodName               = "/fx.gravity.crosschain.v1.Query/BridgeTokensByERC20"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Deployments queries deployments
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	CurrentOracleSet(ctx context.Context, in *QueryCurrentOracleSetRequest, opts ...grpc.CallOption) (*QueryCurrentOracleSetResponse, error)
	OracleSetRequest(ctx context.Context, in *QueryOracleSetRequestRequest, opts ...grpc.CallOption) (*QueryOracleSetRequestResponse, error)
	OracleSetConfirm(ctx context.Context, in *QueryOracleSetConfirmRequest, opts ...grpc.CallOption) (*QueryOracleSetConfirmResponse, error)
	OracleSetConfirmsByNonce(ctx context.Context, in *QueryOracleSetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryOracleSetConfirmsByNonceResponse, error)
	LastOracleSetRequests(ctx context.Context, in *QueryLastOracleSetRequestsRequest, opts ...grpc.CallOption) (*QueryLastOracleSetRequestsResponse, error)
	LastPendingOracleSetRequestByAddr(ctx context.Context, in *QueryLastPendingOracleSetRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingOracleSetRequestByAddrResponse, error)
	LastPendingBatchRequestByAddr(ctx context.Context, in *QueryLastPendingBatchRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchRequestByAddrResponse, error)
	LastEventNonceByAddr(ctx context.Context, in *QueryLastEventNonceByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventNonceByAddrResponse, error)
	LastEventBlockHeightByAddr(ctx context.Context, in *QueryLastEventBlockHeightByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventBlockHeightByAddrResponse, error)
	LastObservedBlockHeight(ctx context.Context, in *QueryLastObservedBlockHeightRequest, opts ...grpc.CallOption) (*QueryLastObservedBlockHeightResponse, error)
	OutgoingTxBatches(ctx context.Context, in *QueryOutgoingTxBatchesRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesResponse, error)
	OutgoingTxBatch(ctx context.Context, in *QueryOutgoingTxBatchRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchResponse, error)
	BatchConfirm(ctx context.Context, in *QueryBatchConfirmRequest, opts ...grpc.CallOption) (*QueryBatchConfirmResponse, error)
	BatchConfirms(ctx context.Context, in *QueryBatchConfirmsRequest, opts ...grpc.CallOption) (*QueryBatchConfirmsResponse, error)
	// Deprecated: Please use BridgeTokensByDenom
	TokenToDenom(ctx context.Context, in *QueryTokenToDenomRequest, opts ...grpc.CallOption) (*QueryTokenToDenomResponse, error)
	// Deprecated: Please use BridgeTokensByDenom
	DenomToToken(ctx context.Context, in *QueryDenomToTokenRequest, opts ...grpc.CallOption) (*QueryDenomToTokenResponse, error)
	GetOracleByAddr(ctx context.Context, in *QueryOracleByAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error)
	GetOracleByExternalAddr(ctx context.Context, in *QueryOracleByExternalAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error)
	GetOracleByBridgerAddr(ctx context.Context, in *QueryOracleByBridgerAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error)
	BridgeCalls(ctx context.Context, in *QueryBridgeCallsRequest, opts ...grpc.CallOption) (*QueryBridgeCallsResponse, error)
	BridgeCallConfirmByNonce(ctx context.Context, in *QueryBridgeCallConfirmByNonceRequest, opts ...grpc.CallOption) (*QueryBridgeCallConfirmByNonceResponse, error)
	BridgeCallByNonce(ctx context.Context, in *QueryBridgeCallByNonceRequest, opts ...grpc.CallOption) (*QueryBridgeCallByNonceResponse, error)
	BridgeCallBySender(ctx context.Context, in *QueryBridgeCallBySenderRequest, opts ...grpc.CallOption) (*QueryBridgeCallBySenderResponse, error)
	LastPendingBridgeCallByAddr(ctx context.Context, in *QueryLastPendingBridgeCallByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBridgeCallByAddrResponse, error)
	PendingExecuteClaim(ctx context.Context, in *QueryPendingExecuteClaimRequest, opts ...grpc.CallOption) (*QueryPendingExecuteClaimResponse, error)
	// Validators queries all oracle that match the given status.
	Oracles(ctx context.Context, in *QueryOraclesRequest, opts ...grpc.CallOption) (*QueryOraclesResponse, error)
	ProjectedBatchTimeoutHeight(ctx context.Context, in *QueryProjectedBatchTimeoutHeightRequest, opts ...grpc.CallOption) (*QueryProjectedBatchTimeoutHeightResponse, error)
	BridgeTokens(ctx context.Context, in *QueryBridgeTokensRequest, opts ...grpc.CallOption) (*QueryBridgeTokensResponse, error)
	BridgeCoinByDenom(ctx context.Context, in *QueryBridgeCoinByDenomRequest, opts ...grpc.CallOption) (*QueryBridgeCoinByDenomResponse, error)
	BridgeChainList(ctx context.Context, in *QueryBridgeChainListRequest, opts ...grpc.CallOption) (*QueryBridgeChainListResponse, error)
	BridgeCallQuoteByNonce(ctx context.Context, in *QueryBridgeCallQuoteByNonceRequest, opts ...grpc.CallOption) (*QueryBridgeCallQuoteByNonceResponse, error)
	BridgeCallsByFeeReceiver(ctx context.Context, in *QueryBridgeCallsByFeeReceiverRequest, opts ...grpc.CallOption) (*QueryBridgeCallsByFeeReceiverResponse, error)
	BridgeTokensByChain(ctx context.Context, in *QueryBridgeTokensByChainRequest, opts ...grpc.CallOption) (*QueryBridgeTokensByChainResponse, error)
	BridgeTokensByDenom(ctx context.Context, in *QueryBridgeTokensByDenomRequest, opts ...grpc.CallOption) (*QueryBridgeTokensByDenomResponse, error)
	BridgeTokensByERC20(ctx context.Context, in *QueryBridgeTokensByERC20Request, opts ...grpc.CallOption) (*QueryBridgeTokensByERC20Response, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentOracleSet(ctx context.Context, in *QueryCurrentOracleSetRequest, opts ...grpc.CallOption) (*QueryCurrentOracleSetResponse, error) {
	out := new(QueryCurrentOracleSetResponse)
	err := c.cc.Invoke(ctx, Query_CurrentOracleSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleSetRequest(ctx context.Context, in *QueryOracleSetRequestRequest, opts ...grpc.CallOption) (*QueryOracleSetRequestResponse, error) {
	out := new(QueryOracleSetRequestResponse)
	err := c.cc.Invoke(ctx, Query_OracleSetRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleSetConfirm(ctx context.Context, in *QueryOracleSetConfirmRequest, opts ...grpc.CallOption) (*QueryOracleSetConfirmResponse, error) {
	out := new(QueryOracleSetConfirmResponse)
	err := c.cc.Invoke(ctx, Query_OracleSetConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleSetConfirmsByNonce(ctx context.Context, in *QueryOracleSetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryOracleSetConfirmsByNonceResponse, error) {
	out := new(QueryOracleSetConfirmsByNonceResponse)
	err := c.cc.Invoke(ctx, Query_OracleSetConfirmsByNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastOracleSetRequests(ctx context.Context, in *QueryLastOracleSetRequestsRequest, opts ...grpc.CallOption) (*QueryLastOracleSetRequestsResponse, error) {
	out := new(QueryLastOracleSetRequestsResponse)
	err := c.cc.Invoke(ctx, Query_LastOracleSetRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingOracleSetRequestByAddr(ctx context.Context, in *QueryLastPendingOracleSetRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingOracleSetRequestByAddrResponse, error) {
	out := new(QueryLastPendingOracleSetRequestByAddrResponse)
	err := c.cc.Invoke(ctx, Query_LastPendingOracleSetRequestByAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingBatchRequestByAddr(ctx context.Context, in *QueryLastPendingBatchRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchRequestByAddrResponse, error) {
	out := new(QueryLastPendingBatchRequestByAddrResponse)
	err := c.cc.Invoke(ctx, Query_LastPendingBatchRequestByAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastEventNonceByAddr(ctx context.Context, in *QueryLastEventNonceByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventNonceByAddrResponse, error) {
	out := new(QueryLastEventNonceByAddrResponse)
	err := c.cc.Invoke(ctx, Query_LastEventNonceByAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastEventBlockHeightByAddr(ctx context.Context, in *QueryLastEventBlockHeightByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventBlockHeightByAddrResponse, error) {
	out := new(QueryLastEventBlockHeightByAddrResponse)
	err := c.cc.Invoke(ctx, Query_LastEventBlockHeightByAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastObservedBlockHeight(ctx context.Context, in *QueryLastObservedBlockHeightRequest, opts ...grpc.CallOption) (*QueryLastObservedBlockHeightResponse, error) {
	out := new(QueryLastObservedBlockHeightResponse)
	err := c.cc.Invoke(ctx, Query_LastObservedBlockHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingTxBatches(ctx context.Context, in *QueryOutgoingTxBatchesRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesResponse, error) {
	out := new(QueryOutgoingTxBatchesResponse)
	err := c.cc.Invoke(ctx, Query_OutgoingTxBatches_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingTxBatch(ctx context.Context, in *QueryOutgoingTxBatchRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchResponse, error) {
	out := new(QueryOutgoingTxBatchResponse)
	err := c.cc.Invoke(ctx, Query_OutgoingTxBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchConfirm(ctx context.Context, in *QueryBatchConfirmRequest, opts ...grpc.CallOption) (*QueryBatchConfirmResponse, error) {
	out := new(QueryBatchConfirmResponse)
	err := c.cc.Invoke(ctx, Query_BatchConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchConfirms(ctx context.Context, in *QueryBatchConfirmsRequest, opts ...grpc.CallOption) (*QueryBatchConfirmsResponse, error) {
	out := new(QueryBatchConfirmsResponse)
	err := c.cc.Invoke(ctx, Query_BatchConfirms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenToDenom(ctx context.Context, in *QueryTokenToDenomRequest, opts ...grpc.CallOption) (*QueryTokenToDenomResponse, error) {
	out := new(QueryTokenToDenomResponse)
	err := c.cc.Invoke(ctx, Query_TokenToDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomToToken(ctx context.Context, in *QueryDenomToTokenRequest, opts ...grpc.CallOption) (*QueryDenomToTokenResponse, error) {
	out := new(QueryDenomToTokenResponse)
	err := c.cc.Invoke(ctx, Query_DenomToToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOracleByAddr(ctx context.Context, in *QueryOracleByAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error) {
	out := new(QueryOracleResponse)
	err := c.cc.Invoke(ctx, Query_GetOracleByAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOracleByExternalAddr(ctx context.Context, in *QueryOracleByExternalAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error) {
	out := new(QueryOracleResponse)
	err := c.cc.Invoke(ctx, Query_GetOracleByExternalAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOracleByBridgerAddr(ctx context.Context, in *QueryOracleByBridgerAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error) {
	out := new(QueryOracleResponse)
	err := c.cc.Invoke(ctx, Query_GetOracleByBridgerAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCalls(ctx context.Context, in *QueryBridgeCallsRequest, opts ...grpc.CallOption) (*QueryBridgeCallsResponse, error) {
	out := new(QueryBridgeCallsResponse)
	err := c.cc.Invoke(ctx, Query_BridgeCalls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCallConfirmByNonce(ctx context.Context, in *QueryBridgeCallConfirmByNonceRequest, opts ...grpc.CallOption) (*QueryBridgeCallConfirmByNonceResponse, error) {
	out := new(QueryBridgeCallConfirmByNonceResponse)
	err := c.cc.Invoke(ctx, Query_BridgeCallConfirmByNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCallByNonce(ctx context.Context, in *QueryBridgeCallByNonceRequest, opts ...grpc.CallOption) (*QueryBridgeCallByNonceResponse, error) {
	out := new(QueryBridgeCallByNonceResponse)
	err := c.cc.Invoke(ctx, Query_BridgeCallByNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCallBySender(ctx context.Context, in *QueryBridgeCallBySenderRequest, opts ...grpc.CallOption) (*QueryBridgeCallBySenderResponse, error) {
	out := new(QueryBridgeCallBySenderResponse)
	err := c.cc.Invoke(ctx, Query_BridgeCallBySender_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingBridgeCallByAddr(ctx context.Context, in *QueryLastPendingBridgeCallByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBridgeCallByAddrResponse, error) {
	out := new(QueryLastPendingBridgeCallByAddrResponse)
	err := c.cc.Invoke(ctx, Query_LastPendingBridgeCallByAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingExecuteClaim(ctx context.Context, in *QueryPendingExecuteClaimRequest, opts ...grpc.CallOption) (*QueryPendingExecuteClaimResponse, error) {
	out := new(QueryPendingExecuteClaimResponse)
	err := c.cc.Invoke(ctx, Query_PendingExecuteClaim_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Oracles(ctx context.Context, in *QueryOraclesRequest, opts ...grpc.CallOption) (*QueryOraclesResponse, error) {
	out := new(QueryOraclesResponse)
	err := c.cc.Invoke(ctx, Query_Oracles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProjectedBatchTimeoutHeight(ctx context.Context, in *QueryProjectedBatchTimeoutHeightRequest, opts ...grpc.CallOption) (*QueryProjectedBatchTimeoutHeightResponse, error) {
	out := new(QueryProjectedBatchTimeoutHeightResponse)
	err := c.cc.Invoke(ctx, Query_ProjectedBatchTimeoutHeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeTokens(ctx context.Context, in *QueryBridgeTokensRequest, opts ...grpc.CallOption) (*QueryBridgeTokensResponse, error) {
	out := new(QueryBridgeTokensResponse)
	err := c.cc.Invoke(ctx, Query_BridgeTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCoinByDenom(ctx context.Context, in *QueryBridgeCoinByDenomRequest, opts ...grpc.CallOption) (*QueryBridgeCoinByDenomResponse, error) {
	out := new(QueryBridgeCoinByDenomResponse)
	err := c.cc.Invoke(ctx, Query_BridgeCoinByDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeChainList(ctx context.Context, in *QueryBridgeChainListRequest, opts ...grpc.CallOption) (*QueryBridgeChainListResponse, error) {
	out := new(QueryBridgeChainListResponse)
	err := c.cc.Invoke(ctx, Query_BridgeChainList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCallQuoteByNonce(ctx context.Context, in *QueryBridgeCallQuoteByNonceRequest, opts ...grpc.CallOption) (*QueryBridgeCallQuoteByNonceResponse, error) {
	out := new(QueryBridgeCallQuoteByNonceResponse)
	err := c.cc.Invoke(ctx, Query_BridgeCallQuoteByNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCallsByFeeReceiver(ctx context.Context, in *QueryBridgeCallsByFeeReceiverRequest, opts ...grpc.CallOption) (*QueryBridgeCallsByFeeReceiverResponse, error) {
	out := new(QueryBridgeCallsByFeeReceiverResponse)
	err := c.cc.Invoke(ctx, Query_BridgeCallsByFeeReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeTokensByChain(ctx context.Context, in *QueryBridgeTokensByChainRequest, opts ...grpc.CallOption) (*QueryBridgeTokensByChainResponse, error) {
	out := new(QueryBridgeTokensByChainResponse)
	err := c.cc.Invoke(ctx, Query_BridgeTokensByChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeTokensByDenom(ctx context.Context, in *QueryBridgeTokensByDenomRequest, opts ...grpc.CallOption) (*QueryBridgeTokensByDenomResponse, error) {
	out := new(QueryBridgeTokensByDenomResponse)
	err := c.cc.Invoke(ctx, Query_BridgeTokensByDenom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeTokensByERC20(ctx context.Context, in *QueryBridgeTokensByERC20Request, opts ...grpc.CallOption) (*QueryBridgeTokensByERC20Response, error) {
	out := new(QueryBridgeTokensByERC20Response)
	err := c.cc.Invoke(ctx, Query_BridgeTokensByERC20_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Deployments queries deployments
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	CurrentOracleSet(context.Context, *QueryCurrentOracleSetRequest) (*QueryCurrentOracleSetResponse, error)
	OracleSetRequest(context.Context, *QueryOracleSetRequestRequest) (*QueryOracleSetRequestResponse, error)
	OracleSetConfirm(context.Context, *QueryOracleSetConfirmRequest) (*QueryOracleSetConfirmResponse, error)
	OracleSetConfirmsByNonce(context.Context, *QueryOracleSetConfirmsByNonceRequest) (*QueryOracleSetConfirmsByNonceResponse, error)
	LastOracleSetRequests(context.Context, *QueryLastOracleSetRequestsRequest) (*QueryLastOracleSetRequestsResponse, error)
	LastPendingOracleSetRequestByAddr(context.Context, *QueryLastPendingOracleSetRequestByAddrRequest) (*QueryLastPendingOracleSetRequestByAddrResponse, error)
	LastPendingBatchRequestByAddr(context.Context, *QueryLastPendingBatchRequestByAddrRequest) (*QueryLastPendingBatchRequestByAddrResponse, error)
	LastEventNonceByAddr(context.Context, *QueryLastEventNonceByAddrRequest) (*QueryLastEventNonceByAddrResponse, error)
	LastEventBlockHeightByAddr(context.Context, *QueryLastEventBlockHeightByAddrRequest) (*QueryLastEventBlockHeightByAddrResponse, error)
	LastObservedBlockHeight(context.Context, *QueryLastObservedBlockHeightRequest) (*QueryLastObservedBlockHeightResponse, error)
	OutgoingTxBatches(context.Context, *QueryOutgoingTxBatchesRequest) (*QueryOutgoingTxBatchesResponse, error)
	OutgoingTxBatch(context.Context, *QueryOutgoingTxBatchRequest) (*QueryOutgoingTxBatchResponse, error)
	BatchConfirm(context.Context, *QueryBatchConfirmRequest) (*QueryBatchConfirmResponse, error)
	BatchConfirms(context.Context, *QueryBatchConfirmsRequest) (*QueryBatchConfirmsResponse, error)
	// Deprecated: Please use BridgeTokensByDenom
	TokenToDenom(context.Context, *QueryTokenToDenomRequest) (*QueryTokenToDenomResponse, error)
	// Deprecated: Please use BridgeTokensByDenom
	DenomToToken(context.Context, *QueryDenomToTokenRequest) (*QueryDenomToTokenResponse, error)
	GetOracleByAddr(context.Context, *QueryOracleByAddrRequest) (*QueryOracleResponse, error)
	GetOracleByExternalAddr(context.Context, *QueryOracleByExternalAddrRequest) (*QueryOracleResponse, error)
	GetOracleByBridgerAddr(context.Context, *QueryOracleByBridgerAddrRequest) (*QueryOracleResponse, error)
	BridgeCalls(context.Context, *QueryBridgeCallsRequest) (*QueryBridgeCallsResponse, error)
	BridgeCallConfirmByNonce(context.Context, *QueryBridgeCallConfirmByNonceRequest) (*QueryBridgeCallConfirmByNonceResponse, error)
	BridgeCallByNonce(context.Context, *QueryBridgeCallByNonceRequest) (*QueryBridgeCallByNonceResponse, error)
	BridgeCallBySender(context.Context, *QueryBridgeCallBySenderRequest) (*QueryBridgeCallBySenderResponse, error)
	LastPendingBridgeCallByAddr(context.Context, *QueryLastPendingBridgeCallByAddrRequest) (*QueryLastPendingBridgeCallByAddrResponse, error)
	PendingExecuteClaim(context.Context, *QueryPendingExecuteClaimRequest) (*QueryPendingExecuteClaimResponse, error)
	// Validators queries all oracle that match the given status.
	Oracles(context.Context, *QueryOraclesRequest) (*QueryOraclesResponse, error)
	ProjectedBatchTimeoutHeight(context.Context, *QueryProjectedBatchTimeoutHeightRequest) (*QueryProjectedBatchTimeoutHeightResponse, error)
	BridgeTokens(context.Context, *QueryBridgeTokensRequest) (*QueryBridgeTokensResponse, error)
	BridgeCoinByDenom(context.Context, *QueryBridgeCoinByDenomRequest) (*QueryBridgeCoinByDenomResponse, error)
	BridgeChainList(context.Context, *QueryBridgeChainListRequest) (*QueryBridgeChainListResponse, error)
	BridgeCallQuoteByNonce(context.Context, *QueryBridgeCallQuoteByNonceRequest) (*QueryBridgeCallQuoteByNonceResponse, error)
	BridgeCallsByFeeReceiver(context.Context, *QueryBridgeCallsByFeeReceiverRequest) (*QueryBridgeCallsByFeeReceiverResponse, error)
	BridgeTokensByChain(context.Context, *QueryBridgeTokensByChainRequest) (*QueryBridgeTokensByChainResponse, error)
	BridgeTokensByDenom(context.Context, *QueryBridgeTokensByDenomRequest) (*QueryBridgeTokensByDenomResponse, error)
	BridgeTokensByERC20(context.Context, *QueryBridgeTokensByERC20Request) (*QueryBridgeTokensByERC20Response, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) CurrentOracleSet(context.Context, *QueryCurrentOracleSetRequest) (*QueryCurrentOracleSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentOracleSet not implemented")
}
func (UnimplementedQueryServer) OracleSetRequest(context.Context, *QueryOracleSetRequestRequest) (*QueryOracleSetRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSetRequest not implemented")
}
func (UnimplementedQueryServer) OracleSetConfirm(context.Context, *QueryOracleSetConfirmRequest) (*QueryOracleSetConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSetConfirm not implemented")
}
func (UnimplementedQueryServer) OracleSetConfirmsByNonce(context.Context, *QueryOracleSetConfirmsByNonceRequest) (*QueryOracleSetConfirmsByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSetConfirmsByNonce not implemented")
}
func (UnimplementedQueryServer) LastOracleSetRequests(context.Context, *QueryLastOracleSetRequestsRequest) (*QueryLastOracleSetRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastOracleSetRequests not implemented")
}
func (UnimplementedQueryServer) LastPendingOracleSetRequestByAddr(context.Context, *QueryLastPendingOracleSetRequestByAddrRequest) (*QueryLastPendingOracleSetRequestByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingOracleSetRequestByAddr not implemented")
}
func (UnimplementedQueryServer) LastPendingBatchRequestByAddr(context.Context, *QueryLastPendingBatchRequestByAddrRequest) (*QueryLastPendingBatchRequestByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingBatchRequestByAddr not implemented")
}
func (UnimplementedQueryServer) LastEventNonceByAddr(context.Context, *QueryLastEventNonceByAddrRequest) (*QueryLastEventNonceByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastEventNonceByAddr not implemented")
}
func (UnimplementedQueryServer) LastEventBlockHeightByAddr(context.Context, *QueryLastEventBlockHeightByAddrRequest) (*QueryLastEventBlockHeightByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastEventBlockHeightByAddr not implemented")
}
func (UnimplementedQueryServer) LastObservedBlockHeight(context.Context, *QueryLastObservedBlockHeightRequest) (*QueryLastObservedBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastObservedBlockHeight not implemented")
}
func (UnimplementedQueryServer) OutgoingTxBatches(context.Context, *QueryOutgoingTxBatchesRequest) (*QueryOutgoingTxBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingTxBatches not implemented")
}
func (UnimplementedQueryServer) OutgoingTxBatch(context.Context, *QueryOutgoingTxBatchRequest) (*QueryOutgoingTxBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingTxBatch not implemented")
}
func (UnimplementedQueryServer) BatchConfirm(context.Context, *QueryBatchConfirmRequest) (*QueryBatchConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchConfirm not implemented")
}
func (UnimplementedQueryServer) BatchConfirms(context.Context, *QueryBatchConfirmsRequest) (*QueryBatchConfirmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchConfirms not implemented")
}
func (UnimplementedQueryServer) TokenToDenom(context.Context, *QueryTokenToDenomRequest) (*QueryTokenToDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenToDenom not implemented")
}
func (UnimplementedQueryServer) DenomToToken(context.Context, *QueryDenomToTokenRequest) (*QueryDenomToTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomToToken not implemented")
}
func (UnimplementedQueryServer) GetOracleByAddr(context.Context, *QueryOracleByAddrRequest) (*QueryOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleByAddr not implemented")
}
func (UnimplementedQueryServer) GetOracleByExternalAddr(context.Context, *QueryOracleByExternalAddrRequest) (*QueryOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleByExternalAddr not implemented")
}
func (UnimplementedQueryServer) GetOracleByBridgerAddr(context.Context, *QueryOracleByBridgerAddrRequest) (*QueryOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleByBridgerAddr not implemented")
}
func (UnimplementedQueryServer) BridgeCalls(context.Context, *QueryBridgeCallsRequest) (*QueryBridgeCallsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCalls not implemented")
}
func (UnimplementedQueryServer) BridgeCallConfirmByNonce(context.Context, *QueryBridgeCallConfirmByNonceRequest) (*QueryBridgeCallConfirmByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCallConfirmByNonce not implemented")
}
func (UnimplementedQueryServer) BridgeCallByNonce(context.Context, *QueryBridgeCallByNonceRequest) (*QueryBridgeCallByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCallByNonce not implemented")
}
func (UnimplementedQueryServer) BridgeCallBySender(context.Context, *QueryBridgeCallBySenderRequest) (*QueryBridgeCallBySenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCallBySender not implemented")
}
func (UnimplementedQueryServer) LastPendingBridgeCallByAddr(context.Context, *QueryLastPendingBridgeCallByAddrRequest) (*QueryLastPendingBridgeCallByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingBridgeCallByAddr not implemented")
}
func (UnimplementedQueryServer) PendingExecuteClaim(context.Context, *QueryPendingExecuteClaimRequest) (*QueryPendingExecuteClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingExecuteClaim not implemented")
}
func (UnimplementedQueryServer) Oracles(context.Context, *QueryOraclesRequest) (*QueryOraclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oracles not implemented")
}
func (UnimplementedQueryServer) ProjectedBatchTimeoutHeight(context.Context, *QueryProjectedBatchTimeoutHeightRequest) (*QueryProjectedBatchTimeoutHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectedBatchTimeoutHeight not implemented")
}
func (UnimplementedQueryServer) BridgeTokens(context.Context, *QueryBridgeTokensRequest) (*QueryBridgeTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeTokens not implemented")
}
func (UnimplementedQueryServer) BridgeCoinByDenom(context.Context, *QueryBridgeCoinByDenomRequest) (*QueryBridgeCoinByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCoinByDenom not implemented")
}
func (UnimplementedQueryServer) BridgeChainList(context.Context, *QueryBridgeChainListRequest) (*QueryBridgeChainListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeChainList not implemented")
}
func (UnimplementedQueryServer) BridgeCallQuoteByNonce(context.Context, *QueryBridgeCallQuoteByNonceRequest) (*QueryBridgeCallQuoteByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCallQuoteByNonce not implemented")
}
func (UnimplementedQueryServer) BridgeCallsByFeeReceiver(context.Context, *QueryBridgeCallsByFeeReceiverRequest) (*QueryBridgeCallsByFeeReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCallsByFeeReceiver not implemented")
}
func (UnimplementedQueryServer) BridgeTokensByChain(context.Context, *QueryBridgeTokensByChainRequest) (*QueryBridgeTokensByChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeTokensByChain not implemented")
}
func (UnimplementedQueryServer) BridgeTokensByDenom(context.Context, *QueryBridgeTokensByDenomRequest) (*QueryBridgeTokensByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeTokensByDenom not implemented")
}
func (UnimplementedQueryServer) BridgeTokensByERC20(context.Context, *QueryBridgeTokensByERC20Request) (*QueryBridgeTokensByERC20Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeTokensByERC20 not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentOracleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentOracleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentOracleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CurrentOracleSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentOracleSet(ctx, req.(*QueryCurrentOracleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleSetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleSetRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleSetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleSetRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleSetRequest(ctx, req.(*QueryOracleSetRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleSetConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleSetConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleSetConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleSetConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleSetConfirm(ctx, req.(*QueryOracleSetConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleSetConfirmsByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleSetConfirmsByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleSetConfirmsByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleSetConfirmsByNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleSetConfirmsByNonce(ctx, req.(*QueryOracleSetConfirmsByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastOracleSetRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastOracleSetRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastOracleSetRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastOracleSetRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastOracleSetRequests(ctx, req.(*QueryLastOracleSetRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingOracleSetRequestByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingOracleSetRequestByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingOracleSetRequestByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastPendingOracleSetRequestByAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingOracleSetRequestByAddr(ctx, req.(*QueryLastPendingOracleSetRequestByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingBatchRequestByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingBatchRequestByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingBatchRequestByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastPendingBatchRequestByAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingBatchRequestByAddr(ctx, req.(*QueryLastPendingBatchRequestByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastEventNonceByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastEventNonceByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastEventNonceByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastEventNonceByAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastEventNonceByAddr(ctx, req.(*QueryLastEventNonceByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastEventBlockHeightByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastEventBlockHeightByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastEventBlockHeightByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastEventBlockHeightByAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastEventBlockHeightByAddr(ctx, req.(*QueryLastEventBlockHeightByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastObservedBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastObservedBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastObservedBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastObservedBlockHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastObservedBlockHeight(ctx, req.(*QueryLastObservedBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingTxBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingTxBatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingTxBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OutgoingTxBatches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingTxBatches(ctx, req.(*QueryOutgoingTxBatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingTxBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingTxBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingTxBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OutgoingTxBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingTxBatch(ctx, req.(*QueryOutgoingTxBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BatchConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchConfirm(ctx, req.(*QueryBatchConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchConfirms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchConfirmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchConfirms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BatchConfirms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchConfirms(ctx, req.(*QueryBatchConfirmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenToDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenToDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenToDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenToDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenToDenom(ctx, req.(*QueryTokenToDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomToToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomToTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomToToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DenomToToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomToToken(ctx, req.(*QueryDenomToTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOracleByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOracleByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetOracleByAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOracleByAddr(ctx, req.(*QueryOracleByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOracleByExternalAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleByExternalAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOracleByExternalAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetOracleByExternalAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOracleByExternalAddr(ctx, req.(*QueryOracleByExternalAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOracleByBridgerAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleByBridgerAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOracleByBridgerAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetOracleByBridgerAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOracleByBridgerAddr(ctx, req.(*QueryOracleByBridgerAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeCalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCalls(ctx, req.(*QueryBridgeCallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCallConfirmByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCallConfirmByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCallConfirmByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeCallConfirmByNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCallConfirmByNonce(ctx, req.(*QueryBridgeCallConfirmByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCallByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCallByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCallByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeCallByNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCallByNonce(ctx, req.(*QueryBridgeCallByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCallBySender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCallBySenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCallBySender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeCallBySender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCallBySender(ctx, req.(*QueryBridgeCallBySenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingBridgeCallByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingBridgeCallByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingBridgeCallByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastPendingBridgeCallByAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingBridgeCallByAddr(ctx, req.(*QueryLastPendingBridgeCallByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingExecuteClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingExecuteClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingExecuteClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PendingExecuteClaim_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingExecuteClaim(ctx, req.(*QueryPendingExecuteClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Oracles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOraclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Oracles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Oracles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Oracles(ctx, req.(*QueryOraclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProjectedBatchTimeoutHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectedBatchTimeoutHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProjectedBatchTimeoutHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ProjectedBatchTimeoutHeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProjectedBatchTimeoutHeight(ctx, req.(*QueryProjectedBatchTimeoutHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeTokens(ctx, req.(*QueryBridgeTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCoinByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCoinByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCoinByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeCoinByDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCoinByDenom(ctx, req.(*QueryBridgeCoinByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeChainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeChainListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeChainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeChainList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeChainList(ctx, req.(*QueryBridgeChainListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCallQuoteByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCallQuoteByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCallQuoteByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeCallQuoteByNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCallQuoteByNonce(ctx, req.(*QueryBridgeCallQuoteByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCallsByFeeReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCallsByFeeReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCallsByFeeReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeCallsByFeeReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCallsByFeeReceiver(ctx, req.(*QueryBridgeCallsByFeeReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeTokensByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeTokensByChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeTokensByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeTokensByChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeTokensByChain(ctx, req.(*QueryBridgeTokensByChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeTokensByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeTokensByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeTokensByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeTokensByDenom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeTokensByDenom(ctx, req.(*QueryBridgeTokensByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeTokensByERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeTokensByERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeTokensByERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BridgeTokensByERC20_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeTokensByERC20(ctx, req.(*QueryBridgeTokensByERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fx.gravity.crosschain.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CurrentOracleSet",
			Handler:    _Query_CurrentOracleSet_Handler,
		},
		{
			MethodName: "OracleSetRequest",
			Handler:    _Query_OracleSetRequest_Handler,
		},
		{
			MethodName: "OracleSetConfirm",
			Handler:    _Query_OracleSetConfirm_Handler,
		},
		{
			MethodName: "OracleSetConfirmsByNonce",
			Handler:    _Query_OracleSetConfirmsByNonce_Handler,
		},
		{
			MethodName: "LastOracleSetRequests",
			Handler:    _Query_LastOracleSetRequests_Handler,
		},
		{
			MethodName: "LastPendingOracleSetRequestByAddr",
			Handler:    _Query_LastPendingOracleSetRequestByAddr_Handler,
		},
		{
			MethodName: "LastPendingBatchRequestByAddr",
			Handler:    _Query_LastPendingBatchRequestByAddr_Handler,
		},
		{
			MethodName: "LastEventNonceByAddr",
			Handler:    _Query_LastEventNonceByAddr_Handler,
		},
		{
			MethodName: "LastEventBlockHeightByAddr",
			Handler:    _Query_LastEventBlockHeightByAddr_Handler,
		},
		{
			MethodName: "LastObservedBlockHeight",
			Handler:    _Query_LastObservedBlockHeight_Handler,
		},
		{
			MethodName: "OutgoingTxBatches",
			Handler:    _Query_OutgoingTxBatches_Handler,
		},
		{
			MethodName: "OutgoingTxBatch",
			Handler:    _Query_OutgoingTxBatch_Handler,
		},
		{
			MethodName: "BatchConfirm",
			Handler:    _Query_BatchConfirm_Handler,
		},
		{
			MethodName: "BatchConfirms",
			Handler:    _Query_BatchConfirms_Handler,
		},
		{
			MethodName: "TokenToDenom",
			Handler:    _Query_TokenToDenom_Handler,
		},
		{
			MethodName: "DenomToToken",
			Handler:    _Query_DenomToToken_Handler,
		},
		{
			MethodName: "GetOracleByAddr",
			Handler:    _Query_GetOracleByAddr_Handler,
		},
		{
			MethodName: "GetOracleByExternalAddr",
			Handler:    _Query_GetOracleByExternalAddr_Handler,
		},
		{
			MethodName: "GetOracleByBridgerAddr",
			Handler:    _Query_GetOracleByBridgerAddr_Handler,
		},
		{
			MethodName: "BridgeCalls",
			Handler:    _Query_BridgeCalls_Handler,
		},
		{
			MethodName: "BridgeCallConfirmByNonce",
			Handler:    _Query_BridgeCallConfirmByNonce_Handler,
		},
		{
			MethodName: "BridgeCallByNonce",
			Handler:    _Query_BridgeCallByNonce_Handler,
		},
		{
			MethodName: "BridgeCallBySender",
			Handler:    _Query_BridgeCallBySender_Handler,
		},
		{
			MethodName: "LastPendingBridgeCallByAddr",
			Handler:    _Query_LastPendingBridgeCallByAddr_Handler,
		},
		{
			MethodName: "PendingExecuteClaim",
			Handler:    _Query_PendingExecuteClaim_Handler,
		},
		{
			MethodName: "Oracles",
			Handler:    _Query_Oracles_Handler,
		},
		{
			MethodName: "ProjectedBatchTimeoutHeight",
			Handler:    _Query_ProjectedBatchTimeoutHeight_Handler,
		},
		{
			MethodName: "BridgeTokens",
			Handler:    _Query_BridgeTokens_Handler,
		},
		{
			MethodName: "BridgeCoinByDenom",
			Handler:    _Query_BridgeCoinByDenom_Handler,
		},
		{
			MethodName: "BridgeChainList",
			Handler:    _Query_BridgeChainList_Handler,
		},
		{
			MethodName: "BridgeCallQuoteByNonce",
			Handler:    _Query_BridgeCallQuoteByNonce_Handler,
		},
		{
			MethodName: "BridgeCallsByFeeReceiver",
			Handler:    _Query_BridgeCallsByFeeReceiver_Handler,
		},
		{
			MethodName: "BridgeTokensByChain",
			Handler:    _Query_BridgeTokensByChain_Handler,
		},
		{
			MethodName: "BridgeTokensByDenom",
			Handler:    _Query_BridgeTokensByDenom_Handler,
		},
		{
			MethodName: "BridgeTokensByERC20",
			Handler:    _Query_BridgeTokensByERC20_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fx/gravity/crosschain/v1/query.proto",
}
