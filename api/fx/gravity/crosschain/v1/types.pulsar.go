// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package crosschainv1

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_ProposalOracle_1_list)(nil)

type _ProposalOracle_1_list struct {
	list *[]string
}

func (x *_ProposalOracle_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ProposalOracle_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_ProposalOracle_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ProposalOracle_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ProposalOracle_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ProposalOracle at list field Oracles as it is not of Message kind"))
}

func (x *_ProposalOracle_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ProposalOracle_1_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_ProposalOracle_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ProposalOracle         protoreflect.MessageDescriptor
	fd_ProposalOracle_oracles protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_types_proto_init()
	md_ProposalOracle = File_fx_gravity_crosschain_v1_types_proto.Messages().ByName("ProposalOracle")
	fd_ProposalOracle_oracles = md_ProposalOracle.Fields().ByName("oracles")
}

var _ protoreflect.Message = (*fastReflection_ProposalOracle)(nil)

type fastReflection_ProposalOracle ProposalOracle

func (x *ProposalOracle) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ProposalOracle)(x)
}

func (x *ProposalOracle) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ProposalOracle_messageType fastReflection_ProposalOracle_messageType
var _ protoreflect.MessageType = fastReflection_ProposalOracle_messageType{}

type fastReflection_ProposalOracle_messageType struct{}

func (x fastReflection_ProposalOracle_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ProposalOracle)(nil)
}
func (x fastReflection_ProposalOracle_messageType) New() protoreflect.Message {
	return new(fastReflection_ProposalOracle)
}
func (x fastReflection_ProposalOracle_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ProposalOracle
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ProposalOracle) Descriptor() protoreflect.MessageDescriptor {
	return md_ProposalOracle
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ProposalOracle) Type() protoreflect.MessageType {
	return _fastReflection_ProposalOracle_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ProposalOracle) New() protoreflect.Message {
	return new(fastReflection_ProposalOracle)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ProposalOracle) Interface() protoreflect.ProtoMessage {
	return (*ProposalOracle)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ProposalOracle) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Oracles) != 0 {
		value := protoreflect.ValueOfList(&_ProposalOracle_1_list{list: &x.Oracles})
		if !f(fd_ProposalOracle_oracles, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ProposalOracle) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.ProposalOracle.oracles":
		return len(x.Oracles) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ProposalOracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ProposalOracle does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalOracle) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.ProposalOracle.oracles":
		x.Oracles = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ProposalOracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ProposalOracle does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ProposalOracle) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.ProposalOracle.oracles":
		if len(x.Oracles) == 0 {
			return protoreflect.ValueOfList(&_ProposalOracle_1_list{})
		}
		listValue := &_ProposalOracle_1_list{list: &x.Oracles}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ProposalOracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ProposalOracle does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalOracle) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.ProposalOracle.oracles":
		lv := value.List()
		clv := lv.(*_ProposalOracle_1_list)
		x.Oracles = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ProposalOracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ProposalOracle does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalOracle) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.ProposalOracle.oracles":
		if x.Oracles == nil {
			x.Oracles = []string{}
		}
		value := &_ProposalOracle_1_list{list: &x.Oracles}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ProposalOracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ProposalOracle does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ProposalOracle) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.ProposalOracle.oracles":
		list := []string{}
		return protoreflect.ValueOfList(&_ProposalOracle_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ProposalOracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ProposalOracle does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ProposalOracle) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.ProposalOracle", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ProposalOracle) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ProposalOracle) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ProposalOracle) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ProposalOracle) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ProposalOracle)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Oracles) > 0 {
			for _, s := range x.Oracles {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ProposalOracle)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Oracles) > 0 {
			for iNdEx := len(x.Oracles) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Oracles[iNdEx])
				copy(dAtA[i:], x.Oracles[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Oracles[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ProposalOracle)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProposalOracle: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ProposalOracle: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Oracles = append(x.Oracles, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Oracle                    protoreflect.MessageDescriptor
	fd_Oracle_oracle_address     protoreflect.FieldDescriptor
	fd_Oracle_bridger_address    protoreflect.FieldDescriptor
	fd_Oracle_external_address   protoreflect.FieldDescriptor
	fd_Oracle_delegate_amount    protoreflect.FieldDescriptor
	fd_Oracle_start_height       protoreflect.FieldDescriptor
	fd_Oracle_online             protoreflect.FieldDescriptor
	fd_Oracle_delegate_validator protoreflect.FieldDescriptor
	fd_Oracle_slash_times        protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_types_proto_init()
	md_Oracle = File_fx_gravity_crosschain_v1_types_proto.Messages().ByName("Oracle")
	fd_Oracle_oracle_address = md_Oracle.Fields().ByName("oracle_address")
	fd_Oracle_bridger_address = md_Oracle.Fields().ByName("bridger_address")
	fd_Oracle_external_address = md_Oracle.Fields().ByName("external_address")
	fd_Oracle_delegate_amount = md_Oracle.Fields().ByName("delegate_amount")
	fd_Oracle_start_height = md_Oracle.Fields().ByName("start_height")
	fd_Oracle_online = md_Oracle.Fields().ByName("online")
	fd_Oracle_delegate_validator = md_Oracle.Fields().ByName("delegate_validator")
	fd_Oracle_slash_times = md_Oracle.Fields().ByName("slash_times")
}

var _ protoreflect.Message = (*fastReflection_Oracle)(nil)

type fastReflection_Oracle Oracle

func (x *Oracle) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Oracle)(x)
}

func (x *Oracle) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Oracle_messageType fastReflection_Oracle_messageType
var _ protoreflect.MessageType = fastReflection_Oracle_messageType{}

type fastReflection_Oracle_messageType struct{}

func (x fastReflection_Oracle_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Oracle)(nil)
}
func (x fastReflection_Oracle_messageType) New() protoreflect.Message {
	return new(fastReflection_Oracle)
}
func (x fastReflection_Oracle_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Oracle
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Oracle) Descriptor() protoreflect.MessageDescriptor {
	return md_Oracle
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Oracle) Type() protoreflect.MessageType {
	return _fastReflection_Oracle_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Oracle) New() protoreflect.Message {
	return new(fastReflection_Oracle)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Oracle) Interface() protoreflect.ProtoMessage {
	return (*Oracle)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Oracle) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OracleAddress != "" {
		value := protoreflect.ValueOfString(x.OracleAddress)
		if !f(fd_Oracle_oracle_address, value) {
			return
		}
	}
	if x.BridgerAddress != "" {
		value := protoreflect.ValueOfString(x.BridgerAddress)
		if !f(fd_Oracle_bridger_address, value) {
			return
		}
	}
	if x.ExternalAddress != "" {
		value := protoreflect.ValueOfString(x.ExternalAddress)
		if !f(fd_Oracle_external_address, value) {
			return
		}
	}
	if x.DelegateAmount != "" {
		value := protoreflect.ValueOfString(x.DelegateAmount)
		if !f(fd_Oracle_delegate_amount, value) {
			return
		}
	}
	if x.StartHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.StartHeight)
		if !f(fd_Oracle_start_height, value) {
			return
		}
	}
	if x.Online != false {
		value := protoreflect.ValueOfBool(x.Online)
		if !f(fd_Oracle_online, value) {
			return
		}
	}
	if x.DelegateValidator != "" {
		value := protoreflect.ValueOfString(x.DelegateValidator)
		if !f(fd_Oracle_delegate_validator, value) {
			return
		}
	}
	if x.SlashTimes != int64(0) {
		value := protoreflect.ValueOfInt64(x.SlashTimes)
		if !f(fd_Oracle_slash_times, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Oracle) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Oracle.oracle_address":
		return x.OracleAddress != ""
	case "fx.gravity.crosschain.v1.Oracle.bridger_address":
		return x.BridgerAddress != ""
	case "fx.gravity.crosschain.v1.Oracle.external_address":
		return x.ExternalAddress != ""
	case "fx.gravity.crosschain.v1.Oracle.delegate_amount":
		return x.DelegateAmount != ""
	case "fx.gravity.crosschain.v1.Oracle.start_height":
		return x.StartHeight != int64(0)
	case "fx.gravity.crosschain.v1.Oracle.online":
		return x.Online != false
	case "fx.gravity.crosschain.v1.Oracle.delegate_validator":
		return x.DelegateValidator != ""
	case "fx.gravity.crosschain.v1.Oracle.slash_times":
		return x.SlashTimes != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Oracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Oracle does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Oracle) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Oracle.oracle_address":
		x.OracleAddress = ""
	case "fx.gravity.crosschain.v1.Oracle.bridger_address":
		x.BridgerAddress = ""
	case "fx.gravity.crosschain.v1.Oracle.external_address":
		x.ExternalAddress = ""
	case "fx.gravity.crosschain.v1.Oracle.delegate_amount":
		x.DelegateAmount = ""
	case "fx.gravity.crosschain.v1.Oracle.start_height":
		x.StartHeight = int64(0)
	case "fx.gravity.crosschain.v1.Oracle.online":
		x.Online = false
	case "fx.gravity.crosschain.v1.Oracle.delegate_validator":
		x.DelegateValidator = ""
	case "fx.gravity.crosschain.v1.Oracle.slash_times":
		x.SlashTimes = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Oracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Oracle does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Oracle) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.Oracle.oracle_address":
		value := x.OracleAddress
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.Oracle.bridger_address":
		value := x.BridgerAddress
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.Oracle.external_address":
		value := x.ExternalAddress
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.Oracle.delegate_amount":
		value := x.DelegateAmount
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.Oracle.start_height":
		value := x.StartHeight
		return protoreflect.ValueOfInt64(value)
	case "fx.gravity.crosschain.v1.Oracle.online":
		value := x.Online
		return protoreflect.ValueOfBool(value)
	case "fx.gravity.crosschain.v1.Oracle.delegate_validator":
		value := x.DelegateValidator
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.Oracle.slash_times":
		value := x.SlashTimes
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Oracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Oracle does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Oracle) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Oracle.oracle_address":
		x.OracleAddress = value.Interface().(string)
	case "fx.gravity.crosschain.v1.Oracle.bridger_address":
		x.BridgerAddress = value.Interface().(string)
	case "fx.gravity.crosschain.v1.Oracle.external_address":
		x.ExternalAddress = value.Interface().(string)
	case "fx.gravity.crosschain.v1.Oracle.delegate_amount":
		x.DelegateAmount = value.Interface().(string)
	case "fx.gravity.crosschain.v1.Oracle.start_height":
		x.StartHeight = value.Int()
	case "fx.gravity.crosschain.v1.Oracle.online":
		x.Online = value.Bool()
	case "fx.gravity.crosschain.v1.Oracle.delegate_validator":
		x.DelegateValidator = value.Interface().(string)
	case "fx.gravity.crosschain.v1.Oracle.slash_times":
		x.SlashTimes = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Oracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Oracle does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Oracle) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Oracle.oracle_address":
		panic(fmt.Errorf("field oracle_address of message fx.gravity.crosschain.v1.Oracle is not mutable"))
	case "fx.gravity.crosschain.v1.Oracle.bridger_address":
		panic(fmt.Errorf("field bridger_address of message fx.gravity.crosschain.v1.Oracle is not mutable"))
	case "fx.gravity.crosschain.v1.Oracle.external_address":
		panic(fmt.Errorf("field external_address of message fx.gravity.crosschain.v1.Oracle is not mutable"))
	case "fx.gravity.crosschain.v1.Oracle.delegate_amount":
		panic(fmt.Errorf("field delegate_amount of message fx.gravity.crosschain.v1.Oracle is not mutable"))
	case "fx.gravity.crosschain.v1.Oracle.start_height":
		panic(fmt.Errorf("field start_height of message fx.gravity.crosschain.v1.Oracle is not mutable"))
	case "fx.gravity.crosschain.v1.Oracle.online":
		panic(fmt.Errorf("field online of message fx.gravity.crosschain.v1.Oracle is not mutable"))
	case "fx.gravity.crosschain.v1.Oracle.delegate_validator":
		panic(fmt.Errorf("field delegate_validator of message fx.gravity.crosschain.v1.Oracle is not mutable"))
	case "fx.gravity.crosschain.v1.Oracle.slash_times":
		panic(fmt.Errorf("field slash_times of message fx.gravity.crosschain.v1.Oracle is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Oracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Oracle does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Oracle) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Oracle.oracle_address":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.Oracle.bridger_address":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.Oracle.external_address":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.Oracle.delegate_amount":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.Oracle.start_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "fx.gravity.crosschain.v1.Oracle.online":
		return protoreflect.ValueOfBool(false)
	case "fx.gravity.crosschain.v1.Oracle.delegate_validator":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.Oracle.slash_times":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Oracle"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Oracle does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Oracle) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.Oracle", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Oracle) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Oracle) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Oracle) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Oracle) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Oracle)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.OracleAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BridgerAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExternalAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DelegateAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.StartHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.StartHeight))
		}
		if x.Online {
			n += 2
		}
		l = len(x.DelegateValidator)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SlashTimes != 0 {
			n += 1 + runtime.Sov(uint64(x.SlashTimes))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Oracle)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.SlashTimes != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SlashTimes))
			i--
			dAtA[i] = 0x40
		}
		if len(x.DelegateValidator) > 0 {
			i -= len(x.DelegateValidator)
			copy(dAtA[i:], x.DelegateValidator)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DelegateValidator)))
			i--
			dAtA[i] = 0x3a
		}
		if x.Online {
			i--
			if x.Online {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x30
		}
		if x.StartHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StartHeight))
			i--
			dAtA[i] = 0x28
		}
		if len(x.DelegateAmount) > 0 {
			i -= len(x.DelegateAmount)
			copy(dAtA[i:], x.DelegateAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DelegateAmount)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.ExternalAddress) > 0 {
			i -= len(x.ExternalAddress)
			copy(dAtA[i:], x.ExternalAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExternalAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.BridgerAddress) > 0 {
			i -= len(x.BridgerAddress)
			copy(dAtA[i:], x.BridgerAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BridgerAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.OracleAddress) > 0 {
			i -= len(x.OracleAddress)
			copy(dAtA[i:], x.OracleAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OracleAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Oracle)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Oracle: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Oracle: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OracleAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BridgerAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExternalAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExternalAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegateAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DelegateAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
				}
				x.StartHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StartHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Online = bool(v != 0)
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegateValidator", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DelegateValidator = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashTimes", wireType)
				}
				x.SlashTimes = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SlashTimes |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BridgeValidator                  protoreflect.MessageDescriptor
	fd_BridgeValidator_power            protoreflect.FieldDescriptor
	fd_BridgeValidator_external_address protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_types_proto_init()
	md_BridgeValidator = File_fx_gravity_crosschain_v1_types_proto.Messages().ByName("BridgeValidator")
	fd_BridgeValidator_power = md_BridgeValidator.Fields().ByName("power")
	fd_BridgeValidator_external_address = md_BridgeValidator.Fields().ByName("external_address")
}

var _ protoreflect.Message = (*fastReflection_BridgeValidator)(nil)

type fastReflection_BridgeValidator BridgeValidator

func (x *BridgeValidator) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BridgeValidator)(x)
}

func (x *BridgeValidator) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BridgeValidator_messageType fastReflection_BridgeValidator_messageType
var _ protoreflect.MessageType = fastReflection_BridgeValidator_messageType{}

type fastReflection_BridgeValidator_messageType struct{}

func (x fastReflection_BridgeValidator_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BridgeValidator)(nil)
}
func (x fastReflection_BridgeValidator_messageType) New() protoreflect.Message {
	return new(fastReflection_BridgeValidator)
}
func (x fastReflection_BridgeValidator_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BridgeValidator
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BridgeValidator) Descriptor() protoreflect.MessageDescriptor {
	return md_BridgeValidator
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BridgeValidator) Type() protoreflect.MessageType {
	return _fastReflection_BridgeValidator_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BridgeValidator) New() protoreflect.Message {
	return new(fastReflection_BridgeValidator)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BridgeValidator) Interface() protoreflect.ProtoMessage {
	return (*BridgeValidator)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BridgeValidator) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Power != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Power)
		if !f(fd_BridgeValidator_power, value) {
			return
		}
	}
	if x.ExternalAddress != "" {
		value := protoreflect.ValueOfString(x.ExternalAddress)
		if !f(fd_BridgeValidator_external_address, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BridgeValidator) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.BridgeValidator.power":
		return x.Power != uint64(0)
	case "fx.gravity.crosschain.v1.BridgeValidator.external_address":
		return x.ExternalAddress != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.BridgeValidator"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.BridgeValidator does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BridgeValidator) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.BridgeValidator.power":
		x.Power = uint64(0)
	case "fx.gravity.crosschain.v1.BridgeValidator.external_address":
		x.ExternalAddress = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.BridgeValidator"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.BridgeValidator does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BridgeValidator) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.BridgeValidator.power":
		value := x.Power
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.BridgeValidator.external_address":
		value := x.ExternalAddress
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.BridgeValidator"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.BridgeValidator does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BridgeValidator) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.BridgeValidator.power":
		x.Power = value.Uint()
	case "fx.gravity.crosschain.v1.BridgeValidator.external_address":
		x.ExternalAddress = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.BridgeValidator"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.BridgeValidator does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BridgeValidator) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.BridgeValidator.power":
		panic(fmt.Errorf("field power of message fx.gravity.crosschain.v1.BridgeValidator is not mutable"))
	case "fx.gravity.crosschain.v1.BridgeValidator.external_address":
		panic(fmt.Errorf("field external_address of message fx.gravity.crosschain.v1.BridgeValidator is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.BridgeValidator"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.BridgeValidator does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BridgeValidator) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.BridgeValidator.power":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.BridgeValidator.external_address":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.BridgeValidator"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.BridgeValidator does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BridgeValidator) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.BridgeValidator", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BridgeValidator) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BridgeValidator) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BridgeValidator) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BridgeValidator) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BridgeValidator)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Power != 0 {
			n += 1 + runtime.Sov(uint64(x.Power))
		}
		l = len(x.ExternalAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BridgeValidator)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ExternalAddress) > 0 {
			i -= len(x.ExternalAddress)
			copy(dAtA[i:], x.ExternalAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExternalAddress)))
			i--
			dAtA[i] = 0x12
		}
		if x.Power != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Power))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BridgeValidator)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BridgeValidator: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BridgeValidator: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
				}
				x.Power = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Power |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExternalAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExternalAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_OracleSet_2_list)(nil)

type _OracleSet_2_list struct {
	list *[]*BridgeValidator
}

func (x *_OracleSet_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_OracleSet_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_OracleSet_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BridgeValidator)
	(*x.list)[i] = concreteValue
}

func (x *_OracleSet_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BridgeValidator)
	*x.list = append(*x.list, concreteValue)
}

func (x *_OracleSet_2_list) AppendMutable() protoreflect.Value {
	v := new(BridgeValidator)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OracleSet_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_OracleSet_2_list) NewElement() protoreflect.Value {
	v := new(BridgeValidator)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OracleSet_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_OracleSet         protoreflect.MessageDescriptor
	fd_OracleSet_nonce   protoreflect.FieldDescriptor
	fd_OracleSet_members protoreflect.FieldDescriptor
	fd_OracleSet_height  protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_types_proto_init()
	md_OracleSet = File_fx_gravity_crosschain_v1_types_proto.Messages().ByName("OracleSet")
	fd_OracleSet_nonce = md_OracleSet.Fields().ByName("nonce")
	fd_OracleSet_members = md_OracleSet.Fields().ByName("members")
	fd_OracleSet_height = md_OracleSet.Fields().ByName("height")
}

var _ protoreflect.Message = (*fastReflection_OracleSet)(nil)

type fastReflection_OracleSet OracleSet

func (x *OracleSet) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OracleSet)(x)
}

func (x *OracleSet) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OracleSet_messageType fastReflection_OracleSet_messageType
var _ protoreflect.MessageType = fastReflection_OracleSet_messageType{}

type fastReflection_OracleSet_messageType struct{}

func (x fastReflection_OracleSet_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OracleSet)(nil)
}
func (x fastReflection_OracleSet_messageType) New() protoreflect.Message {
	return new(fastReflection_OracleSet)
}
func (x fastReflection_OracleSet_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OracleSet
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OracleSet) Descriptor() protoreflect.MessageDescriptor {
	return md_OracleSet
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OracleSet) Type() protoreflect.MessageType {
	return _fastReflection_OracleSet_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OracleSet) New() protoreflect.Message {
	return new(fastReflection_OracleSet)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OracleSet) Interface() protoreflect.ProtoMessage {
	return (*OracleSet)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OracleSet) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Nonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Nonce)
		if !f(fd_OracleSet_nonce, value) {
			return
		}
	}
	if len(x.Members) != 0 {
		value := protoreflect.ValueOfList(&_OracleSet_2_list{list: &x.Members})
		if !f(fd_OracleSet_members, value) {
			return
		}
	}
	if x.Height != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Height)
		if !f(fd_OracleSet_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OracleSet) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OracleSet.nonce":
		return x.Nonce != uint64(0)
	case "fx.gravity.crosschain.v1.OracleSet.members":
		return len(x.Members) != 0
	case "fx.gravity.crosschain.v1.OracleSet.height":
		return x.Height != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OracleSet"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OracleSet does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleSet) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OracleSet.nonce":
		x.Nonce = uint64(0)
	case "fx.gravity.crosschain.v1.OracleSet.members":
		x.Members = nil
	case "fx.gravity.crosschain.v1.OracleSet.height":
		x.Height = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OracleSet"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OracleSet does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OracleSet) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.OracleSet.nonce":
		value := x.Nonce
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.OracleSet.members":
		if len(x.Members) == 0 {
			return protoreflect.ValueOfList(&_OracleSet_2_list{})
		}
		listValue := &_OracleSet_2_list{list: &x.Members}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.OracleSet.height":
		value := x.Height
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OracleSet"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OracleSet does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleSet) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OracleSet.nonce":
		x.Nonce = value.Uint()
	case "fx.gravity.crosschain.v1.OracleSet.members":
		lv := value.List()
		clv := lv.(*_OracleSet_2_list)
		x.Members = *clv.list
	case "fx.gravity.crosschain.v1.OracleSet.height":
		x.Height = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OracleSet"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OracleSet does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleSet) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OracleSet.members":
		if x.Members == nil {
			x.Members = []*BridgeValidator{}
		}
		value := &_OracleSet_2_list{list: &x.Members}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.OracleSet.nonce":
		panic(fmt.Errorf("field nonce of message fx.gravity.crosschain.v1.OracleSet is not mutable"))
	case "fx.gravity.crosschain.v1.OracleSet.height":
		panic(fmt.Errorf("field height of message fx.gravity.crosschain.v1.OracleSet is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OracleSet"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OracleSet does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OracleSet) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OracleSet.nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.OracleSet.members":
		list := []*BridgeValidator{}
		return protoreflect.ValueOfList(&_OracleSet_2_list{list: &list})
	case "fx.gravity.crosschain.v1.OracleSet.height":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OracleSet"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OracleSet does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OracleSet) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.OracleSet", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OracleSet) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OracleSet) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OracleSet) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OracleSet) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OracleSet)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		if len(x.Members) > 0 {
			for _, e := range x.Members {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OracleSet)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Members) > 0 {
			for iNdEx := len(x.Members) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Members[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OracleSet)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OracleSet: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OracleSet: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Members = append(x.Members, &BridgeValidator{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Members[len(x.Members)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_LastObservedBlockHeight                       protoreflect.MessageDescriptor
	fd_LastObservedBlockHeight_external_block_height protoreflect.FieldDescriptor
	fd_LastObservedBlockHeight_block_height          protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_types_proto_init()
	md_LastObservedBlockHeight = File_fx_gravity_crosschain_v1_types_proto.Messages().ByName("LastObservedBlockHeight")
	fd_LastObservedBlockHeight_external_block_height = md_LastObservedBlockHeight.Fields().ByName("external_block_height")
	fd_LastObservedBlockHeight_block_height = md_LastObservedBlockHeight.Fields().ByName("block_height")
}

var _ protoreflect.Message = (*fastReflection_LastObservedBlockHeight)(nil)

type fastReflection_LastObservedBlockHeight LastObservedBlockHeight

func (x *LastObservedBlockHeight) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LastObservedBlockHeight)(x)
}

func (x *LastObservedBlockHeight) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LastObservedBlockHeight_messageType fastReflection_LastObservedBlockHeight_messageType
var _ protoreflect.MessageType = fastReflection_LastObservedBlockHeight_messageType{}

type fastReflection_LastObservedBlockHeight_messageType struct{}

func (x fastReflection_LastObservedBlockHeight_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LastObservedBlockHeight)(nil)
}
func (x fastReflection_LastObservedBlockHeight_messageType) New() protoreflect.Message {
	return new(fastReflection_LastObservedBlockHeight)
}
func (x fastReflection_LastObservedBlockHeight_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LastObservedBlockHeight
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LastObservedBlockHeight) Descriptor() protoreflect.MessageDescriptor {
	return md_LastObservedBlockHeight
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LastObservedBlockHeight) Type() protoreflect.MessageType {
	return _fastReflection_LastObservedBlockHeight_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LastObservedBlockHeight) New() protoreflect.Message {
	return new(fastReflection_LastObservedBlockHeight)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LastObservedBlockHeight) Interface() protoreflect.ProtoMessage {
	return (*LastObservedBlockHeight)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LastObservedBlockHeight) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ExternalBlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ExternalBlockHeight)
		if !f(fd_LastObservedBlockHeight_external_block_height, value) {
			return
		}
	}
	if x.BlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockHeight)
		if !f(fd_LastObservedBlockHeight_block_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LastObservedBlockHeight) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.external_block_height":
		return x.ExternalBlockHeight != uint64(0)
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.block_height":
		return x.BlockHeight != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.LastObservedBlockHeight"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.LastObservedBlockHeight does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastObservedBlockHeight) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.external_block_height":
		x.ExternalBlockHeight = uint64(0)
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.block_height":
		x.BlockHeight = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.LastObservedBlockHeight"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.LastObservedBlockHeight does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LastObservedBlockHeight) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.external_block_height":
		value := x.ExternalBlockHeight
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.LastObservedBlockHeight"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.LastObservedBlockHeight does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastObservedBlockHeight) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.external_block_height":
		x.ExternalBlockHeight = value.Uint()
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.block_height":
		x.BlockHeight = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.LastObservedBlockHeight"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.LastObservedBlockHeight does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastObservedBlockHeight) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.external_block_height":
		panic(fmt.Errorf("field external_block_height of message fx.gravity.crosschain.v1.LastObservedBlockHeight is not mutable"))
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.block_height":
		panic(fmt.Errorf("field block_height of message fx.gravity.crosschain.v1.LastObservedBlockHeight is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.LastObservedBlockHeight"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.LastObservedBlockHeight does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LastObservedBlockHeight) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.external_block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.LastObservedBlockHeight.block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.LastObservedBlockHeight"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.LastObservedBlockHeight does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LastObservedBlockHeight) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.LastObservedBlockHeight", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LastObservedBlockHeight) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LastObservedBlockHeight) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LastObservedBlockHeight) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LastObservedBlockHeight) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LastObservedBlockHeight)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ExternalBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.ExternalBlockHeight))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LastObservedBlockHeight)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x10
		}
		if x.ExternalBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExternalBlockHeight))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LastObservedBlockHeight)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LastObservedBlockHeight: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LastObservedBlockHeight: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExternalBlockHeight", wireType)
				}
				x.ExternalBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExternalBlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Attestation_2_list)(nil)

type _Attestation_2_list struct {
	list *[]string
}

func (x *_Attestation_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Attestation_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Attestation_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Attestation_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Attestation_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Attestation at list field Votes as it is not of Message kind"))
}

func (x *_Attestation_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Attestation_2_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Attestation_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Attestation          protoreflect.MessageDescriptor
	fd_Attestation_observed protoreflect.FieldDescriptor
	fd_Attestation_votes    protoreflect.FieldDescriptor
	fd_Attestation_height   protoreflect.FieldDescriptor
	fd_Attestation_claim    protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_types_proto_init()
	md_Attestation = File_fx_gravity_crosschain_v1_types_proto.Messages().ByName("Attestation")
	fd_Attestation_observed = md_Attestation.Fields().ByName("observed")
	fd_Attestation_votes = md_Attestation.Fields().ByName("votes")
	fd_Attestation_height = md_Attestation.Fields().ByName("height")
	fd_Attestation_claim = md_Attestation.Fields().ByName("claim")
}

var _ protoreflect.Message = (*fastReflection_Attestation)(nil)

type fastReflection_Attestation Attestation

func (x *Attestation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Attestation)(x)
}

func (x *Attestation) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Attestation_messageType fastReflection_Attestation_messageType
var _ protoreflect.MessageType = fastReflection_Attestation_messageType{}

type fastReflection_Attestation_messageType struct{}

func (x fastReflection_Attestation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Attestation)(nil)
}
func (x fastReflection_Attestation_messageType) New() protoreflect.Message {
	return new(fastReflection_Attestation)
}
func (x fastReflection_Attestation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Attestation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Attestation) Descriptor() protoreflect.MessageDescriptor {
	return md_Attestation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Attestation) Type() protoreflect.MessageType {
	return _fastReflection_Attestation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Attestation) New() protoreflect.Message {
	return new(fastReflection_Attestation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Attestation) Interface() protoreflect.ProtoMessage {
	return (*Attestation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Attestation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Observed != false {
		value := protoreflect.ValueOfBool(x.Observed)
		if !f(fd_Attestation_observed, value) {
			return
		}
	}
	if len(x.Votes) != 0 {
		value := protoreflect.ValueOfList(&_Attestation_2_list{list: &x.Votes})
		if !f(fd_Attestation_votes, value) {
			return
		}
	}
	if x.Height != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Height)
		if !f(fd_Attestation_height, value) {
			return
		}
	}
	if x.Claim != nil {
		value := protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
		if !f(fd_Attestation_claim, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Attestation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Attestation.observed":
		return x.Observed != false
	case "fx.gravity.crosschain.v1.Attestation.votes":
		return len(x.Votes) != 0
	case "fx.gravity.crosschain.v1.Attestation.height":
		return x.Height != uint64(0)
	case "fx.gravity.crosschain.v1.Attestation.claim":
		return x.Claim != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Attestation"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Attestation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Attestation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Attestation.observed":
		x.Observed = false
	case "fx.gravity.crosschain.v1.Attestation.votes":
		x.Votes = nil
	case "fx.gravity.crosschain.v1.Attestation.height":
		x.Height = uint64(0)
	case "fx.gravity.crosschain.v1.Attestation.claim":
		x.Claim = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Attestation"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Attestation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Attestation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.Attestation.observed":
		value := x.Observed
		return protoreflect.ValueOfBool(value)
	case "fx.gravity.crosschain.v1.Attestation.votes":
		if len(x.Votes) == 0 {
			return protoreflect.ValueOfList(&_Attestation_2_list{})
		}
		listValue := &_Attestation_2_list{list: &x.Votes}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.Attestation.height":
		value := x.Height
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.Attestation.claim":
		value := x.Claim
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Attestation"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Attestation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Attestation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Attestation.observed":
		x.Observed = value.Bool()
	case "fx.gravity.crosschain.v1.Attestation.votes":
		lv := value.List()
		clv := lv.(*_Attestation_2_list)
		x.Votes = *clv.list
	case "fx.gravity.crosschain.v1.Attestation.height":
		x.Height = value.Uint()
	case "fx.gravity.crosschain.v1.Attestation.claim":
		x.Claim = value.Message().Interface().(*anypb.Any)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Attestation"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Attestation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Attestation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Attestation.votes":
		if x.Votes == nil {
			x.Votes = []string{}
		}
		value := &_Attestation_2_list{list: &x.Votes}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.Attestation.claim":
		if x.Claim == nil {
			x.Claim = new(anypb.Any)
		}
		return protoreflect.ValueOfMessage(x.Claim.ProtoReflect())
	case "fx.gravity.crosschain.v1.Attestation.observed":
		panic(fmt.Errorf("field observed of message fx.gravity.crosschain.v1.Attestation is not mutable"))
	case "fx.gravity.crosschain.v1.Attestation.height":
		panic(fmt.Errorf("field height of message fx.gravity.crosschain.v1.Attestation is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Attestation"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Attestation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Attestation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Attestation.observed":
		return protoreflect.ValueOfBool(false)
	case "fx.gravity.crosschain.v1.Attestation.votes":
		list := []string{}
		return protoreflect.ValueOfList(&_Attestation_2_list{list: &list})
	case "fx.gravity.crosschain.v1.Attestation.height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.Attestation.claim":
		m := new(anypb.Any)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Attestation"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Attestation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Attestation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.Attestation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Attestation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Attestation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Attestation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Attestation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Attestation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Observed {
			n += 2
		}
		if len(x.Votes) > 0 {
			for _, s := range x.Votes {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Height != 0 {
			n += 1 + runtime.Sov(uint64(x.Height))
		}
		if x.Claim != nil {
			l = options.Size(x.Claim)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Attestation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Claim != nil {
			encoded, err := options.Marshal(x.Claim)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.Height != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Height))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Votes) > 0 {
			for iNdEx := len(x.Votes) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Votes[iNdEx])
				copy(dAtA[i:], x.Votes[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Votes[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Observed {
			i--
			if x.Observed {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Attestation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Attestation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Attestation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Observed", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Observed = bool(v != 0)
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Votes = append(x.Votes, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
				}
				x.Height = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Height |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Claim", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Claim == nil {
					x.Claim = &anypb.Any{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Claim); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_OutgoingTxBatch_3_list)(nil)

type _OutgoingTxBatch_3_list struct {
	list *[]*OutgoingTransferTx
}

func (x *_OutgoingTxBatch_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_OutgoingTxBatch_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_OutgoingTxBatch_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingTransferTx)
	(*x.list)[i] = concreteValue
}

func (x *_OutgoingTxBatch_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingTransferTx)
	*x.list = append(*x.list, concreteValue)
}

func (x *_OutgoingTxBatch_3_list) AppendMutable() protoreflect.Value {
	v := new(OutgoingTransferTx)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OutgoingTxBatch_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_OutgoingTxBatch_3_list) NewElement() protoreflect.Value {
	v := new(OutgoingTransferTx)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OutgoingTxBatch_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_OutgoingTxBatch                protoreflect.MessageDescriptor
	fd_OutgoingTxBatch_batch_nonce    protoreflect.FieldDescriptor
	fd_OutgoingTxBatch_batch_timeout  protoreflect.FieldDescriptor
	fd_OutgoingTxBatch_transactions   protoreflect.FieldDescriptor
	fd_OutgoingTxBatch_token_contract protoreflect.FieldDescriptor
	fd_OutgoingTxBatch_block          protoreflect.FieldDescriptor
	fd_OutgoingTxBatch_fee_receive    protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_types_proto_init()
	md_OutgoingTxBatch = File_fx_gravity_crosschain_v1_types_proto.Messages().ByName("OutgoingTxBatch")
	fd_OutgoingTxBatch_batch_nonce = md_OutgoingTxBatch.Fields().ByName("batch_nonce")
	fd_OutgoingTxBatch_batch_timeout = md_OutgoingTxBatch.Fields().ByName("batch_timeout")
	fd_OutgoingTxBatch_transactions = md_OutgoingTxBatch.Fields().ByName("transactions")
	fd_OutgoingTxBatch_token_contract = md_OutgoingTxBatch.Fields().ByName("token_contract")
	fd_OutgoingTxBatch_block = md_OutgoingTxBatch.Fields().ByName("block")
	fd_OutgoingTxBatch_fee_receive = md_OutgoingTxBatch.Fields().ByName("fee_receive")
}

var _ protoreflect.Message = (*fastReflection_OutgoingTxBatch)(nil)

type fastReflection_OutgoingTxBatch OutgoingTxBatch

func (x *OutgoingTxBatch) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OutgoingTxBatch)(x)
}

func (x *OutgoingTxBatch) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OutgoingTxBatch_messageType fastReflection_OutgoingTxBatch_messageType
var _ protoreflect.MessageType = fastReflection_OutgoingTxBatch_messageType{}

type fastReflection_OutgoingTxBatch_messageType struct{}

func (x fastReflection_OutgoingTxBatch_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OutgoingTxBatch)(nil)
}
func (x fastReflection_OutgoingTxBatch_messageType) New() protoreflect.Message {
	return new(fastReflection_OutgoingTxBatch)
}
func (x fastReflection_OutgoingTxBatch_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OutgoingTxBatch
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OutgoingTxBatch) Descriptor() protoreflect.MessageDescriptor {
	return md_OutgoingTxBatch
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OutgoingTxBatch) Type() protoreflect.MessageType {
	return _fastReflection_OutgoingTxBatch_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OutgoingTxBatch) New() protoreflect.Message {
	return new(fastReflection_OutgoingTxBatch)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OutgoingTxBatch) Interface() protoreflect.ProtoMessage {
	return (*OutgoingTxBatch)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OutgoingTxBatch) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BatchNonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BatchNonce)
		if !f(fd_OutgoingTxBatch_batch_nonce, value) {
			return
		}
	}
	if x.BatchTimeout != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BatchTimeout)
		if !f(fd_OutgoingTxBatch_batch_timeout, value) {
			return
		}
	}
	if len(x.Transactions) != 0 {
		value := protoreflect.ValueOfList(&_OutgoingTxBatch_3_list{list: &x.Transactions})
		if !f(fd_OutgoingTxBatch_transactions, value) {
			return
		}
	}
	if x.TokenContract != "" {
		value := protoreflect.ValueOfString(x.TokenContract)
		if !f(fd_OutgoingTxBatch_token_contract, value) {
			return
		}
	}
	if x.Block != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Block)
		if !f(fd_OutgoingTxBatch_block, value) {
			return
		}
	}
	if x.FeeReceive != "" {
		value := protoreflect.ValueOfString(x.FeeReceive)
		if !f(fd_OutgoingTxBatch_fee_receive, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OutgoingTxBatch) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_nonce":
		return x.BatchNonce != uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_timeout":
		return x.BatchTimeout != uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.transactions":
		return len(x.Transactions) != 0
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.token_contract":
		return x.TokenContract != ""
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.block":
		return x.Block != uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.fee_receive":
		return x.FeeReceive != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTxBatch"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTxBatch does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingTxBatch) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_nonce":
		x.BatchNonce = uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_timeout":
		x.BatchTimeout = uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.transactions":
		x.Transactions = nil
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.token_contract":
		x.TokenContract = ""
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.block":
		x.Block = uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.fee_receive":
		x.FeeReceive = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTxBatch"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTxBatch does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OutgoingTxBatch) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_nonce":
		value := x.BatchNonce
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_timeout":
		value := x.BatchTimeout
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.transactions":
		if len(x.Transactions) == 0 {
			return protoreflect.ValueOfList(&_OutgoingTxBatch_3_list{})
		}
		listValue := &_OutgoingTxBatch_3_list{list: &x.Transactions}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.token_contract":
		value := x.TokenContract
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.block":
		value := x.Block
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.fee_receive":
		value := x.FeeReceive
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTxBatch"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTxBatch does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingTxBatch) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_nonce":
		x.BatchNonce = value.Uint()
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_timeout":
		x.BatchTimeout = value.Uint()
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.transactions":
		lv := value.List()
		clv := lv.(*_OutgoingTxBatch_3_list)
		x.Transactions = *clv.list
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.token_contract":
		x.TokenContract = value.Interface().(string)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.block":
		x.Block = value.Uint()
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.fee_receive":
		x.FeeReceive = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTxBatch"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTxBatch does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingTxBatch) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.transactions":
		if x.Transactions == nil {
			x.Transactions = []*OutgoingTransferTx{}
		}
		value := &_OutgoingTxBatch_3_list{list: &x.Transactions}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_nonce":
		panic(fmt.Errorf("field batch_nonce of message fx.gravity.crosschain.v1.OutgoingTxBatch is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_timeout":
		panic(fmt.Errorf("field batch_timeout of message fx.gravity.crosschain.v1.OutgoingTxBatch is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.token_contract":
		panic(fmt.Errorf("field token_contract of message fx.gravity.crosschain.v1.OutgoingTxBatch is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.block":
		panic(fmt.Errorf("field block of message fx.gravity.crosschain.v1.OutgoingTxBatch is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.fee_receive":
		panic(fmt.Errorf("field fee_receive of message fx.gravity.crosschain.v1.OutgoingTxBatch is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTxBatch"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTxBatch does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OutgoingTxBatch) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.batch_timeout":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.transactions":
		list := []*OutgoingTransferTx{}
		return protoreflect.ValueOfList(&_OutgoingTxBatch_3_list{list: &list})
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.token_contract":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.OutgoingTxBatch.fee_receive":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTxBatch"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTxBatch does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OutgoingTxBatch) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.OutgoingTxBatch", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OutgoingTxBatch) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingTxBatch) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OutgoingTxBatch) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OutgoingTxBatch) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OutgoingTxBatch)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BatchNonce != 0 {
			n += 1 + runtime.Sov(uint64(x.BatchNonce))
		}
		if x.BatchTimeout != 0 {
			n += 1 + runtime.Sov(uint64(x.BatchTimeout))
		}
		if len(x.Transactions) > 0 {
			for _, e := range x.Transactions {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.TokenContract)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Block != 0 {
			n += 1 + runtime.Sov(uint64(x.Block))
		}
		l = len(x.FeeReceive)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OutgoingTxBatch)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.FeeReceive) > 0 {
			i -= len(x.FeeReceive)
			copy(dAtA[i:], x.FeeReceive)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeeReceive)))
			i--
			dAtA[i] = 0x32
		}
		if x.Block != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Block))
			i--
			dAtA[i] = 0x28
		}
		if len(x.TokenContract) > 0 {
			i -= len(x.TokenContract)
			copy(dAtA[i:], x.TokenContract)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TokenContract)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Transactions) > 0 {
			for iNdEx := len(x.Transactions) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Transactions[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.BatchTimeout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BatchTimeout))
			i--
			dAtA[i] = 0x10
		}
		if x.BatchNonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BatchNonce))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OutgoingTxBatch)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OutgoingTxBatch: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OutgoingTxBatch: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
				}
				x.BatchNonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BatchNonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BatchTimeout", wireType)
				}
				x.BatchTimeout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BatchTimeout |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Transactions = append(x.Transactions, &OutgoingTransferTx{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Transactions[len(x.Transactions)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenContract = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
				}
				x.Block = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Block |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeReceive", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeReceive = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_OutgoingTransferTx              protoreflect.MessageDescriptor
	fd_OutgoingTransferTx_id           protoreflect.FieldDescriptor
	fd_OutgoingTransferTx_sender       protoreflect.FieldDescriptor
	fd_OutgoingTransferTx_dest_address protoreflect.FieldDescriptor
	fd_OutgoingTransferTx_token        protoreflect.FieldDescriptor
	fd_OutgoingTransferTx_fee          protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_types_proto_init()
	md_OutgoingTransferTx = File_fx_gravity_crosschain_v1_types_proto.Messages().ByName("OutgoingTransferTx")
	fd_OutgoingTransferTx_id = md_OutgoingTransferTx.Fields().ByName("id")
	fd_OutgoingTransferTx_sender = md_OutgoingTransferTx.Fields().ByName("sender")
	fd_OutgoingTransferTx_dest_address = md_OutgoingTransferTx.Fields().ByName("dest_address")
	fd_OutgoingTransferTx_token = md_OutgoingTransferTx.Fields().ByName("token")
	fd_OutgoingTransferTx_fee = md_OutgoingTransferTx.Fields().ByName("fee")
}

var _ protoreflect.Message = (*fastReflection_OutgoingTransferTx)(nil)

type fastReflection_OutgoingTransferTx OutgoingTransferTx

func (x *OutgoingTransferTx) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OutgoingTransferTx)(x)
}

func (x *OutgoingTransferTx) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OutgoingTransferTx_messageType fastReflection_OutgoingTransferTx_messageType
var _ protoreflect.MessageType = fastReflection_OutgoingTransferTx_messageType{}

type fastReflection_OutgoingTransferTx_messageType struct{}

func (x fastReflection_OutgoingTransferTx_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OutgoingTransferTx)(nil)
}
func (x fastReflection_OutgoingTransferTx_messageType) New() protoreflect.Message {
	return new(fastReflection_OutgoingTransferTx)
}
func (x fastReflection_OutgoingTransferTx_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OutgoingTransferTx
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OutgoingTransferTx) Descriptor() protoreflect.MessageDescriptor {
	return md_OutgoingTransferTx
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OutgoingTransferTx) Type() protoreflect.MessageType {
	return _fastReflection_OutgoingTransferTx_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OutgoingTransferTx) New() protoreflect.Message {
	return new(fastReflection_OutgoingTransferTx)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OutgoingTransferTx) Interface() protoreflect.ProtoMessage {
	return (*OutgoingTransferTx)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OutgoingTransferTx) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_OutgoingTransferTx_id, value) {
			return
		}
	}
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_OutgoingTransferTx_sender, value) {
			return
		}
	}
	if x.DestAddress != "" {
		value := protoreflect.ValueOfString(x.DestAddress)
		if !f(fd_OutgoingTransferTx_dest_address, value) {
			return
		}
	}
	if x.Token != nil {
		value := protoreflect.ValueOfMessage(x.Token.ProtoReflect())
		if !f(fd_OutgoingTransferTx_token, value) {
			return
		}
	}
	if x.Fee != nil {
		value := protoreflect.ValueOfMessage(x.Fee.ProtoReflect())
		if !f(fd_OutgoingTransferTx_fee, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OutgoingTransferTx) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.id":
		return x.Id != uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.sender":
		return x.Sender != ""
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.dest_address":
		return x.DestAddress != ""
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.token":
		return x.Token != nil
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.fee":
		return x.Fee != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTransferTx"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTransferTx does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingTransferTx) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.id":
		x.Id = uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.sender":
		x.Sender = ""
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.dest_address":
		x.DestAddress = ""
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.token":
		x.Token = nil
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.fee":
		x.Fee = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTransferTx"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTransferTx does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OutgoingTransferTx) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.dest_address":
		value := x.DestAddress
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.token":
		value := x.Token
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.fee":
		value := x.Fee
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTransferTx"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTransferTx does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingTransferTx) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.id":
		x.Id = value.Uint()
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.sender":
		x.Sender = value.Interface().(string)
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.dest_address":
		x.DestAddress = value.Interface().(string)
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.token":
		x.Token = value.Message().Interface().(*ERC20Token)
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.fee":
		x.Fee = value.Message().Interface().(*ERC20Token)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTransferTx"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTransferTx does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingTransferTx) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.token":
		if x.Token == nil {
			x.Token = new(ERC20Token)
		}
		return protoreflect.ValueOfMessage(x.Token.ProtoReflect())
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.fee":
		if x.Fee == nil {
			x.Fee = new(ERC20Token)
		}
		return protoreflect.ValueOfMessage(x.Fee.ProtoReflect())
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.id":
		panic(fmt.Errorf("field id of message fx.gravity.crosschain.v1.OutgoingTransferTx is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.sender":
		panic(fmt.Errorf("field sender of message fx.gravity.crosschain.v1.OutgoingTransferTx is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.dest_address":
		panic(fmt.Errorf("field dest_address of message fx.gravity.crosschain.v1.OutgoingTransferTx is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTransferTx"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTransferTx does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OutgoingTransferTx) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.sender":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.dest_address":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.token":
		m := new(ERC20Token)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fx.gravity.crosschain.v1.OutgoingTransferTx.fee":
		m := new(ERC20Token)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingTransferTx"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingTransferTx does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OutgoingTransferTx) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.OutgoingTransferTx", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OutgoingTransferTx) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingTransferTx) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OutgoingTransferTx) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OutgoingTransferTx) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OutgoingTransferTx)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DestAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Token != nil {
			l = options.Size(x.Token)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Fee != nil {
			l = options.Size(x.Fee)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OutgoingTransferTx)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Fee != nil {
			encoded, err := options.Marshal(x.Fee)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.Token != nil {
			encoded, err := options.Marshal(x.Token)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.DestAddress) > 0 {
			i -= len(x.DestAddress)
			copy(dAtA[i:], x.DestAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DestAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OutgoingTransferTx)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OutgoingTransferTx: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OutgoingTransferTx: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DestAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DestAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Token == nil {
					x.Token = &ERC20Token{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Token); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Fee == nil {
					x.Fee = &ERC20Token{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Fee); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ERC20Token          protoreflect.MessageDescriptor
	fd_ERC20Token_contract protoreflect.FieldDescriptor
	fd_ERC20Token_amount   protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_types_proto_init()
	md_ERC20Token = File_fx_gravity_crosschain_v1_types_proto.Messages().ByName("ERC20Token")
	fd_ERC20Token_contract = md_ERC20Token.Fields().ByName("contract")
	fd_ERC20Token_amount = md_ERC20Token.Fields().ByName("amount")
}

var _ protoreflect.Message = (*fastReflection_ERC20Token)(nil)

type fastReflection_ERC20Token ERC20Token

func (x *ERC20Token) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ERC20Token)(x)
}

func (x *ERC20Token) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ERC20Token_messageType fastReflection_ERC20Token_messageType
var _ protoreflect.MessageType = fastReflection_ERC20Token_messageType{}

type fastReflection_ERC20Token_messageType struct{}

func (x fastReflection_ERC20Token_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ERC20Token)(nil)
}
func (x fastReflection_ERC20Token_messageType) New() protoreflect.Message {
	return new(fastReflection_ERC20Token)
}
func (x fastReflection_ERC20Token_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ERC20Token
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ERC20Token) Descriptor() protoreflect.MessageDescriptor {
	return md_ERC20Token
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ERC20Token) Type() protoreflect.MessageType {
	return _fastReflection_ERC20Token_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ERC20Token) New() protoreflect.Message {
	return new(fastReflection_ERC20Token)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ERC20Token) Interface() protoreflect.ProtoMessage {
	return (*ERC20Token)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ERC20Token) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Contract != "" {
		value := protoreflect.ValueOfString(x.Contract)
		if !f(fd_ERC20Token_contract, value) {
			return
		}
	}
	if x.Amount != "" {
		value := protoreflect.ValueOfString(x.Amount)
		if !f(fd_ERC20Token_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ERC20Token) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.ERC20Token.contract":
		return x.Contract != ""
	case "fx.gravity.crosschain.v1.ERC20Token.amount":
		return x.Amount != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ERC20Token"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ERC20Token does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ERC20Token) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.ERC20Token.contract":
		x.Contract = ""
	case "fx.gravity.crosschain.v1.ERC20Token.amount":
		x.Amount = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ERC20Token"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ERC20Token does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ERC20Token) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.ERC20Token.contract":
		value := x.Contract
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.ERC20Token.amount":
		value := x.Amount
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ERC20Token"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ERC20Token does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ERC20Token) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.ERC20Token.contract":
		x.Contract = value.Interface().(string)
	case "fx.gravity.crosschain.v1.ERC20Token.amount":
		x.Amount = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ERC20Token"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ERC20Token does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ERC20Token) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.ERC20Token.contract":
		panic(fmt.Errorf("field contract of message fx.gravity.crosschain.v1.ERC20Token is not mutable"))
	case "fx.gravity.crosschain.v1.ERC20Token.amount":
		panic(fmt.Errorf("field amount of message fx.gravity.crosschain.v1.ERC20Token is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ERC20Token"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ERC20Token does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ERC20Token) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.ERC20Token.contract":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.ERC20Token.amount":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.ERC20Token"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.ERC20Token does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ERC20Token) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.ERC20Token", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ERC20Token) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ERC20Token) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ERC20Token) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ERC20Token) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ERC20Token)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Contract)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Amount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ERC20Token)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Amount) > 0 {
			i -= len(x.Amount)
			copy(dAtA[i:], x.Amount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Amount)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Contract) > 0 {
			i -= len(x.Contract)
			copy(dAtA[i:], x.Contract)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Contract)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ERC20Token)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ERC20Token: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ERC20Token: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Contract = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Params_9_list)(nil)

type _Params_9_list struct {
	list *[]string
}

func (x *_Params_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Params_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Params_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_9_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Params at list field Oracles as it is not of Message kind"))
}

func (x *_Params_9_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Params_9_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Params_9_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                                        protoreflect.MessageDescriptor
	fd_Params_gravity_id                             protoreflect.FieldDescriptor
	fd_Params_average_block_time                     protoreflect.FieldDescriptor
	fd_Params_external_batch_timeout                 protoreflect.FieldDescriptor
	fd_Params_average_external_block_time            protoreflect.FieldDescriptor
	fd_Params_signed_window                          protoreflect.FieldDescriptor
	fd_Params_slash_fraction                         protoreflect.FieldDescriptor
	fd_Params_oracle_set_update_power_change_percent protoreflect.FieldDescriptor
	fd_Params_ibc_transfer_timeout_height            protoreflect.FieldDescriptor
	fd_Params_oracles                                protoreflect.FieldDescriptor
	fd_Params_delegate_threshold                     protoreflect.FieldDescriptor
	fd_Params_delegate_multiple                      protoreflect.FieldDescriptor
	fd_Params_bridge_call_timeout                    protoreflect.FieldDescriptor
	fd_Params_bridge_call_max_gas_limit              protoreflect.FieldDescriptor
	fd_Params_enable_send_to_external_pending        protoreflect.FieldDescriptor
	fd_Params_enable_bridge_call_pending             protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_types_proto_init()
	md_Params = File_fx_gravity_crosschain_v1_types_proto.Messages().ByName("Params")
	fd_Params_gravity_id = md_Params.Fields().ByName("gravity_id")
	fd_Params_average_block_time = md_Params.Fields().ByName("average_block_time")
	fd_Params_external_batch_timeout = md_Params.Fields().ByName("external_batch_timeout")
	fd_Params_average_external_block_time = md_Params.Fields().ByName("average_external_block_time")
	fd_Params_signed_window = md_Params.Fields().ByName("signed_window")
	fd_Params_slash_fraction = md_Params.Fields().ByName("slash_fraction")
	fd_Params_oracle_set_update_power_change_percent = md_Params.Fields().ByName("oracle_set_update_power_change_percent")
	fd_Params_ibc_transfer_timeout_height = md_Params.Fields().ByName("ibc_transfer_timeout_height")
	fd_Params_oracles = md_Params.Fields().ByName("oracles")
	fd_Params_delegate_threshold = md_Params.Fields().ByName("delegate_threshold")
	fd_Params_delegate_multiple = md_Params.Fields().ByName("delegate_multiple")
	fd_Params_bridge_call_timeout = md_Params.Fields().ByName("bridge_call_timeout")
	fd_Params_bridge_call_max_gas_limit = md_Params.Fields().ByName("bridge_call_max_gas_limit")
	fd_Params_enable_send_to_external_pending = md_Params.Fields().ByName("enable_send_to_external_pending")
	fd_Params_enable_bridge_call_pending = md_Params.Fields().ByName("enable_bridge_call_pending")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.GravityId != "" {
		value := protoreflect.ValueOfString(x.GravityId)
		if !f(fd_Params_gravity_id, value) {
			return
		}
	}
	if x.AverageBlockTime != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AverageBlockTime)
		if !f(fd_Params_average_block_time, value) {
			return
		}
	}
	if x.ExternalBatchTimeout != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ExternalBatchTimeout)
		if !f(fd_Params_external_batch_timeout, value) {
			return
		}
	}
	if x.AverageExternalBlockTime != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AverageExternalBlockTime)
		if !f(fd_Params_average_external_block_time, value) {
			return
		}
	}
	if x.SignedWindow != uint64(0) {
		value := protoreflect.ValueOfUint64(x.SignedWindow)
		if !f(fd_Params_signed_window, value) {
			return
		}
	}
	if len(x.SlashFraction) != 0 {
		value := protoreflect.ValueOfBytes(x.SlashFraction)
		if !f(fd_Params_slash_fraction, value) {
			return
		}
	}
	if len(x.OracleSetUpdatePowerChangePercent) != 0 {
		value := protoreflect.ValueOfBytes(x.OracleSetUpdatePowerChangePercent)
		if !f(fd_Params_oracle_set_update_power_change_percent, value) {
			return
		}
	}
	if x.IbcTransferTimeoutHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.IbcTransferTimeoutHeight)
		if !f(fd_Params_ibc_transfer_timeout_height, value) {
			return
		}
	}
	if len(x.Oracles) != 0 {
		value := protoreflect.ValueOfList(&_Params_9_list{list: &x.Oracles})
		if !f(fd_Params_oracles, value) {
			return
		}
	}
	if x.DelegateThreshold != nil {
		value := protoreflect.ValueOfMessage(x.DelegateThreshold.ProtoReflect())
		if !f(fd_Params_delegate_threshold, value) {
			return
		}
	}
	if x.DelegateMultiple != int64(0) {
		value := protoreflect.ValueOfInt64(x.DelegateMultiple)
		if !f(fd_Params_delegate_multiple, value) {
			return
		}
	}
	if x.BridgeCallTimeout != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BridgeCallTimeout)
		if !f(fd_Params_bridge_call_timeout, value) {
			return
		}
	}
	if x.BridgeCallMaxGasLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BridgeCallMaxGasLimit)
		if !f(fd_Params_bridge_call_max_gas_limit, value) {
			return
		}
	}
	if x.EnableSendToExternalPending != false {
		value := protoreflect.ValueOfBool(x.EnableSendToExternalPending)
		if !f(fd_Params_enable_send_to_external_pending, value) {
			return
		}
	}
	if x.EnableBridgeCallPending != false {
		value := protoreflect.ValueOfBool(x.EnableBridgeCallPending)
		if !f(fd_Params_enable_bridge_call_pending, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Params.gravity_id":
		return x.GravityId != ""
	case "fx.gravity.crosschain.v1.Params.average_block_time":
		return x.AverageBlockTime != uint64(0)
	case "fx.gravity.crosschain.v1.Params.external_batch_timeout":
		return x.ExternalBatchTimeout != uint64(0)
	case "fx.gravity.crosschain.v1.Params.average_external_block_time":
		return x.AverageExternalBlockTime != uint64(0)
	case "fx.gravity.crosschain.v1.Params.signed_window":
		return x.SignedWindow != uint64(0)
	case "fx.gravity.crosschain.v1.Params.slash_fraction":
		return len(x.SlashFraction) != 0
	case "fx.gravity.crosschain.v1.Params.oracle_set_update_power_change_percent":
		return len(x.OracleSetUpdatePowerChangePercent) != 0
	case "fx.gravity.crosschain.v1.Params.ibc_transfer_timeout_height":
		return x.IbcTransferTimeoutHeight != uint64(0)
	case "fx.gravity.crosschain.v1.Params.oracles":
		return len(x.Oracles) != 0
	case "fx.gravity.crosschain.v1.Params.delegate_threshold":
		return x.DelegateThreshold != nil
	case "fx.gravity.crosschain.v1.Params.delegate_multiple":
		return x.DelegateMultiple != int64(0)
	case "fx.gravity.crosschain.v1.Params.bridge_call_timeout":
		return x.BridgeCallTimeout != uint64(0)
	case "fx.gravity.crosschain.v1.Params.bridge_call_max_gas_limit":
		return x.BridgeCallMaxGasLimit != uint64(0)
	case "fx.gravity.crosschain.v1.Params.enable_send_to_external_pending":
		return x.EnableSendToExternalPending != false
	case "fx.gravity.crosschain.v1.Params.enable_bridge_call_pending":
		return x.EnableBridgeCallPending != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Params"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Params.gravity_id":
		x.GravityId = ""
	case "fx.gravity.crosschain.v1.Params.average_block_time":
		x.AverageBlockTime = uint64(0)
	case "fx.gravity.crosschain.v1.Params.external_batch_timeout":
		x.ExternalBatchTimeout = uint64(0)
	case "fx.gravity.crosschain.v1.Params.average_external_block_time":
		x.AverageExternalBlockTime = uint64(0)
	case "fx.gravity.crosschain.v1.Params.signed_window":
		x.SignedWindow = uint64(0)
	case "fx.gravity.crosschain.v1.Params.slash_fraction":
		x.SlashFraction = nil
	case "fx.gravity.crosschain.v1.Params.oracle_set_update_power_change_percent":
		x.OracleSetUpdatePowerChangePercent = nil
	case "fx.gravity.crosschain.v1.Params.ibc_transfer_timeout_height":
		x.IbcTransferTimeoutHeight = uint64(0)
	case "fx.gravity.crosschain.v1.Params.oracles":
		x.Oracles = nil
	case "fx.gravity.crosschain.v1.Params.delegate_threshold":
		x.DelegateThreshold = nil
	case "fx.gravity.crosschain.v1.Params.delegate_multiple":
		x.DelegateMultiple = int64(0)
	case "fx.gravity.crosschain.v1.Params.bridge_call_timeout":
		x.BridgeCallTimeout = uint64(0)
	case "fx.gravity.crosschain.v1.Params.bridge_call_max_gas_limit":
		x.BridgeCallMaxGasLimit = uint64(0)
	case "fx.gravity.crosschain.v1.Params.enable_send_to_external_pending":
		x.EnableSendToExternalPending = false
	case "fx.gravity.crosschain.v1.Params.enable_bridge_call_pending":
		x.EnableBridgeCallPending = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Params"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.Params.gravity_id":
		value := x.GravityId
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.Params.average_block_time":
		value := x.AverageBlockTime
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.Params.external_batch_timeout":
		value := x.ExternalBatchTimeout
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.Params.average_external_block_time":
		value := x.AverageExternalBlockTime
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.Params.signed_window":
		value := x.SignedWindow
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.Params.slash_fraction":
		value := x.SlashFraction
		return protoreflect.ValueOfBytes(value)
	case "fx.gravity.crosschain.v1.Params.oracle_set_update_power_change_percent":
		value := x.OracleSetUpdatePowerChangePercent
		return protoreflect.ValueOfBytes(value)
	case "fx.gravity.crosschain.v1.Params.ibc_transfer_timeout_height":
		value := x.IbcTransferTimeoutHeight
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.Params.oracles":
		if len(x.Oracles) == 0 {
			return protoreflect.ValueOfList(&_Params_9_list{})
		}
		listValue := &_Params_9_list{list: &x.Oracles}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.Params.delegate_threshold":
		value := x.DelegateThreshold
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fx.gravity.crosschain.v1.Params.delegate_multiple":
		value := x.DelegateMultiple
		return protoreflect.ValueOfInt64(value)
	case "fx.gravity.crosschain.v1.Params.bridge_call_timeout":
		value := x.BridgeCallTimeout
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.Params.bridge_call_max_gas_limit":
		value := x.BridgeCallMaxGasLimit
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.Params.enable_send_to_external_pending":
		value := x.EnableSendToExternalPending
		return protoreflect.ValueOfBool(value)
	case "fx.gravity.crosschain.v1.Params.enable_bridge_call_pending":
		value := x.EnableBridgeCallPending
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Params"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Params.gravity_id":
		x.GravityId = value.Interface().(string)
	case "fx.gravity.crosschain.v1.Params.average_block_time":
		x.AverageBlockTime = value.Uint()
	case "fx.gravity.crosschain.v1.Params.external_batch_timeout":
		x.ExternalBatchTimeout = value.Uint()
	case "fx.gravity.crosschain.v1.Params.average_external_block_time":
		x.AverageExternalBlockTime = value.Uint()
	case "fx.gravity.crosschain.v1.Params.signed_window":
		x.SignedWindow = value.Uint()
	case "fx.gravity.crosschain.v1.Params.slash_fraction":
		x.SlashFraction = value.Bytes()
	case "fx.gravity.crosschain.v1.Params.oracle_set_update_power_change_percent":
		x.OracleSetUpdatePowerChangePercent = value.Bytes()
	case "fx.gravity.crosschain.v1.Params.ibc_transfer_timeout_height":
		x.IbcTransferTimeoutHeight = value.Uint()
	case "fx.gravity.crosschain.v1.Params.oracles":
		lv := value.List()
		clv := lv.(*_Params_9_list)
		x.Oracles = *clv.list
	case "fx.gravity.crosschain.v1.Params.delegate_threshold":
		x.DelegateThreshold = value.Message().Interface().(*v1beta1.Coin)
	case "fx.gravity.crosschain.v1.Params.delegate_multiple":
		x.DelegateMultiple = value.Int()
	case "fx.gravity.crosschain.v1.Params.bridge_call_timeout":
		x.BridgeCallTimeout = value.Uint()
	case "fx.gravity.crosschain.v1.Params.bridge_call_max_gas_limit":
		x.BridgeCallMaxGasLimit = value.Uint()
	case "fx.gravity.crosschain.v1.Params.enable_send_to_external_pending":
		x.EnableSendToExternalPending = value.Bool()
	case "fx.gravity.crosschain.v1.Params.enable_bridge_call_pending":
		x.EnableBridgeCallPending = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Params"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Params.oracles":
		if x.Oracles == nil {
			x.Oracles = []string{}
		}
		value := &_Params_9_list{list: &x.Oracles}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.Params.delegate_threshold":
		if x.DelegateThreshold == nil {
			x.DelegateThreshold = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.DelegateThreshold.ProtoReflect())
	case "fx.gravity.crosschain.v1.Params.gravity_id":
		panic(fmt.Errorf("field gravity_id of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.average_block_time":
		panic(fmt.Errorf("field average_block_time of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.external_batch_timeout":
		panic(fmt.Errorf("field external_batch_timeout of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.average_external_block_time":
		panic(fmt.Errorf("field average_external_block_time of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.signed_window":
		panic(fmt.Errorf("field signed_window of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.slash_fraction":
		panic(fmt.Errorf("field slash_fraction of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.oracle_set_update_power_change_percent":
		panic(fmt.Errorf("field oracle_set_update_power_change_percent of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.ibc_transfer_timeout_height":
		panic(fmt.Errorf("field ibc_transfer_timeout_height of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.delegate_multiple":
		panic(fmt.Errorf("field delegate_multiple of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.bridge_call_timeout":
		panic(fmt.Errorf("field bridge_call_timeout of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.bridge_call_max_gas_limit":
		panic(fmt.Errorf("field bridge_call_max_gas_limit of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.enable_send_to_external_pending":
		panic(fmt.Errorf("field enable_send_to_external_pending of message fx.gravity.crosschain.v1.Params is not mutable"))
	case "fx.gravity.crosschain.v1.Params.enable_bridge_call_pending":
		panic(fmt.Errorf("field enable_bridge_call_pending of message fx.gravity.crosschain.v1.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Params"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.Params.gravity_id":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.Params.average_block_time":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.Params.external_batch_timeout":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.Params.average_external_block_time":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.Params.signed_window":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.Params.slash_fraction":
		return protoreflect.ValueOfBytes(nil)
	case "fx.gravity.crosschain.v1.Params.oracle_set_update_power_change_percent":
		return protoreflect.ValueOfBytes(nil)
	case "fx.gravity.crosschain.v1.Params.ibc_transfer_timeout_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.Params.oracles":
		list := []string{}
		return protoreflect.ValueOfList(&_Params_9_list{list: &list})
	case "fx.gravity.crosschain.v1.Params.delegate_threshold":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fx.gravity.crosschain.v1.Params.delegate_multiple":
		return protoreflect.ValueOfInt64(int64(0))
	case "fx.gravity.crosschain.v1.Params.bridge_call_timeout":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.Params.bridge_call_max_gas_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.Params.enable_send_to_external_pending":
		return protoreflect.ValueOfBool(false)
	case "fx.gravity.crosschain.v1.Params.enable_bridge_call_pending":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.Params"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.GravityId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AverageBlockTime != 0 {
			n += 1 + runtime.Sov(uint64(x.AverageBlockTime))
		}
		if x.ExternalBatchTimeout != 0 {
			n += 1 + runtime.Sov(uint64(x.ExternalBatchTimeout))
		}
		if x.AverageExternalBlockTime != 0 {
			n += 1 + runtime.Sov(uint64(x.AverageExternalBlockTime))
		}
		if x.SignedWindow != 0 {
			n += 1 + runtime.Sov(uint64(x.SignedWindow))
		}
		l = len(x.SlashFraction)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OracleSetUpdatePowerChangePercent)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IbcTransferTimeoutHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.IbcTransferTimeoutHeight))
		}
		if len(x.Oracles) > 0 {
			for _, s := range x.Oracles {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.DelegateThreshold != nil {
			l = options.Size(x.DelegateThreshold)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DelegateMultiple != 0 {
			n += 1 + runtime.Sov(uint64(x.DelegateMultiple))
		}
		if x.BridgeCallTimeout != 0 {
			n += 1 + runtime.Sov(uint64(x.BridgeCallTimeout))
		}
		if x.BridgeCallMaxGasLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.BridgeCallMaxGasLimit))
		}
		if x.EnableSendToExternalPending {
			n += 2
		}
		if x.EnableBridgeCallPending {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.EnableBridgeCallPending {
			i--
			if x.EnableBridgeCallPending {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x78
		}
		if x.EnableSendToExternalPending {
			i--
			if x.EnableSendToExternalPending {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x70
		}
		if x.BridgeCallMaxGasLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BridgeCallMaxGasLimit))
			i--
			dAtA[i] = 0x68
		}
		if x.BridgeCallTimeout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BridgeCallTimeout))
			i--
			dAtA[i] = 0x60
		}
		if x.DelegateMultiple != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DelegateMultiple))
			i--
			dAtA[i] = 0x58
		}
		if x.DelegateThreshold != nil {
			encoded, err := options.Marshal(x.DelegateThreshold)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.Oracles) > 0 {
			for iNdEx := len(x.Oracles) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Oracles[iNdEx])
				copy(dAtA[i:], x.Oracles[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Oracles[iNdEx])))
				i--
				dAtA[i] = 0x4a
			}
		}
		if x.IbcTransferTimeoutHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.IbcTransferTimeoutHeight))
			i--
			dAtA[i] = 0x40
		}
		if len(x.OracleSetUpdatePowerChangePercent) > 0 {
			i -= len(x.OracleSetUpdatePowerChangePercent)
			copy(dAtA[i:], x.OracleSetUpdatePowerChangePercent)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OracleSetUpdatePowerChangePercent)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.SlashFraction) > 0 {
			i -= len(x.SlashFraction)
			copy(dAtA[i:], x.SlashFraction)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SlashFraction)))
			i--
			dAtA[i] = 0x32
		}
		if x.SignedWindow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.SignedWindow))
			i--
			dAtA[i] = 0x28
		}
		if x.AverageExternalBlockTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AverageExternalBlockTime))
			i--
			dAtA[i] = 0x20
		}
		if x.ExternalBatchTimeout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExternalBatchTimeout))
			i--
			dAtA[i] = 0x18
		}
		if x.AverageBlockTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AverageBlockTime))
			i--
			dAtA[i] = 0x10
		}
		if len(x.GravityId) > 0 {
			i -= len(x.GravityId)
			copy(dAtA[i:], x.GravityId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GravityId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GravityId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GravityId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
				}
				x.AverageBlockTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AverageBlockTime |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExternalBatchTimeout", wireType)
				}
				x.ExternalBatchTimeout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExternalBatchTimeout |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AverageExternalBlockTime", wireType)
				}
				x.AverageExternalBlockTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AverageExternalBlockTime |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SignedWindow", wireType)
				}
				x.SignedWindow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.SignedWindow |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SlashFraction = append(x.SlashFraction[:0], dAtA[iNdEx:postIndex]...)
				if x.SlashFraction == nil {
					x.SlashFraction = []byte{}
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleSetUpdatePowerChangePercent", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OracleSetUpdatePowerChangePercent = append(x.OracleSetUpdatePowerChangePercent[:0], dAtA[iNdEx:postIndex]...)
				if x.OracleSetUpdatePowerChangePercent == nil {
					x.OracleSetUpdatePowerChangePercent = []byte{}
				}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IbcTransferTimeoutHeight", wireType)
				}
				x.IbcTransferTimeoutHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.IbcTransferTimeoutHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Oracles = append(x.Oracles, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegateThreshold", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DelegateThreshold == nil {
					x.DelegateThreshold = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DelegateThreshold); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegateMultiple", wireType)
				}
				x.DelegateMultiple = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DelegateMultiple |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BridgeCallTimeout", wireType)
				}
				x.BridgeCallTimeout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BridgeCallTimeout |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BridgeCallMaxGasLimit", wireType)
				}
				x.BridgeCallMaxGasLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BridgeCallMaxGasLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EnableSendToExternalPending", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.EnableSendToExternalPending = bool(v != 0)
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EnableBridgeCallPending", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.EnableBridgeCallPending = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_OutgoingBridgeCall_3_list)(nil)

type _OutgoingBridgeCall_3_list struct {
	list *[]*ERC20Token
}

func (x *_OutgoingBridgeCall_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_OutgoingBridgeCall_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_OutgoingBridgeCall_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ERC20Token)
	(*x.list)[i] = concreteValue
}

func (x *_OutgoingBridgeCall_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*ERC20Token)
	*x.list = append(*x.list, concreteValue)
}

func (x *_OutgoingBridgeCall_3_list) AppendMutable() protoreflect.Value {
	v := new(ERC20Token)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OutgoingBridgeCall_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_OutgoingBridgeCall_3_list) NewElement() protoreflect.Value {
	v := new(ERC20Token)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_OutgoingBridgeCall_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_OutgoingBridgeCall              protoreflect.MessageDescriptor
	fd_OutgoingBridgeCall_sender       protoreflect.FieldDescriptor
	fd_OutgoingBridgeCall_refund       protoreflect.FieldDescriptor
	fd_OutgoingBridgeCall_tokens       protoreflect.FieldDescriptor
	fd_OutgoingBridgeCall_to           protoreflect.FieldDescriptor
	fd_OutgoingBridgeCall_data         protoreflect.FieldDescriptor
	fd_OutgoingBridgeCall_memo         protoreflect.FieldDescriptor
	fd_OutgoingBridgeCall_nonce        protoreflect.FieldDescriptor
	fd_OutgoingBridgeCall_timeout      protoreflect.FieldDescriptor
	fd_OutgoingBridgeCall_block_height protoreflect.FieldDescriptor
	fd_OutgoingBridgeCall_event_nonce  protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_types_proto_init()
	md_OutgoingBridgeCall = File_fx_gravity_crosschain_v1_types_proto.Messages().ByName("OutgoingBridgeCall")
	fd_OutgoingBridgeCall_sender = md_OutgoingBridgeCall.Fields().ByName("sender")
	fd_OutgoingBridgeCall_refund = md_OutgoingBridgeCall.Fields().ByName("refund")
	fd_OutgoingBridgeCall_tokens = md_OutgoingBridgeCall.Fields().ByName("tokens")
	fd_OutgoingBridgeCall_to = md_OutgoingBridgeCall.Fields().ByName("to")
	fd_OutgoingBridgeCall_data = md_OutgoingBridgeCall.Fields().ByName("data")
	fd_OutgoingBridgeCall_memo = md_OutgoingBridgeCall.Fields().ByName("memo")
	fd_OutgoingBridgeCall_nonce = md_OutgoingBridgeCall.Fields().ByName("nonce")
	fd_OutgoingBridgeCall_timeout = md_OutgoingBridgeCall.Fields().ByName("timeout")
	fd_OutgoingBridgeCall_block_height = md_OutgoingBridgeCall.Fields().ByName("block_height")
	fd_OutgoingBridgeCall_event_nonce = md_OutgoingBridgeCall.Fields().ByName("event_nonce")
}

var _ protoreflect.Message = (*fastReflection_OutgoingBridgeCall)(nil)

type fastReflection_OutgoingBridgeCall OutgoingBridgeCall

func (x *OutgoingBridgeCall) ProtoReflect() protoreflect.Message {
	return (*fastReflection_OutgoingBridgeCall)(x)
}

func (x *OutgoingBridgeCall) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_OutgoingBridgeCall_messageType fastReflection_OutgoingBridgeCall_messageType
var _ protoreflect.MessageType = fastReflection_OutgoingBridgeCall_messageType{}

type fastReflection_OutgoingBridgeCall_messageType struct{}

func (x fastReflection_OutgoingBridgeCall_messageType) Zero() protoreflect.Message {
	return (*fastReflection_OutgoingBridgeCall)(nil)
}
func (x fastReflection_OutgoingBridgeCall_messageType) New() protoreflect.Message {
	return new(fastReflection_OutgoingBridgeCall)
}
func (x fastReflection_OutgoingBridgeCall_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_OutgoingBridgeCall
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_OutgoingBridgeCall) Descriptor() protoreflect.MessageDescriptor {
	return md_OutgoingBridgeCall
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_OutgoingBridgeCall) Type() protoreflect.MessageType {
	return _fastReflection_OutgoingBridgeCall_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_OutgoingBridgeCall) New() protoreflect.Message {
	return new(fastReflection_OutgoingBridgeCall)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_OutgoingBridgeCall) Interface() protoreflect.ProtoMessage {
	return (*OutgoingBridgeCall)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_OutgoingBridgeCall) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Sender != "" {
		value := protoreflect.ValueOfString(x.Sender)
		if !f(fd_OutgoingBridgeCall_sender, value) {
			return
		}
	}
	if x.Refund != "" {
		value := protoreflect.ValueOfString(x.Refund)
		if !f(fd_OutgoingBridgeCall_refund, value) {
			return
		}
	}
	if len(x.Tokens) != 0 {
		value := protoreflect.ValueOfList(&_OutgoingBridgeCall_3_list{list: &x.Tokens})
		if !f(fd_OutgoingBridgeCall_tokens, value) {
			return
		}
	}
	if x.To != "" {
		value := protoreflect.ValueOfString(x.To)
		if !f(fd_OutgoingBridgeCall_to, value) {
			return
		}
	}
	if x.Data != "" {
		value := protoreflect.ValueOfString(x.Data)
		if !f(fd_OutgoingBridgeCall_data, value) {
			return
		}
	}
	if x.Memo != "" {
		value := protoreflect.ValueOfString(x.Memo)
		if !f(fd_OutgoingBridgeCall_memo, value) {
			return
		}
	}
	if x.Nonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Nonce)
		if !f(fd_OutgoingBridgeCall_nonce, value) {
			return
		}
	}
	if x.Timeout != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Timeout)
		if !f(fd_OutgoingBridgeCall_timeout, value) {
			return
		}
	}
	if x.BlockHeight != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockHeight)
		if !f(fd_OutgoingBridgeCall_block_height, value) {
			return
		}
	}
	if x.EventNonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EventNonce)
		if !f(fd_OutgoingBridgeCall_event_nonce, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_OutgoingBridgeCall) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.sender":
		return x.Sender != ""
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.refund":
		return x.Refund != ""
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.tokens":
		return len(x.Tokens) != 0
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.to":
		return x.To != ""
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.data":
		return x.Data != ""
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.memo":
		return x.Memo != ""
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.nonce":
		return x.Nonce != uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.timeout":
		return x.Timeout != uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.block_height":
		return x.BlockHeight != uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.event_nonce":
		return x.EventNonce != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingBridgeCall"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingBridgeCall does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingBridgeCall) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.sender":
		x.Sender = ""
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.refund":
		x.Refund = ""
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.tokens":
		x.Tokens = nil
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.to":
		x.To = ""
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.data":
		x.Data = ""
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.memo":
		x.Memo = ""
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.nonce":
		x.Nonce = uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.timeout":
		x.Timeout = uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.block_height":
		x.BlockHeight = uint64(0)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.event_nonce":
		x.EventNonce = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingBridgeCall"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingBridgeCall does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_OutgoingBridgeCall) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.sender":
		value := x.Sender
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.refund":
		value := x.Refund
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.tokens":
		if len(x.Tokens) == 0 {
			return protoreflect.ValueOfList(&_OutgoingBridgeCall_3_list{})
		}
		listValue := &_OutgoingBridgeCall_3_list{list: &x.Tokens}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.to":
		value := x.To
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.data":
		value := x.Data
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.memo":
		value := x.Memo
		return protoreflect.ValueOfString(value)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.nonce":
		value := x.Nonce
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.timeout":
		value := x.Timeout
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.event_nonce":
		value := x.EventNonce
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingBridgeCall"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingBridgeCall does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingBridgeCall) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.sender":
		x.Sender = value.Interface().(string)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.refund":
		x.Refund = value.Interface().(string)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.tokens":
		lv := value.List()
		clv := lv.(*_OutgoingBridgeCall_3_list)
		x.Tokens = *clv.list
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.to":
		x.To = value.Interface().(string)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.data":
		x.Data = value.Interface().(string)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.memo":
		x.Memo = value.Interface().(string)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.nonce":
		x.Nonce = value.Uint()
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.timeout":
		x.Timeout = value.Uint()
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.block_height":
		x.BlockHeight = value.Uint()
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.event_nonce":
		x.EventNonce = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingBridgeCall"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingBridgeCall does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingBridgeCall) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.tokens":
		if x.Tokens == nil {
			x.Tokens = []*ERC20Token{}
		}
		value := &_OutgoingBridgeCall_3_list{list: &x.Tokens}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.sender":
		panic(fmt.Errorf("field sender of message fx.gravity.crosschain.v1.OutgoingBridgeCall is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.refund":
		panic(fmt.Errorf("field refund of message fx.gravity.crosschain.v1.OutgoingBridgeCall is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.to":
		panic(fmt.Errorf("field to of message fx.gravity.crosschain.v1.OutgoingBridgeCall is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.data":
		panic(fmt.Errorf("field data of message fx.gravity.crosschain.v1.OutgoingBridgeCall is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.memo":
		panic(fmt.Errorf("field memo of message fx.gravity.crosschain.v1.OutgoingBridgeCall is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.nonce":
		panic(fmt.Errorf("field nonce of message fx.gravity.crosschain.v1.OutgoingBridgeCall is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.timeout":
		panic(fmt.Errorf("field timeout of message fx.gravity.crosschain.v1.OutgoingBridgeCall is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.block_height":
		panic(fmt.Errorf("field block_height of message fx.gravity.crosschain.v1.OutgoingBridgeCall is not mutable"))
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.event_nonce":
		panic(fmt.Errorf("field event_nonce of message fx.gravity.crosschain.v1.OutgoingBridgeCall is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingBridgeCall"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingBridgeCall does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_OutgoingBridgeCall) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.sender":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.refund":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.tokens":
		list := []*ERC20Token{}
		return protoreflect.ValueOfList(&_OutgoingBridgeCall_3_list{list: &list})
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.to":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.data":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.memo":
		return protoreflect.ValueOfString("")
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.timeout":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.block_height":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.OutgoingBridgeCall.event_nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.OutgoingBridgeCall"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.OutgoingBridgeCall does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_OutgoingBridgeCall) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.OutgoingBridgeCall", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_OutgoingBridgeCall) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_OutgoingBridgeCall) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_OutgoingBridgeCall) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_OutgoingBridgeCall) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*OutgoingBridgeCall)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Sender)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Refund)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Tokens) > 0 {
			for _, e := range x.Tokens {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.To)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Data)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Memo)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		if x.Timeout != 0 {
			n += 1 + runtime.Sov(uint64(x.Timeout))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.EventNonce != 0 {
			n += 1 + runtime.Sov(uint64(x.EventNonce))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*OutgoingBridgeCall)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.EventNonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EventNonce))
			i--
			dAtA[i] = 0x50
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x48
		}
		if x.Timeout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timeout))
			i--
			dAtA[i] = 0x40
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x38
		}
		if len(x.Memo) > 0 {
			i -= len(x.Memo)
			copy(dAtA[i:], x.Memo)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Memo)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Data) > 0 {
			i -= len(x.Data)
			copy(dAtA[i:], x.Data)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Data)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.To) > 0 {
			i -= len(x.To)
			copy(dAtA[i:], x.To)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.To)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Tokens) > 0 {
			for iNdEx := len(x.Tokens) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Tokens[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Refund) > 0 {
			i -= len(x.Refund)
			copy(dAtA[i:], x.Refund)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Refund)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Sender) > 0 {
			i -= len(x.Sender)
			copy(dAtA[i:], x.Sender)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Sender)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*OutgoingBridgeCall)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OutgoingBridgeCall: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: OutgoingBridgeCall: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Sender = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Refund = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Tokens = append(x.Tokens, &ERC20Token{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Tokens[len(x.Tokens)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.To = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Data = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Memo = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
				}
				x.Timeout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timeout |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
				}
				x.EventNonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EventNonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: fx/gravity/crosschain/v1/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ClaimType is the cosmos type of an event from the counterpart chain that can
// be handled
type ClaimType int32

const (
	ClaimType_CLAIM_TYPE_UNSPECIFIED        ClaimType = 0
	ClaimType_CLAIM_TYPE_SEND_TO_FX         ClaimType = 1
	ClaimType_CLAIM_TYPE_SEND_TO_EXTERNAL   ClaimType = 2
	ClaimType_CLAIM_TYPE_BRIDGE_TOKEN       ClaimType = 3
	ClaimType_CLAIM_TYPE_ORACLE_SET_UPDATED ClaimType = 4
	ClaimType_CLAIM_TYPE_BRIDGE_CALL        ClaimType = 5
	ClaimType_CLAIM_TYPE_BRIDGE_CALL_RESULT ClaimType = 6
)

// Enum value maps for ClaimType.
var (
	ClaimType_name = map[int32]string{
		0: "CLAIM_TYPE_UNSPECIFIED",
		1: "CLAIM_TYPE_SEND_TO_FX",
		2: "CLAIM_TYPE_SEND_TO_EXTERNAL",
		3: "CLAIM_TYPE_BRIDGE_TOKEN",
		4: "CLAIM_TYPE_ORACLE_SET_UPDATED",
		5: "CLAIM_TYPE_BRIDGE_CALL",
		6: "CLAIM_TYPE_BRIDGE_CALL_RESULT",
	}
	ClaimType_value = map[string]int32{
		"CLAIM_TYPE_UNSPECIFIED":        0,
		"CLAIM_TYPE_SEND_TO_FX":         1,
		"CLAIM_TYPE_SEND_TO_EXTERNAL":   2,
		"CLAIM_TYPE_BRIDGE_TOKEN":       3,
		"CLAIM_TYPE_ORACLE_SET_UPDATED": 4,
		"CLAIM_TYPE_BRIDGE_CALL":        5,
		"CLAIM_TYPE_BRIDGE_CALL_RESULT": 6,
	}
)

func (x ClaimType) Enum() *ClaimType {
	p := new(ClaimType)
	*p = x
	return p
}

func (x ClaimType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClaimType) Descriptor() protoreflect.EnumDescriptor {
	return file_fx_gravity_crosschain_v1_types_proto_enumTypes[0].Descriptor()
}

func (ClaimType) Type() protoreflect.EnumType {
	return &file_fx_gravity_crosschain_v1_types_proto_enumTypes[0]
}

func (x ClaimType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClaimType.Descriptor instead.
func (ClaimType) EnumDescriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{0}
}

type ProposalOracle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Oracles []string `protobuf:"bytes,1,rep,name=oracles,proto3" json:"oracles,omitempty"`
}

func (x *ProposalOracle) Reset() {
	*x = ProposalOracle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalOracle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalOracle) ProtoMessage() {}

// Deprecated: Use ProposalOracle.ProtoReflect.Descriptor instead.
func (*ProposalOracle) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *ProposalOracle) GetOracles() []string {
	if x != nil {
		return x.Oracles
	}
	return nil
}

type Oracle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OracleAddress   string `protobuf:"bytes,1,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	BridgerAddress  string `protobuf:"bytes,2,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
	ExternalAddress string `protobuf:"bytes,3,opt,name=external_address,json=externalAddress,proto3" json:"external_address,omitempty"`
	DelegateAmount  string `protobuf:"bytes,4,opt,name=delegate_amount,json=delegateAmount,proto3" json:"delegate_amount,omitempty"`
	// start oracle height
	StartHeight       int64  `protobuf:"varint,5,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	Online            bool   `protobuf:"varint,6,opt,name=online,proto3" json:"online,omitempty"`
	DelegateValidator string `protobuf:"bytes,7,opt,name=delegate_validator,json=delegateValidator,proto3" json:"delegate_validator,omitempty"`
	SlashTimes        int64  `protobuf:"varint,8,opt,name=slash_times,json=slashTimes,proto3" json:"slash_times,omitempty"`
}

func (x *Oracle) Reset() {
	*x = Oracle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oracle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oracle) ProtoMessage() {}

// Deprecated: Use Oracle.ProtoReflect.Descriptor instead.
func (*Oracle) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *Oracle) GetOracleAddress() string {
	if x != nil {
		return x.OracleAddress
	}
	return ""
}

func (x *Oracle) GetBridgerAddress() string {
	if x != nil {
		return x.BridgerAddress
	}
	return ""
}

func (x *Oracle) GetExternalAddress() string {
	if x != nil {
		return x.ExternalAddress
	}
	return ""
}

func (x *Oracle) GetDelegateAmount() string {
	if x != nil {
		return x.DelegateAmount
	}
	return ""
}

func (x *Oracle) GetStartHeight() int64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *Oracle) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *Oracle) GetDelegateValidator() string {
	if x != nil {
		return x.DelegateValidator
	}
	return ""
}

func (x *Oracle) GetSlashTimes() int64 {
	if x != nil {
		return x.SlashTimes
	}
	return 0
}

// BridgeValidator represents a validator's external address and its power
type BridgeValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Power           uint64 `protobuf:"varint,1,opt,name=power,proto3" json:"power,omitempty"`
	ExternalAddress string `protobuf:"bytes,2,opt,name=external_address,json=externalAddress,proto3" json:"external_address,omitempty"`
}

func (x *BridgeValidator) Reset() {
	*x = BridgeValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeValidator) ProtoMessage() {}

// Deprecated: Use BridgeValidator.ProtoReflect.Descriptor instead.
func (*BridgeValidator) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *BridgeValidator) GetPower() uint64 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *BridgeValidator) GetExternalAddress() string {
	if x != nil {
		return x.ExternalAddress
	}
	return ""
}

// OracleSet is the external Chain Bridge Multsig Set, each gravity validator
// also maintains an external key to sign messages, these are used to check
// signatures on external because of the significant gas savings
type OracleSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce   uint64             `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Members []*BridgeValidator `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	Height  uint64             `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *OracleSet) Reset() {
	*x = OracleSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OracleSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleSet) ProtoMessage() {}

// Deprecated: Use OracleSet.ProtoReflect.Descriptor instead.
func (*OracleSet) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *OracleSet) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *OracleSet) GetMembers() []*BridgeValidator {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *OracleSet) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

// LastObservedBlockHeight stores the last observed
// external block height along with the our block height that
// it was observed at. These two numbers can be used to project
// outward and always produce batches with timeouts in the future
// even if no Ethereum block height has been relayed for a long time
type LastObservedBlockHeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalBlockHeight uint64 `protobuf:"varint,1,opt,name=external_block_height,json=externalBlockHeight,proto3" json:"external_block_height,omitempty"`
	BlockHeight         uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *LastObservedBlockHeight) Reset() {
	*x = LastObservedBlockHeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastObservedBlockHeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastObservedBlockHeight) ProtoMessage() {}

// Deprecated: Use LastObservedBlockHeight.ProtoReflect.Descriptor instead.
func (*LastObservedBlockHeight) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *LastObservedBlockHeight) GetExternalBlockHeight() uint64 {
	if x != nil {
		return x.ExternalBlockHeight
	}
	return 0
}

func (x *LastObservedBlockHeight) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

// Attestation is an aggregate of `claims` that eventually becomes `observed` by
// all bridger set
// EVENT_NONCE:
// EventNonce a nonce provided by the gravity contract that is unique per event
// fired These event nonces must be relayed in order. This is a correctness
// issue, if relaying out of order transaction replay attacks become possible
// OBSERVED:
// Observed indicates that >67% of validators have attested to the event,
// and that the event should be executed by the gravity state machine
//
// The actual content of the claims is passed in with the transaction making the
// claim and then passed through the call stack alongside the attestation while
// it is processed the key in which the attestation is stored is keyed on the
// exact details of the claim but there is no reason to store those exact
// details becuause the next message sender will kindly provide you with them.
type Attestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Observed bool       `protobuf:"varint,1,opt,name=observed,proto3" json:"observed,omitempty"`
	Votes    []string   `protobuf:"bytes,2,rep,name=votes,proto3" json:"votes,omitempty"`
	Height   uint64     `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Claim    *anypb.Any `protobuf:"bytes,4,opt,name=claim,proto3" json:"claim,omitempty"`
}

func (x *Attestation) Reset() {
	*x = Attestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attestation) ProtoMessage() {}

// Deprecated: Use Attestation.ProtoReflect.Descriptor instead.
func (*Attestation) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *Attestation) GetObserved() bool {
	if x != nil {
		return x.Observed
	}
	return false
}

func (x *Attestation) GetVotes() []string {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *Attestation) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Attestation) GetClaim() *anypb.Any {
	if x != nil {
		return x.Claim
	}
	return nil
}

// OutgoingTxBatch represents a batch of transactions going from gravity to ETH
type OutgoingTxBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchNonce    uint64                `protobuf:"varint,1,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
	BatchTimeout  uint64                `protobuf:"varint,2,opt,name=batch_timeout,json=batchTimeout,proto3" json:"batch_timeout,omitempty"`
	Transactions  []*OutgoingTransferTx `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	TokenContract string                `protobuf:"bytes,4,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Block         uint64                `protobuf:"varint,5,opt,name=block,proto3" json:"block,omitempty"`
	FeeReceive    string                `protobuf:"bytes,6,opt,name=fee_receive,json=feeReceive,proto3" json:"fee_receive,omitempty"`
}

func (x *OutgoingTxBatch) Reset() {
	*x = OutgoingTxBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingTxBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingTxBatch) ProtoMessage() {}

// Deprecated: Use OutgoingTxBatch.ProtoReflect.Descriptor instead.
func (*OutgoingTxBatch) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *OutgoingTxBatch) GetBatchNonce() uint64 {
	if x != nil {
		return x.BatchNonce
	}
	return 0
}

func (x *OutgoingTxBatch) GetBatchTimeout() uint64 {
	if x != nil {
		return x.BatchTimeout
	}
	return 0
}

func (x *OutgoingTxBatch) GetTransactions() []*OutgoingTransferTx {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *OutgoingTxBatch) GetTokenContract() string {
	if x != nil {
		return x.TokenContract
	}
	return ""
}

func (x *OutgoingTxBatch) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *OutgoingTxBatch) GetFeeReceive() string {
	if x != nil {
		return x.FeeReceive
	}
	return ""
}

// OutgoingTransferTx represents an individual send from gravity to ETH
type OutgoingTransferTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sender      string      `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	DestAddress string      `protobuf:"bytes,3,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	Token       *ERC20Token `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	Fee         *ERC20Token `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *OutgoingTransferTx) Reset() {
	*x = OutgoingTransferTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingTransferTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingTransferTx) ProtoMessage() {}

// Deprecated: Use OutgoingTransferTx.ProtoReflect.Descriptor instead.
func (*OutgoingTransferTx) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{7}
}

func (x *OutgoingTransferTx) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OutgoingTransferTx) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *OutgoingTransferTx) GetDestAddress() string {
	if x != nil {
		return x.DestAddress
	}
	return ""
}

func (x *OutgoingTransferTx) GetToken() *ERC20Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *OutgoingTransferTx) GetFee() *ERC20Token {
	if x != nil {
		return x.Fee
	}
	return nil
}

// ERC20Token unique identifier for an Ethereum ERC20 token.
type ERC20Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Amount   string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ERC20Token) Reset() {
	*x = ERC20Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ERC20Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ERC20Token) ProtoMessage() {}

// Deprecated: Use ERC20Token.ProtoReflect.Descriptor instead.
func (*ERC20Token) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{8}
}

func (x *ERC20Token) GetContract() string {
	if x != nil {
		return x.Contract
	}
	return ""
}

func (x *ERC20Token) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// oracle_set_update_power_change_percent
//
// If power change between validators of CurrentOracleSet and latest oracle set
// request is > 10%
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GravityId                         string `protobuf:"bytes,1,opt,name=gravity_id,json=gravityId,proto3" json:"gravity_id,omitempty"`
	AverageBlockTime                  uint64 `protobuf:"varint,2,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	ExternalBatchTimeout              uint64 `protobuf:"varint,3,opt,name=external_batch_timeout,json=externalBatchTimeout,proto3" json:"external_batch_timeout,omitempty"`
	AverageExternalBlockTime          uint64 `protobuf:"varint,4,opt,name=average_external_block_time,json=averageExternalBlockTime,proto3" json:"average_external_block_time,omitempty"`
	SignedWindow                      uint64 `protobuf:"varint,5,opt,name=signed_window,json=signedWindow,proto3" json:"signed_window,omitempty"`
	SlashFraction                     []byte `protobuf:"bytes,6,opt,name=slash_fraction,json=slashFraction,proto3" json:"slash_fraction,omitempty"`
	OracleSetUpdatePowerChangePercent []byte `protobuf:"bytes,7,opt,name=oracle_set_update_power_change_percent,json=oracleSetUpdatePowerChangePercent,proto3" json:"oracle_set_update_power_change_percent,omitempty"`
	IbcTransferTimeoutHeight          uint64 `protobuf:"varint,8,opt,name=ibc_transfer_timeout_height,json=ibcTransferTimeoutHeight,proto3" json:"ibc_transfer_timeout_height,omitempty"`
	// Deprecated: after block 5713000
	Oracles               []string      `protobuf:"bytes,9,rep,name=oracles,proto3" json:"oracles,omitempty"`
	DelegateThreshold     *v1beta1.Coin `protobuf:"bytes,10,opt,name=delegate_threshold,json=delegateThreshold,proto3" json:"delegate_threshold,omitempty"`
	DelegateMultiple      int64         `protobuf:"varint,11,opt,name=delegate_multiple,json=delegateMultiple,proto3" json:"delegate_multiple,omitempty"`
	BridgeCallTimeout     uint64        `protobuf:"varint,12,opt,name=bridge_call_timeout,json=bridgeCallTimeout,proto3" json:"bridge_call_timeout,omitempty"`
	BridgeCallMaxGasLimit uint64        `protobuf:"varint,13,opt,name=bridge_call_max_gas_limit,json=bridgeCallMaxGasLimit,proto3" json:"bridge_call_max_gas_limit,omitempty"`
	// Deprecated: do not use
	EnableSendToExternalPending bool `protobuf:"varint,14,opt,name=enable_send_to_external_pending,json=enableSendToExternalPending,proto3" json:"enable_send_to_external_pending,omitempty"`
	// Deprecated: do not use
	EnableBridgeCallPending bool `protobuf:"varint,15,opt,name=enable_bridge_call_pending,json=enableBridgeCallPending,proto3" json:"enable_bridge_call_pending,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{9}
}

func (x *Params) GetGravityId() string {
	if x != nil {
		return x.GravityId
	}
	return ""
}

func (x *Params) GetAverageBlockTime() uint64 {
	if x != nil {
		return x.AverageBlockTime
	}
	return 0
}

func (x *Params) GetExternalBatchTimeout() uint64 {
	if x != nil {
		return x.ExternalBatchTimeout
	}
	return 0
}

func (x *Params) GetAverageExternalBlockTime() uint64 {
	if x != nil {
		return x.AverageExternalBlockTime
	}
	return 0
}

func (x *Params) GetSignedWindow() uint64 {
	if x != nil {
		return x.SignedWindow
	}
	return 0
}

func (x *Params) GetSlashFraction() []byte {
	if x != nil {
		return x.SlashFraction
	}
	return nil
}

func (x *Params) GetOracleSetUpdatePowerChangePercent() []byte {
	if x != nil {
		return x.OracleSetUpdatePowerChangePercent
	}
	return nil
}

func (x *Params) GetIbcTransferTimeoutHeight() uint64 {
	if x != nil {
		return x.IbcTransferTimeoutHeight
	}
	return 0
}

func (x *Params) GetOracles() []string {
	if x != nil {
		return x.Oracles
	}
	return nil
}

func (x *Params) GetDelegateThreshold() *v1beta1.Coin {
	if x != nil {
		return x.DelegateThreshold
	}
	return nil
}

func (x *Params) GetDelegateMultiple() int64 {
	if x != nil {
		return x.DelegateMultiple
	}
	return 0
}

func (x *Params) GetBridgeCallTimeout() uint64 {
	if x != nil {
		return x.BridgeCallTimeout
	}
	return 0
}

func (x *Params) GetBridgeCallMaxGasLimit() uint64 {
	if x != nil {
		return x.BridgeCallMaxGasLimit
	}
	return 0
}

func (x *Params) GetEnableSendToExternalPending() bool {
	if x != nil {
		return x.EnableSendToExternalPending
	}
	return false
}

func (x *Params) GetEnableBridgeCallPending() bool {
	if x != nil {
		return x.EnableBridgeCallPending
	}
	return false
}

type OutgoingBridgeCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender      string        `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Refund      string        `protobuf:"bytes,2,opt,name=refund,proto3" json:"refund,omitempty"`
	Tokens      []*ERC20Token `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`
	To          string        `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Data        string        `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Memo        string        `protobuf:"bytes,6,opt,name=memo,proto3" json:"memo,omitempty"`
	Nonce       uint64        `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Timeout     uint64        `protobuf:"varint,8,opt,name=timeout,proto3" json:"timeout,omitempty"`
	BlockHeight uint64        `protobuf:"varint,9,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	EventNonce  uint64        `protobuf:"varint,10,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
}

func (x *OutgoingBridgeCall) Reset() {
	*x = OutgoingBridgeCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutgoingBridgeCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutgoingBridgeCall) ProtoMessage() {}

// Deprecated: Use OutgoingBridgeCall.ProtoReflect.Descriptor instead.
func (*OutgoingBridgeCall) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP(), []int{10}
}

func (x *OutgoingBridgeCall) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *OutgoingBridgeCall) GetRefund() string {
	if x != nil {
		return x.Refund
	}
	return ""
}

func (x *OutgoingBridgeCall) GetTokens() []*ERC20Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *OutgoingBridgeCall) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *OutgoingBridgeCall) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *OutgoingBridgeCall) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *OutgoingBridgeCall) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *OutgoingBridgeCall) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *OutgoingBridgeCall) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *OutgoingBridgeCall) GetEventNonce() uint64 {
	if x != nil {
		return x.EventNonce
	}
	return 0
}

var File_fx_gravity_crosschain_v1_types_proto protoreflect.FileDescriptor

var file_fx_gravity_crosschain_v1_types_proto_rawDesc = []byte{
	0x0a, 0x24, 0x66, 0x78, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x06, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x54,
	0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22,
	0x52, 0x0a, 0x0f, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x70, 0x0a, 0x17, 0x4c, 0x61,
	0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x83, 0x01, 0x0a,
	0x0b, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x22, 0x87, 0x02, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x54,
	0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x50, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x78,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x65, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x22, 0xdf, 0x01, 0x0a,
	0x12, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40,
	0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3c, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x6d,
	0x0a, 0x0a, 0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9f, 0x07,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x58, 0x0a, 0x0e, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0d, 0x73, 0x6c, 0x61, 0x73,
	0x68, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x26, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x21, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x69, 0x62, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1e, 0x0a, 0x07, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x01, 0x52, 0x07, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x12,
	0x4e, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x11, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x2b, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x19,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x15, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x47, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x04, 0x80, 0xdc, 0x20, 0x00, 0x22,
	0xb4, 0x02, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x52, 0x43, 0x32, 0x30, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x2a, 0xe8, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x58, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54,
	0x4f, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47,
	0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x41,
	0x49, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47,
	0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x41, 0x49,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x06, 0x1a, 0x04, 0x88, 0xa3, 0x1e,
	0x00, 0x42, 0xe5, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x36, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x78, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x47, 0x43, 0xaa, 0x02,
	0x18, 0x46, 0x78, 0x2e, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x18, 0x46, 0x78, 0x5c, 0x47,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x5c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24, 0x46, 0x78, 0x5c, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x5c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x46, 0x78,
	0x3a, 0x3a, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x3a, 0x3a, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_fx_gravity_crosschain_v1_types_proto_rawDescOnce sync.Once
	file_fx_gravity_crosschain_v1_types_proto_rawDescData = file_fx_gravity_crosschain_v1_types_proto_rawDesc
)

func file_fx_gravity_crosschain_v1_types_proto_rawDescGZIP() []byte {
	file_fx_gravity_crosschain_v1_types_proto_rawDescOnce.Do(func() {
		file_fx_gravity_crosschain_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_fx_gravity_crosschain_v1_types_proto_rawDescData)
	})
	return file_fx_gravity_crosschain_v1_types_proto_rawDescData
}

var file_fx_gravity_crosschain_v1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fx_gravity_crosschain_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_fx_gravity_crosschain_v1_types_proto_goTypes = []interface{}{
	(ClaimType)(0),                  // 0: fx.gravity.crosschain.v1.ClaimType
	(*ProposalOracle)(nil),          // 1: fx.gravity.crosschain.v1.ProposalOracle
	(*Oracle)(nil),                  // 2: fx.gravity.crosschain.v1.Oracle
	(*BridgeValidator)(nil),         // 3: fx.gravity.crosschain.v1.BridgeValidator
	(*OracleSet)(nil),               // 4: fx.gravity.crosschain.v1.OracleSet
	(*LastObservedBlockHeight)(nil), // 5: fx.gravity.crosschain.v1.LastObservedBlockHeight
	(*Attestation)(nil),             // 6: fx.gravity.crosschain.v1.Attestation
	(*OutgoingTxBatch)(nil),         // 7: fx.gravity.crosschain.v1.OutgoingTxBatch
	(*OutgoingTransferTx)(nil),      // 8: fx.gravity.crosschain.v1.OutgoingTransferTx
	(*ERC20Token)(nil),              // 9: fx.gravity.crosschain.v1.ERC20Token
	(*Params)(nil),                  // 10: fx.gravity.crosschain.v1.Params
	(*OutgoingBridgeCall)(nil),      // 11: fx.gravity.crosschain.v1.OutgoingBridgeCall
	(*anypb.Any)(nil),               // 12: google.protobuf.Any
	(*v1beta1.Coin)(nil),            // 13: cosmos.base.v1beta1.Coin
}
var file_fx_gravity_crosschain_v1_types_proto_depIdxs = []int32{
	3,  // 0: fx.gravity.crosschain.v1.OracleSet.members:type_name -> fx.gravity.crosschain.v1.BridgeValidator
	12, // 1: fx.gravity.crosschain.v1.Attestation.claim:type_name -> google.protobuf.Any
	8,  // 2: fx.gravity.crosschain.v1.OutgoingTxBatch.transactions:type_name -> fx.gravity.crosschain.v1.OutgoingTransferTx
	9,  // 3: fx.gravity.crosschain.v1.OutgoingTransferTx.token:type_name -> fx.gravity.crosschain.v1.ERC20Token
	9,  // 4: fx.gravity.crosschain.v1.OutgoingTransferTx.fee:type_name -> fx.gravity.crosschain.v1.ERC20Token
	13, // 5: fx.gravity.crosschain.v1.Params.delegate_threshold:type_name -> cosmos.base.v1beta1.Coin
	9,  // 6: fx.gravity.crosschain.v1.OutgoingBridgeCall.tokens:type_name -> fx.gravity.crosschain.v1.ERC20Token
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_fx_gravity_crosschain_v1_types_proto_init() }
func file_fx_gravity_crosschain_v1_types_proto_init() {
	if File_fx_gravity_crosschain_v1_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fx_gravity_crosschain_v1_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalOracle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fx_gravity_crosschain_v1_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oracle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fx_gravity_crosschain_v1_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fx_gravity_crosschain_v1_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OracleSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fx_gravity_crosschain_v1_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastObservedBlockHeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fx_gravity_crosschain_v1_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fx_gravity_crosschain_v1_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutgoingTxBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fx_gravity_crosschain_v1_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutgoingTransferTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fx_gravity_crosschain_v1_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ERC20Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fx_gravity_crosschain_v1_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fx_gravity_crosschain_v1_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutgoingBridgeCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fx_gravity_crosschain_v1_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fx_gravity_crosschain_v1_types_proto_goTypes,
		DependencyIndexes: file_fx_gravity_crosschain_v1_types_proto_depIdxs,
		EnumInfos:         file_fx_gravity_crosschain_v1_types_proto_enumTypes,
		MessageInfos:      file_fx_gravity_crosschain_v1_types_proto_msgTypes,
	}.Build()
	File_fx_gravity_crosschain_v1_types_proto = out.File
	file_fx_gravity_crosschain_v1_types_proto_rawDesc = nil
	file_fx_gravity_crosschain_v1_types_proto_goTypes = nil
	file_fx_gravity_crosschain_v1_types_proto_depIdxs = nil
}
