// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package crosschainv1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_GenesisState_4_list)(nil)

type _GenesisState_4_list struct {
	list *[]*Oracle
}

func (x *_GenesisState_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Oracle)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Oracle)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_4_list) AppendMutable() protoreflect.Value {
	v := new(Oracle)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_4_list) NewElement() protoreflect.Value {
	v := new(Oracle)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_4_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_5_list)(nil)

type _GenesisState_5_list struct {
	list *[]*OracleSet
}

func (x *_GenesisState_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OracleSet)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OracleSet)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_5_list) AppendMutable() protoreflect.Value {
	v := new(OracleSet)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_5_list) NewElement() protoreflect.Value {
	v := new(OracleSet)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_6_list)(nil)

type _GenesisState_6_list struct {
	list *[]*OutgoingTransferTx
}

func (x *_GenesisState_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingTransferTx)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingTransferTx)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_6_list) AppendMutable() protoreflect.Value {
	v := new(OutgoingTransferTx)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_6_list) NewElement() protoreflect.Value {
	v := new(OutgoingTransferTx)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_7_list)(nil)

type _GenesisState_7_list struct {
	list *[]*OutgoingTxBatch
}

func (x *_GenesisState_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingTxBatch)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*OutgoingTxBatch)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_7_list) AppendMutable() protoreflect.Value {
	v := new(OutgoingTxBatch)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_7_list) NewElement() protoreflect.Value {
	v := new(OutgoingTxBatch)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_8_list)(nil)

type _GenesisState_8_list struct {
	list *[]*MsgOracleSetConfirm
}

func (x *_GenesisState_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgOracleSetConfirm)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgOracleSetConfirm)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_8_list) AppendMutable() protoreflect.Value {
	v := new(MsgOracleSetConfirm)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_8_list) NewElement() protoreflect.Value {
	v := new(MsgOracleSetConfirm)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_8_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_9_list)(nil)

type _GenesisState_9_list struct {
	list *[]*MsgConfirmBatch
}

func (x *_GenesisState_9_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_9_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_9_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgConfirmBatch)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_9_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*MsgConfirmBatch)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_9_list) AppendMutable() protoreflect.Value {
	v := new(MsgConfirmBatch)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_9_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_9_list) NewElement() protoreflect.Value {
	v := new(MsgConfirmBatch)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_9_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_GenesisState_10_list)(nil)

type _GenesisState_10_list struct {
	list *[]*Attestation
}

func (x *_GenesisState_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Attestation)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Attestation)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_10_list) AppendMutable() protoreflect.Value {
	v := new(Attestation)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_10_list) NewElement() protoreflect.Value {
	v := new(Attestation)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_10_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GenesisState                               protoreflect.MessageDescriptor
	fd_GenesisState_params                        protoreflect.FieldDescriptor
	fd_GenesisState_last_observed_event_nonce     protoreflect.FieldDescriptor
	fd_GenesisState_last_observed_block_height    protoreflect.FieldDescriptor
	fd_GenesisState_oracles                       protoreflect.FieldDescriptor
	fd_GenesisState_oracle_sets                   protoreflect.FieldDescriptor
	fd_GenesisState_unbatched_transfers           protoreflect.FieldDescriptor
	fd_GenesisState_batches                       protoreflect.FieldDescriptor
	fd_GenesisState_oracle_set_confirms           protoreflect.FieldDescriptor
	fd_GenesisState_batch_confirms                protoreflect.FieldDescriptor
	fd_GenesisState_attestations                  protoreflect.FieldDescriptor
	fd_GenesisState_proposal_oracle               protoreflect.FieldDescriptor
	fd_GenesisState_last_observed_oracle_set      protoreflect.FieldDescriptor
	fd_GenesisState_last_slashed_batch_block      protoreflect.FieldDescriptor
	fd_GenesisState_last_slashed_oracle_set_nonce protoreflect.FieldDescriptor
)

func init() {
	file_fx_gravity_crosschain_v1_genesis_proto_init()
	md_GenesisState = File_fx_gravity_crosschain_v1_genesis_proto.Messages().ByName("GenesisState")
	fd_GenesisState_params = md_GenesisState.Fields().ByName("params")
	fd_GenesisState_last_observed_event_nonce = md_GenesisState.Fields().ByName("last_observed_event_nonce")
	fd_GenesisState_last_observed_block_height = md_GenesisState.Fields().ByName("last_observed_block_height")
	fd_GenesisState_oracles = md_GenesisState.Fields().ByName("oracles")
	fd_GenesisState_oracle_sets = md_GenesisState.Fields().ByName("oracle_sets")
	fd_GenesisState_unbatched_transfers = md_GenesisState.Fields().ByName("unbatched_transfers")
	fd_GenesisState_batches = md_GenesisState.Fields().ByName("batches")
	fd_GenesisState_oracle_set_confirms = md_GenesisState.Fields().ByName("oracle_set_confirms")
	fd_GenesisState_batch_confirms = md_GenesisState.Fields().ByName("batch_confirms")
	fd_GenesisState_attestations = md_GenesisState.Fields().ByName("attestations")
	fd_GenesisState_proposal_oracle = md_GenesisState.Fields().ByName("proposal_oracle")
	fd_GenesisState_last_observed_oracle_set = md_GenesisState.Fields().ByName("last_observed_oracle_set")
	fd_GenesisState_last_slashed_batch_block = md_GenesisState.Fields().ByName("last_slashed_batch_block")
	fd_GenesisState_last_slashed_oracle_set_nonce = md_GenesisState.Fields().ByName("last_slashed_oracle_set_nonce")
}

var _ protoreflect.Message = (*fastReflection_GenesisState)(nil)

type fastReflection_GenesisState GenesisState

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisState)(x)
}

func (x *GenesisState) slowProtoReflect() protoreflect.Message {
	mi := &file_fx_gravity_crosschain_v1_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisState_messageType fastReflection_GenesisState_messageType
var _ protoreflect.MessageType = fastReflection_GenesisState_messageType{}

type fastReflection_GenesisState_messageType struct{}

func (x fastReflection_GenesisState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisState)(nil)
}
func (x fastReflection_GenesisState_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}
func (x fastReflection_GenesisState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisState) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisState) Type() protoreflect.MessageType {
	return _fastReflection_GenesisState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisState) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisState) Interface() protoreflect.ProtoMessage {
	return (*GenesisState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Params != nil {
		value := protoreflect.ValueOfMessage(x.Params.ProtoReflect())
		if !f(fd_GenesisState_params, value) {
			return
		}
	}
	if x.LastObservedEventNonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastObservedEventNonce)
		if !f(fd_GenesisState_last_observed_event_nonce, value) {
			return
		}
	}
	if x.LastObservedBlockHeight != nil {
		value := protoreflect.ValueOfMessage(x.LastObservedBlockHeight.ProtoReflect())
		if !f(fd_GenesisState_last_observed_block_height, value) {
			return
		}
	}
	if len(x.Oracles) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_4_list{list: &x.Oracles})
		if !f(fd_GenesisState_oracles, value) {
			return
		}
	}
	if len(x.OracleSets) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_5_list{list: &x.OracleSets})
		if !f(fd_GenesisState_oracle_sets, value) {
			return
		}
	}
	if len(x.UnbatchedTransfers) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_6_list{list: &x.UnbatchedTransfers})
		if !f(fd_GenesisState_unbatched_transfers, value) {
			return
		}
	}
	if len(x.Batches) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_7_list{list: &x.Batches})
		if !f(fd_GenesisState_batches, value) {
			return
		}
	}
	if len(x.OracleSetConfirms) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_8_list{list: &x.OracleSetConfirms})
		if !f(fd_GenesisState_oracle_set_confirms, value) {
			return
		}
	}
	if len(x.BatchConfirms) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_9_list{list: &x.BatchConfirms})
		if !f(fd_GenesisState_batch_confirms, value) {
			return
		}
	}
	if len(x.Attestations) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_10_list{list: &x.Attestations})
		if !f(fd_GenesisState_attestations, value) {
			return
		}
	}
	if x.ProposalOracle != nil {
		value := protoreflect.ValueOfMessage(x.ProposalOracle.ProtoReflect())
		if !f(fd_GenesisState_proposal_oracle, value) {
			return
		}
	}
	if x.LastObservedOracleSet != nil {
		value := protoreflect.ValueOfMessage(x.LastObservedOracleSet.ProtoReflect())
		if !f(fd_GenesisState_last_observed_oracle_set, value) {
			return
		}
	}
	if x.LastSlashedBatchBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastSlashedBatchBlock)
		if !f(fd_GenesisState_last_slashed_batch_block, value) {
			return
		}
	}
	if x.LastSlashedOracleSetNonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastSlashedOracleSetNonce)
		if !f(fd_GenesisState_last_slashed_oracle_set_nonce, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.GenesisState.params":
		return x.Params != nil
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_event_nonce":
		return x.LastObservedEventNonce != uint64(0)
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_block_height":
		return x.LastObservedBlockHeight != nil
	case "fx.gravity.crosschain.v1.GenesisState.oracles":
		return len(x.Oracles) != 0
	case "fx.gravity.crosschain.v1.GenesisState.oracle_sets":
		return len(x.OracleSets) != 0
	case "fx.gravity.crosschain.v1.GenesisState.unbatched_transfers":
		return len(x.UnbatchedTransfers) != 0
	case "fx.gravity.crosschain.v1.GenesisState.batches":
		return len(x.Batches) != 0
	case "fx.gravity.crosschain.v1.GenesisState.oracle_set_confirms":
		return len(x.OracleSetConfirms) != 0
	case "fx.gravity.crosschain.v1.GenesisState.batch_confirms":
		return len(x.BatchConfirms) != 0
	case "fx.gravity.crosschain.v1.GenesisState.attestations":
		return len(x.Attestations) != 0
	case "fx.gravity.crosschain.v1.GenesisState.proposal_oracle":
		return x.ProposalOracle != nil
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_oracle_set":
		return x.LastObservedOracleSet != nil
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_batch_block":
		return x.LastSlashedBatchBlock != uint64(0)
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_oracle_set_nonce":
		return x.LastSlashedOracleSetNonce != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.GenesisState"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.GenesisState.params":
		x.Params = nil
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_event_nonce":
		x.LastObservedEventNonce = uint64(0)
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_block_height":
		x.LastObservedBlockHeight = nil
	case "fx.gravity.crosschain.v1.GenesisState.oracles":
		x.Oracles = nil
	case "fx.gravity.crosschain.v1.GenesisState.oracle_sets":
		x.OracleSets = nil
	case "fx.gravity.crosschain.v1.GenesisState.unbatched_transfers":
		x.UnbatchedTransfers = nil
	case "fx.gravity.crosschain.v1.GenesisState.batches":
		x.Batches = nil
	case "fx.gravity.crosschain.v1.GenesisState.oracle_set_confirms":
		x.OracleSetConfirms = nil
	case "fx.gravity.crosschain.v1.GenesisState.batch_confirms":
		x.BatchConfirms = nil
	case "fx.gravity.crosschain.v1.GenesisState.attestations":
		x.Attestations = nil
	case "fx.gravity.crosschain.v1.GenesisState.proposal_oracle":
		x.ProposalOracle = nil
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_oracle_set":
		x.LastObservedOracleSet = nil
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_batch_block":
		x.LastSlashedBatchBlock = uint64(0)
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_oracle_set_nonce":
		x.LastSlashedOracleSetNonce = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.GenesisState"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fx.gravity.crosschain.v1.GenesisState.params":
		value := x.Params
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_event_nonce":
		value := x.LastObservedEventNonce
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_block_height":
		value := x.LastObservedBlockHeight
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.oracles":
		if len(x.Oracles) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_4_list{})
		}
		listValue := &_GenesisState_4_list{list: &x.Oracles}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.GenesisState.oracle_sets":
		if len(x.OracleSets) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_5_list{})
		}
		listValue := &_GenesisState_5_list{list: &x.OracleSets}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.GenesisState.unbatched_transfers":
		if len(x.UnbatchedTransfers) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_6_list{})
		}
		listValue := &_GenesisState_6_list{list: &x.UnbatchedTransfers}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.GenesisState.batches":
		if len(x.Batches) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_7_list{})
		}
		listValue := &_GenesisState_7_list{list: &x.Batches}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.GenesisState.oracle_set_confirms":
		if len(x.OracleSetConfirms) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_8_list{})
		}
		listValue := &_GenesisState_8_list{list: &x.OracleSetConfirms}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.GenesisState.batch_confirms":
		if len(x.BatchConfirms) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_9_list{})
		}
		listValue := &_GenesisState_9_list{list: &x.BatchConfirms}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.GenesisState.attestations":
		if len(x.Attestations) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_10_list{})
		}
		listValue := &_GenesisState_10_list{list: &x.Attestations}
		return protoreflect.ValueOfList(listValue)
	case "fx.gravity.crosschain.v1.GenesisState.proposal_oracle":
		value := x.ProposalOracle
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_oracle_set":
		value := x.LastObservedOracleSet
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_batch_block":
		value := x.LastSlashedBatchBlock
		return protoreflect.ValueOfUint64(value)
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_oracle_set_nonce":
		value := x.LastSlashedOracleSetNonce
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.GenesisState"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.GenesisState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.GenesisState.params":
		x.Params = value.Message().Interface().(*Params)
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_event_nonce":
		x.LastObservedEventNonce = value.Uint()
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_block_height":
		x.LastObservedBlockHeight = value.Message().Interface().(*LastObservedBlockHeight)
	case "fx.gravity.crosschain.v1.GenesisState.oracles":
		lv := value.List()
		clv := lv.(*_GenesisState_4_list)
		x.Oracles = *clv.list
	case "fx.gravity.crosschain.v1.GenesisState.oracle_sets":
		lv := value.List()
		clv := lv.(*_GenesisState_5_list)
		x.OracleSets = *clv.list
	case "fx.gravity.crosschain.v1.GenesisState.unbatched_transfers":
		lv := value.List()
		clv := lv.(*_GenesisState_6_list)
		x.UnbatchedTransfers = *clv.list
	case "fx.gravity.crosschain.v1.GenesisState.batches":
		lv := value.List()
		clv := lv.(*_GenesisState_7_list)
		x.Batches = *clv.list
	case "fx.gravity.crosschain.v1.GenesisState.oracle_set_confirms":
		lv := value.List()
		clv := lv.(*_GenesisState_8_list)
		x.OracleSetConfirms = *clv.list
	case "fx.gravity.crosschain.v1.GenesisState.batch_confirms":
		lv := value.List()
		clv := lv.(*_GenesisState_9_list)
		x.BatchConfirms = *clv.list
	case "fx.gravity.crosschain.v1.GenesisState.attestations":
		lv := value.List()
		clv := lv.(*_GenesisState_10_list)
		x.Attestations = *clv.list
	case "fx.gravity.crosschain.v1.GenesisState.proposal_oracle":
		x.ProposalOracle = value.Message().Interface().(*ProposalOracle)
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_oracle_set":
		x.LastObservedOracleSet = value.Message().Interface().(*OracleSet)
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_batch_block":
		x.LastSlashedBatchBlock = value.Uint()
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_oracle_set_nonce":
		x.LastSlashedOracleSetNonce = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.GenesisState"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.GenesisState.params":
		if x.Params == nil {
			x.Params = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Params.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_block_height":
		if x.LastObservedBlockHeight == nil {
			x.LastObservedBlockHeight = new(LastObservedBlockHeight)
		}
		return protoreflect.ValueOfMessage(x.LastObservedBlockHeight.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.oracles":
		if x.Oracles == nil {
			x.Oracles = []*Oracle{}
		}
		value := &_GenesisState_4_list{list: &x.Oracles}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.GenesisState.oracle_sets":
		if x.OracleSets == nil {
			x.OracleSets = []*OracleSet{}
		}
		value := &_GenesisState_5_list{list: &x.OracleSets}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.GenesisState.unbatched_transfers":
		if x.UnbatchedTransfers == nil {
			x.UnbatchedTransfers = []*OutgoingTransferTx{}
		}
		value := &_GenesisState_6_list{list: &x.UnbatchedTransfers}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.GenesisState.batches":
		if x.Batches == nil {
			x.Batches = []*OutgoingTxBatch{}
		}
		value := &_GenesisState_7_list{list: &x.Batches}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.GenesisState.oracle_set_confirms":
		if x.OracleSetConfirms == nil {
			x.OracleSetConfirms = []*MsgOracleSetConfirm{}
		}
		value := &_GenesisState_8_list{list: &x.OracleSetConfirms}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.GenesisState.batch_confirms":
		if x.BatchConfirms == nil {
			x.BatchConfirms = []*MsgConfirmBatch{}
		}
		value := &_GenesisState_9_list{list: &x.BatchConfirms}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.GenesisState.attestations":
		if x.Attestations == nil {
			x.Attestations = []*Attestation{}
		}
		value := &_GenesisState_10_list{list: &x.Attestations}
		return protoreflect.ValueOfList(value)
	case "fx.gravity.crosschain.v1.GenesisState.proposal_oracle":
		if x.ProposalOracle == nil {
			x.ProposalOracle = new(ProposalOracle)
		}
		return protoreflect.ValueOfMessage(x.ProposalOracle.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_oracle_set":
		if x.LastObservedOracleSet == nil {
			x.LastObservedOracleSet = new(OracleSet)
		}
		return protoreflect.ValueOfMessage(x.LastObservedOracleSet.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_event_nonce":
		panic(fmt.Errorf("field last_observed_event_nonce of message fx.gravity.crosschain.v1.GenesisState is not mutable"))
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_batch_block":
		panic(fmt.Errorf("field last_slashed_batch_block of message fx.gravity.crosschain.v1.GenesisState is not mutable"))
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_oracle_set_nonce":
		panic(fmt.Errorf("field last_slashed_oracle_set_nonce of message fx.gravity.crosschain.v1.GenesisState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.GenesisState"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fx.gravity.crosschain.v1.GenesisState.params":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_event_nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_block_height":
		m := new(LastObservedBlockHeight)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.oracles":
		list := []*Oracle{}
		return protoreflect.ValueOfList(&_GenesisState_4_list{list: &list})
	case "fx.gravity.crosschain.v1.GenesisState.oracle_sets":
		list := []*OracleSet{}
		return protoreflect.ValueOfList(&_GenesisState_5_list{list: &list})
	case "fx.gravity.crosschain.v1.GenesisState.unbatched_transfers":
		list := []*OutgoingTransferTx{}
		return protoreflect.ValueOfList(&_GenesisState_6_list{list: &list})
	case "fx.gravity.crosschain.v1.GenesisState.batches":
		list := []*OutgoingTxBatch{}
		return protoreflect.ValueOfList(&_GenesisState_7_list{list: &list})
	case "fx.gravity.crosschain.v1.GenesisState.oracle_set_confirms":
		list := []*MsgOracleSetConfirm{}
		return protoreflect.ValueOfList(&_GenesisState_8_list{list: &list})
	case "fx.gravity.crosschain.v1.GenesisState.batch_confirms":
		list := []*MsgConfirmBatch{}
		return protoreflect.ValueOfList(&_GenesisState_9_list{list: &list})
	case "fx.gravity.crosschain.v1.GenesisState.attestations":
		list := []*Attestation{}
		return protoreflect.ValueOfList(&_GenesisState_10_list{list: &list})
	case "fx.gravity.crosschain.v1.GenesisState.proposal_oracle":
		m := new(ProposalOracle)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.last_observed_oracle_set":
		m := new(OracleSet)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_batch_block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fx.gravity.crosschain.v1.GenesisState.last_slashed_oracle_set_nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fx.gravity.crosschain.v1.GenesisState"))
		}
		panic(fmt.Errorf("message fx.gravity.crosschain.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fx.gravity.crosschain.v1.GenesisState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Params != nil {
			l = options.Size(x.Params)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastObservedEventNonce != 0 {
			n += 1 + runtime.Sov(uint64(x.LastObservedEventNonce))
		}
		if x.LastObservedBlockHeight != nil {
			l = options.Size(x.LastObservedBlockHeight)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Oracles) > 0 {
			for _, e := range x.Oracles {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.OracleSets) > 0 {
			for _, e := range x.OracleSets {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.UnbatchedTransfers) > 0 {
			for _, e := range x.UnbatchedTransfers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Batches) > 0 {
			for _, e := range x.Batches {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.OracleSetConfirms) > 0 {
			for _, e := range x.OracleSetConfirms {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.BatchConfirms) > 0 {
			for _, e := range x.BatchConfirms {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Attestations) > 0 {
			for _, e := range x.Attestations {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.ProposalOracle != nil {
			l = options.Size(x.ProposalOracle)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastObservedOracleSet != nil {
			l = options.Size(x.LastObservedOracleSet)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastSlashedBatchBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.LastSlashedBatchBlock))
		}
		if x.LastSlashedOracleSetNonce != 0 {
			n += 1 + runtime.Sov(uint64(x.LastSlashedOracleSetNonce))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastSlashedOracleSetNonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastSlashedOracleSetNonce))
			i--
			dAtA[i] = 0x70
		}
		if x.LastSlashedBatchBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastSlashedBatchBlock))
			i--
			dAtA[i] = 0x68
		}
		if x.LastObservedOracleSet != nil {
			encoded, err := options.Marshal(x.LastObservedOracleSet)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if x.ProposalOracle != nil {
			encoded, err := options.Marshal(x.ProposalOracle)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.Attestations) > 0 {
			for iNdEx := len(x.Attestations) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Attestations[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.BatchConfirms) > 0 {
			for iNdEx := len(x.BatchConfirms) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BatchConfirms[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x4a
			}
		}
		if len(x.OracleSetConfirms) > 0 {
			for iNdEx := len(x.OracleSetConfirms) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OracleSetConfirms[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.Batches) > 0 {
			for iNdEx := len(x.Batches) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Batches[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.UnbatchedTransfers) > 0 {
			for iNdEx := len(x.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.UnbatchedTransfers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.OracleSets) > 0 {
			for iNdEx := len(x.OracleSets) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.OracleSets[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.Oracles) > 0 {
			for iNdEx := len(x.Oracles) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Oracles[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x22
			}
		}
		if x.LastObservedBlockHeight != nil {
			encoded, err := options.Marshal(x.LastObservedBlockHeight)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.LastObservedEventNonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastObservedEventNonce))
			i--
			dAtA[i] = 0x10
		}
		if x.Params != nil {
			encoded, err := options.Marshal(x.Params)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Params == nil {
					x.Params = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Params); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastObservedEventNonce", wireType)
				}
				x.LastObservedEventNonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastObservedEventNonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastObservedBlockHeight", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastObservedBlockHeight == nil {
					x.LastObservedBlockHeight = &LastObservedBlockHeight{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastObservedBlockHeight); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Oracles = append(x.Oracles, &Oracle{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Oracles[len(x.Oracles)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleSets", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OracleSets = append(x.OracleSets, &OracleSet{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OracleSets[len(x.OracleSets)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UnbatchedTransfers = append(x.UnbatchedTransfers, &OutgoingTransferTx{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UnbatchedTransfers[len(x.UnbatchedTransfers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Batches = append(x.Batches, &OutgoingTxBatch{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Batches[len(x.Batches)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleSetConfirms", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OracleSetConfirms = append(x.OracleSetConfirms, &MsgOracleSetConfirm{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OracleSetConfirms[len(x.OracleSetConfirms)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BatchConfirms", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BatchConfirms = append(x.BatchConfirms, &MsgConfirmBatch{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BatchConfirms[len(x.BatchConfirms)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Attestations = append(x.Attestations, &Attestation{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Attestations[len(x.Attestations)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProposalOracle", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ProposalOracle == nil {
					x.ProposalOracle = &ProposalOracle{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ProposalOracle); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastObservedOracleSet", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastObservedOracleSet == nil {
					x.LastObservedOracleSet = &OracleSet{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastObservedOracleSet); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastSlashedBatchBlock", wireType)
				}
				x.LastSlashedBatchBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastSlashedBatchBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastSlashedOracleSetNonce", wireType)
				}
				x.LastSlashedOracleSetNonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastSlashedOracleSetNonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: fx/gravity/crosschain/v1/genesis.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GenesisState struct
type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params                    *Params                  `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	LastObservedEventNonce    uint64                   `protobuf:"varint,2,opt,name=last_observed_event_nonce,json=lastObservedEventNonce,proto3" json:"last_observed_event_nonce,omitempty"`
	LastObservedBlockHeight   *LastObservedBlockHeight `protobuf:"bytes,3,opt,name=last_observed_block_height,json=lastObservedBlockHeight,proto3" json:"last_observed_block_height,omitempty"`
	Oracles                   []*Oracle                `protobuf:"bytes,4,rep,name=oracles,proto3" json:"oracles,omitempty"`
	OracleSets                []*OracleSet             `protobuf:"bytes,5,rep,name=oracle_sets,json=oracleSets,proto3" json:"oracle_sets,omitempty"`
	UnbatchedTransfers        []*OutgoingTransferTx    `protobuf:"bytes,6,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers,omitempty"`
	Batches                   []*OutgoingTxBatch       `protobuf:"bytes,7,rep,name=batches,proto3" json:"batches,omitempty"`
	OracleSetConfirms         []*MsgOracleSetConfirm   `protobuf:"bytes,8,rep,name=oracle_set_confirms,json=oracleSetConfirms,proto3" json:"oracle_set_confirms,omitempty"`
	BatchConfirms             []*MsgConfirmBatch       `protobuf:"bytes,9,rep,name=batch_confirms,json=batchConfirms,proto3" json:"batch_confirms,omitempty"`
	Attestations              []*Attestation           `protobuf:"bytes,10,rep,name=attestations,proto3" json:"attestations,omitempty"`
	ProposalOracle            *ProposalOracle          `protobuf:"bytes,11,opt,name=proposal_oracle,json=proposalOracle,proto3" json:"proposal_oracle,omitempty"`
	LastObservedOracleSet     *OracleSet               `protobuf:"bytes,12,opt,name=last_observed_oracle_set,json=lastObservedOracleSet,proto3" json:"last_observed_oracle_set,omitempty"`
	LastSlashedBatchBlock     uint64                   `protobuf:"varint,13,opt,name=last_slashed_batch_block,json=lastSlashedBatchBlock,proto3" json:"last_slashed_batch_block,omitempty"`
	LastSlashedOracleSetNonce uint64                   `protobuf:"varint,14,opt,name=last_slashed_oracle_set_nonce,json=lastSlashedOracleSetNonce,proto3" json:"last_slashed_oracle_set_nonce,omitempty"`
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fx_gravity_crosschain_v1_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_fx_gravity_crosschain_v1_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *GenesisState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GenesisState) GetLastObservedEventNonce() uint64 {
	if x != nil {
		return x.LastObservedEventNonce
	}
	return 0
}

func (x *GenesisState) GetLastObservedBlockHeight() *LastObservedBlockHeight {
	if x != nil {
		return x.LastObservedBlockHeight
	}
	return nil
}

func (x *GenesisState) GetOracles() []*Oracle {
	if x != nil {
		return x.Oracles
	}
	return nil
}

func (x *GenesisState) GetOracleSets() []*OracleSet {
	if x != nil {
		return x.OracleSets
	}
	return nil
}

func (x *GenesisState) GetUnbatchedTransfers() []*OutgoingTransferTx {
	if x != nil {
		return x.UnbatchedTransfers
	}
	return nil
}

func (x *GenesisState) GetBatches() []*OutgoingTxBatch {
	if x != nil {
		return x.Batches
	}
	return nil
}

func (x *GenesisState) GetOracleSetConfirms() []*MsgOracleSetConfirm {
	if x != nil {
		return x.OracleSetConfirms
	}
	return nil
}

func (x *GenesisState) GetBatchConfirms() []*MsgConfirmBatch {
	if x != nil {
		return x.BatchConfirms
	}
	return nil
}

func (x *GenesisState) GetAttestations() []*Attestation {
	if x != nil {
		return x.Attestations
	}
	return nil
}

func (x *GenesisState) GetProposalOracle() *ProposalOracle {
	if x != nil {
		return x.ProposalOracle
	}
	return nil
}

func (x *GenesisState) GetLastObservedOracleSet() *OracleSet {
	if x != nil {
		return x.LastObservedOracleSet
	}
	return nil
}

func (x *GenesisState) GetLastSlashedBatchBlock() uint64 {
	if x != nil {
		return x.LastSlashedBatchBlock
	}
	return 0
}

func (x *GenesisState) GetLastSlashedOracleSetNonce() uint64 {
	if x != nil {
		return x.LastSlashedOracleSetNonce
	}
	return 0
}

var File_fx_gravity_crosschain_v1_genesis_proto protoreflect.FileDescriptor

var file_fx_gravity_crosschain_v1_genesis_proto_rawDesc = []byte{
	0x0a, 0x26, 0x66, 0x78, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x1a, 0x21, 0x66, 0x78, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x78, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x66, 0x78, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67,
	0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x83, 0x09, 0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x74, 0x0a,
	0x1a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x73,
	0x74, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x78, 0x2e,
	0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x73, 0x12, 0x63, 0x0a, 0x13, 0x75, 0x6e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x78, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x12, 0x75, 0x6e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x54, 0x78, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x63, 0x0a, 0x13, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x4f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x11, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x12, 0x56, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x12, 0x4f,
	0x0a, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x57, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x78, 0x2e, 0x67, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x66, 0x78, 0x2e,
	0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x6c,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x42, 0xf8, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x2e,
	0x66, 0x78, 0x2e, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x75, 0x6e, 0x64, 0x69, 0x61, 0x69, 0x2f, 0x66, 0x78, 0x2d,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x78, 0x2f, 0x67,
	0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x46, 0x47, 0x43, 0xaa, 0x02, 0x18, 0x46, 0x78, 0x2e, 0x47, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x18, 0x46, 0x78, 0x5c, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x5c,
	0x43, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x24,
	0x46, 0x78, 0x5c, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x5c, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1b, 0x46, 0x78, 0x3a, 0x3a, 0x47, 0x72, 0x61, 0x76, 0x69,
	0x74, 0x79, 0x3a, 0x3a, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fx_gravity_crosschain_v1_genesis_proto_rawDescOnce sync.Once
	file_fx_gravity_crosschain_v1_genesis_proto_rawDescData = file_fx_gravity_crosschain_v1_genesis_proto_rawDesc
)

func file_fx_gravity_crosschain_v1_genesis_proto_rawDescGZIP() []byte {
	file_fx_gravity_crosschain_v1_genesis_proto_rawDescOnce.Do(func() {
		file_fx_gravity_crosschain_v1_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_fx_gravity_crosschain_v1_genesis_proto_rawDescData)
	})
	return file_fx_gravity_crosschain_v1_genesis_proto_rawDescData
}

var file_fx_gravity_crosschain_v1_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_fx_gravity_crosschain_v1_genesis_proto_goTypes = []interface{}{
	(*GenesisState)(nil),            // 0: fx.gravity.crosschain.v1.GenesisState
	(*Params)(nil),                  // 1: fx.gravity.crosschain.v1.Params
	(*LastObservedBlockHeight)(nil), // 2: fx.gravity.crosschain.v1.LastObservedBlockHeight
	(*Oracle)(nil),                  // 3: fx.gravity.crosschain.v1.Oracle
	(*OracleSet)(nil),               // 4: fx.gravity.crosschain.v1.OracleSet
	(*OutgoingTransferTx)(nil),      // 5: fx.gravity.crosschain.v1.OutgoingTransferTx
	(*OutgoingTxBatch)(nil),         // 6: fx.gravity.crosschain.v1.OutgoingTxBatch
	(*MsgOracleSetConfirm)(nil),     // 7: fx.gravity.crosschain.v1.MsgOracleSetConfirm
	(*MsgConfirmBatch)(nil),         // 8: fx.gravity.crosschain.v1.MsgConfirmBatch
	(*Attestation)(nil),             // 9: fx.gravity.crosschain.v1.Attestation
	(*ProposalOracle)(nil),          // 10: fx.gravity.crosschain.v1.ProposalOracle
}
var file_fx_gravity_crosschain_v1_genesis_proto_depIdxs = []int32{
	1,  // 0: fx.gravity.crosschain.v1.GenesisState.params:type_name -> fx.gravity.crosschain.v1.Params
	2,  // 1: fx.gravity.crosschain.v1.GenesisState.last_observed_block_height:type_name -> fx.gravity.crosschain.v1.LastObservedBlockHeight
	3,  // 2: fx.gravity.crosschain.v1.GenesisState.oracles:type_name -> fx.gravity.crosschain.v1.Oracle
	4,  // 3: fx.gravity.crosschain.v1.GenesisState.oracle_sets:type_name -> fx.gravity.crosschain.v1.OracleSet
	5,  // 4: fx.gravity.crosschain.v1.GenesisState.unbatched_transfers:type_name -> fx.gravity.crosschain.v1.OutgoingTransferTx
	6,  // 5: fx.gravity.crosschain.v1.GenesisState.batches:type_name -> fx.gravity.crosschain.v1.OutgoingTxBatch
	7,  // 6: fx.gravity.crosschain.v1.GenesisState.oracle_set_confirms:type_name -> fx.gravity.crosschain.v1.MsgOracleSetConfirm
	8,  // 7: fx.gravity.crosschain.v1.GenesisState.batch_confirms:type_name -> fx.gravity.crosschain.v1.MsgConfirmBatch
	9,  // 8: fx.gravity.crosschain.v1.GenesisState.attestations:type_name -> fx.gravity.crosschain.v1.Attestation
	10, // 9: fx.gravity.crosschain.v1.GenesisState.proposal_oracle:type_name -> fx.gravity.crosschain.v1.ProposalOracle
	4,  // 10: fx.gravity.crosschain.v1.GenesisState.last_observed_oracle_set:type_name -> fx.gravity.crosschain.v1.OracleSet
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_fx_gravity_crosschain_v1_genesis_proto_init() }
func file_fx_gravity_crosschain_v1_genesis_proto_init() {
	if File_fx_gravity_crosschain_v1_genesis_proto != nil {
		return
	}
	file_fx_gravity_crosschain_v1_tx_proto_init()
	file_fx_gravity_crosschain_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_fx_gravity_crosschain_v1_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fx_gravity_crosschain_v1_genesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fx_gravity_crosschain_v1_genesis_proto_goTypes,
		DependencyIndexes: file_fx_gravity_crosschain_v1_genesis_proto_depIdxs,
		MessageInfos:      file_fx_gravity_crosschain_v1_genesis_proto_msgTypes,
	}.Build()
	File_fx_gravity_crosschain_v1_genesis_proto = out.File
	file_fx_gravity_crosschain_v1_genesis_proto_rawDesc = nil
	file_fx_gravity_crosschain_v1_genesis_proto_goTypes = nil
	file_fx_gravity_crosschain_v1_genesis_proto_depIdxs = nil
}
