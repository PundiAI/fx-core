// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethermint/evm/v1/evm_proposal_testnet.proto

package legacy

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Deprecated: Do not use.
type InitEvmParamsProposal struct {
	Title           string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description     string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	EvmParams       *EVMParams       `protobuf:"bytes,3,opt,name=evm_params,json=evmParams,proto3" json:"evm_params,omitempty"`
	FeemarketParams *FeemarketParams `protobuf:"bytes,4,opt,name=feemarket_params,json=feemarketParams,proto3" json:"feemarket_params,omitempty"`
}

func (m *InitEvmParamsProposal) Reset()      { *m = InitEvmParamsProposal{} }
func (*InitEvmParamsProposal) ProtoMessage() {}
func (*InitEvmParamsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_3abe68b8de0c92e9, []int{0}
}
func (m *InitEvmParamsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitEvmParamsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitEvmParamsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitEvmParamsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitEvmParamsProposal.Merge(m, src)
}
func (m *InitEvmParamsProposal) XXX_Size() int {
	return m.Size()
}
func (m *InitEvmParamsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_InitEvmParamsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_InitEvmParamsProposal proto.InternalMessageInfo

// Deprecated: Do not use.
type EVMParams struct {
	EvmDenom     string         `protobuf:"bytes,1,opt,name=evm_denom,json=evmDenom,proto3" json:"evm_denom,omitempty" yaml:"evm_denom"`
	EnableCreate bool           `protobuf:"varint,2,opt,name=enable_create,json=enableCreate,proto3" json:"enable_create,omitempty" yaml:"enable_create"`
	EnableCall   bool           `protobuf:"varint,3,opt,name=enable_call,json=enableCall,proto3" json:"enable_call,omitempty" yaml:"enable_call"`
	ExtraEIPs    []int64        `protobuf:"varint,4,rep,packed,name=extra_eips,json=extraEips,proto3" json:"extra_eips,omitempty" yaml:"extra_eips"`
	ChainConfig  EVMChainConfig `protobuf:"bytes,5,opt,name=chain_config,json=chainConfig,proto3" json:"chain_config" yaml:"chain_config"`
}

func (m *EVMParams) Reset()         { *m = EVMParams{} }
func (m *EVMParams) String() string { return proto.CompactTextString(m) }
func (*EVMParams) ProtoMessage()    {}
func (*EVMParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3abe68b8de0c92e9, []int{1}
}
func (m *EVMParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EVMParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EVMParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EVMParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVMParams.Merge(m, src)
}
func (m *EVMParams) XXX_Size() int {
	return m.Size()
}
func (m *EVMParams) XXX_DiscardUnknown() {
	xxx_messageInfo_EVMParams.DiscardUnknown(m)
}

var xxx_messageInfo_EVMParams proto.InternalMessageInfo

func (m *EVMParams) GetEvmDenom() string {
	if m != nil {
		return m.EvmDenom
	}
	return ""
}

func (m *EVMParams) GetEnableCreate() bool {
	if m != nil {
		return m.EnableCreate
	}
	return false
}

func (m *EVMParams) GetEnableCall() bool {
	if m != nil {
		return m.EnableCall
	}
	return false
}

func (m *EVMParams) GetExtraEIPs() []int64 {
	if m != nil {
		return m.ExtraEIPs
	}
	return nil
}

func (m *EVMParams) GetChainConfig() EVMChainConfig {
	if m != nil {
		return m.ChainConfig
	}
	return EVMChainConfig{}
}

// Deprecated: Do not use.
type EVMChainConfig struct {
	HomesteadBlock      *cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=homestead_block,json=homesteadBlock,proto3,customtype=cosmossdk.io/math.Int" json:"homestead_block,omitempty" yaml:"homestead_block"`
	DAOForkBlock        *cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=dao_fork_block,json=daoForkBlock,proto3,customtype=cosmossdk.io/math.Int" json:"dao_fork_block,omitempty" yaml:"dao_fork_block"`
	DAOForkSupport      bool                   `protobuf:"varint,3,opt,name=dao_fork_support,json=daoForkSupport,proto3" json:"dao_fork_support,omitempty" yaml:"dao_fork_support"`
	EIP150Block         *cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=eip150_block,json=eip150Block,proto3,customtype=cosmossdk.io/math.Int" json:"eip150_block,omitempty" yaml:"eip150_block"`
	EIP150Hash          string                 `protobuf:"bytes,5,opt,name=eip150_hash,json=eip150Hash,proto3" json:"eip150_hash,omitempty" yaml:"byzantium_block"`
	EIP155Block         *cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=eip155_block,json=eip155Block,proto3,customtype=cosmossdk.io/math.Int" json:"eip155_block,omitempty" yaml:"eip155_block"`
	EIP158Block         *cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=eip158_block,json=eip158Block,proto3,customtype=cosmossdk.io/math.Int" json:"eip158_block,omitempty" yaml:"eip158_block"`
	ByzantiumBlock      *cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=byzantium_block,json=byzantiumBlock,proto3,customtype=cosmossdk.io/math.Int" json:"byzantium_block,omitempty" yaml:"byzantium_block"`
	ConstantinopleBlock *cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=constantinople_block,json=constantinopleBlock,proto3,customtype=cosmossdk.io/math.Int" json:"constantinople_block,omitempty" yaml:"constantinople_block"`
	PetersburgBlock     *cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=petersburg_block,json=petersburgBlock,proto3,customtype=cosmossdk.io/math.Int" json:"petersburg_block,omitempty" yaml:"petersburg_block"`
	IstanbulBlock       *cosmossdk_io_math.Int `protobuf:"bytes,11,opt,name=istanbul_block,json=istanbulBlock,proto3,customtype=cosmossdk.io/math.Int" json:"istanbul_block,omitempty" yaml:"istanbul_block"`
	MuirGlacierBlock    *cosmossdk_io_math.Int `protobuf:"bytes,12,opt,name=muir_glacier_block,json=muirGlacierBlock,proto3,customtype=cosmossdk.io/math.Int" json:"muir_glacier_block,omitempty" yaml:"muir_glacier_block"`
	BerlinBlock         *cosmossdk_io_math.Int `protobuf:"bytes,13,opt,name=berlin_block,json=berlinBlock,proto3,customtype=cosmossdk.io/math.Int" json:"berlin_block,omitempty" yaml:"berlin_block"`
	LondonBlock         *cosmossdk_io_math.Int `protobuf:"bytes,17,opt,name=london_block,json=londonBlock,proto3,customtype=cosmossdk.io/math.Int" json:"london_block,omitempty" yaml:"london_block"`
}

func (m *EVMChainConfig) Reset()         { *m = EVMChainConfig{} }
func (m *EVMChainConfig) String() string { return proto.CompactTextString(m) }
func (*EVMChainConfig) ProtoMessage()    {}
func (*EVMChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3abe68b8de0c92e9, []int{2}
}
func (m *EVMChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EVMChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EVMChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EVMChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EVMChainConfig.Merge(m, src)
}
func (m *EVMChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *EVMChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_EVMChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_EVMChainConfig proto.InternalMessageInfo

func (m *EVMChainConfig) GetDAOForkSupport() bool {
	if m != nil {
		return m.DAOForkSupport
	}
	return false
}

func (m *EVMChainConfig) GetEIP150Hash() string {
	if m != nil {
		return m.EIP150Hash
	}
	return ""
}

// Deprecated: Do not use.
type FeemarketParams struct {
	NoBaseFee                bool   `protobuf:"varint,1,opt,name=no_base_fee,json=noBaseFee,proto3" json:"no_base_fee,omitempty"`
	BaseFeeChangeDenominator uint32 `protobuf:"varint,2,opt,name=base_fee_change_denominator,json=baseFeeChangeDenominator,proto3" json:"base_fee_change_denominator,omitempty"`
	ElasticityMultiplier     uint32 `protobuf:"varint,3,opt,name=elasticity_multiplier,json=elasticityMultiplier,proto3" json:"elasticity_multiplier,omitempty"`
	InitialBaseFee           int64  `protobuf:"varint,4,opt,name=initial_base_fee,json=initialBaseFee,proto3" json:"initial_base_fee,omitempty"`
	EnableHeight             int64  `protobuf:"varint,5,opt,name=enable_height,json=enableHeight,proto3" json:"enable_height,omitempty"`
}

func (m *FeemarketParams) Reset()         { *m = FeemarketParams{} }
func (m *FeemarketParams) String() string { return proto.CompactTextString(m) }
func (*FeemarketParams) ProtoMessage()    {}
func (*FeemarketParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3abe68b8de0c92e9, []int{3}
}
func (m *FeemarketParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeemarketParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeemarketParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeemarketParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeemarketParams.Merge(m, src)
}
func (m *FeemarketParams) XXX_Size() int {
	return m.Size()
}
func (m *FeemarketParams) XXX_DiscardUnknown() {
	xxx_messageInfo_FeemarketParams.DiscardUnknown(m)
}

var xxx_messageInfo_FeemarketParams proto.InternalMessageInfo

func (m *FeemarketParams) GetNoBaseFee() bool {
	if m != nil {
		return m.NoBaseFee
	}
	return false
}

func (m *FeemarketParams) GetBaseFeeChangeDenominator() uint32 {
	if m != nil {
		return m.BaseFeeChangeDenominator
	}
	return 0
}

func (m *FeemarketParams) GetElasticityMultiplier() uint32 {
	if m != nil {
		return m.ElasticityMultiplier
	}
	return 0
}

func (m *FeemarketParams) GetInitialBaseFee() int64 {
	if m != nil {
		return m.InitialBaseFee
	}
	return 0
}

func (m *FeemarketParams) GetEnableHeight() int64 {
	if m != nil {
		return m.EnableHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*InitEvmParamsProposal)(nil), "ethermint.evm.v1.InitEvmParamsProposal")
	proto.RegisterType((*EVMParams)(nil), "ethermint.evm.v1.EVMParams")
	proto.RegisterType((*EVMChainConfig)(nil), "ethermint.evm.v1.EVMChainConfig")
	proto.RegisterType((*FeemarketParams)(nil), "ethermint.evm.v1.FeemarketParams")
}

func init() {
	proto.RegisterFile("ethermint/evm/v1/evm_proposal_testnet.proto", fileDescriptor_3abe68b8de0c92e9)
}

var fileDescriptor_3abe68b8de0c92e9 = []byte{
	// 1071 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x93, 0x6d, 0x77, 0x49, 0x26, 0xbf, 0xbc, 0xde, 0x74, 0x09, 0x54, 0x8a, 0x8b, 0x39,
	0x50, 0x09, 0x6d, 0xb2, 0xdd, 0x52, 0xa8, 0x2a, 0xad, 0x50, 0xd3, 0xa6, 0x6c, 0x2b, 0x56, 0x54,
	0xb3, 0x12, 0x08, 0x84, 0x64, 0xc6, 0xce, 0x24, 0x1e, 0x65, 0xec, 0xb1, 0xec, 0x49, 0xd8, 0xf0,
	0x17, 0x70, 0xe4, 0xc8, 0xb1, 0x7f, 0xce, 0x1e, 0xf7, 0x88, 0x40, 0xb2, 0x50, 0x7a, 0x80, 0x73,
	0xc4, 0x15, 0x09, 0x79, 0x66, 0xec, 0xfc, 0x68, 0x89, 0x7a, 0x6a, 0xde, 0x7b, 0xdf, 0xf7, 0xf9,
	0xbe, 0x19, 0x8f, 0x3d, 0x05, 0x1f, 0x63, 0xee, 0xe2, 0xd0, 0x23, 0x3e, 0x6f, 0xe3, 0xb1, 0xd7,
	0x1e, 0xef, 0x25, 0x7f, 0xac, 0x20, 0x64, 0x01, 0x8b, 0x10, 0xb5, 0x38, 0x8e, 0xb8, 0x8f, 0x79,
	0x2b, 0x08, 0x19, 0x67, 0xba, 0x96, 0x89, 0x5b, 0x78, 0xec, 0xb5, 0xc6, 0x7b, 0xef, 0xd7, 0x07,
	0x6c, 0xc0, 0x44, 0xb1, 0x9d, 0xfc, 0x92, 0x3a, 0xf3, 0xaf, 0x3c, 0xd8, 0x3a, 0xf7, 0x09, 0xef,
	0x8e, 0xbd, 0x4b, 0x14, 0x22, 0x2f, 0xba, 0x54, 0x3c, 0xbd, 0x0e, 0xee, 0x73, 0xc2, 0x29, 0x6e,
	0xe4, 0x77, 0xf2, 0xbb, 0x45, 0x28, 0x03, 0x7d, 0x07, 0x94, 0x7a, 0x38, 0x72, 0x42, 0x12, 0x70,
	0xc2, 0xfc, 0xc6, 0x3d, 0x51, 0x5b, 0x4c, 0xe9, 0x47, 0x00, 0x88, 0xb9, 0x04, 0xad, 0xb1, 0xb1,
	0x93, 0xdf, 0x2d, 0x3d, 0xdb, 0x6e, 0xad, 0x8e, 0xd3, 0xea, 0x7e, 0xfd, 0x52, 0x1a, 0xc2, 0x22,
	0x4e, 0xbd, 0xf5, 0x2f, 0x81, 0xd6, 0xc7, 0xd8, 0x43, 0xe1, 0x10, 0xf3, 0x94, 0xb0, 0x29, 0x08,
	0x1f, 0xdc, 0x24, 0x9c, 0xa5, 0x4a, 0xc5, 0xa9, 0xf5, 0x97, 0x13, 0x47, 0xe5, 0x9f, 0xaf, 0x8c,
	0xdc, 0xaf, 0x57, 0x46, 0xee, 0xef, 0x2b, 0x23, 0x67, 0xfe, 0x71, 0x0f, 0x14, 0x33, 0x53, 0x7d,
	0x0f, 0x24, 0xb6, 0x56, 0x0f, 0xfb, 0xcc, 0x93, 0x2b, 0xec, 0xd4, 0x67, 0xb1, 0xa1, 0x4d, 0x90,
	0x47, 0x8f, 0xcc, 0xac, 0x64, 0xc2, 0x02, 0x1e, 0x7b, 0xa7, 0xc9, 0x4f, 0xfd, 0x39, 0xa8, 0x60,
	0x1f, 0xd9, 0x14, 0x5b, 0x4e, 0x88, 0x11, 0xc7, 0x62, 0xf1, 0x85, 0x4e, 0x63, 0x16, 0x1b, 0x75,
	0xd5, 0xb6, 0x58, 0x36, 0x61, 0x59, 0xc6, 0x27, 0x22, 0xd4, 0x3f, 0x03, 0xa5, 0xb4, 0x8e, 0x28,
	0x15, 0x1b, 0x53, 0xe8, 0x3c, 0x9e, 0xc5, 0x86, 0xbe, 0xdc, 0x8c, 0x28, 0x35, 0x21, 0x50, 0xad,
	0x88, 0x52, 0xfd, 0x18, 0x00, 0xfc, 0x9a, 0x87, 0xc8, 0xc2, 0x24, 0x48, 0xb6, 0x63, 0x63, 0x77,
	0xa3, 0x63, 0x4e, 0x63, 0xa3, 0xd8, 0x4d, 0xb2, 0xdd, 0xf3, 0xcb, 0x68, 0x16, 0x1b, 0x0f, 0x15,
	0x24, 0x13, 0x9a, 0xb0, 0x28, 0x82, 0x2e, 0x09, 0x22, 0xfd, 0x07, 0x50, 0x76, 0x5c, 0x44, 0x7c,
	0xcb, 0x61, 0x7e, 0x9f, 0x0c, 0x1a, 0xf7, 0xc5, 0x9e, 0xee, 0xdc, 0xfa, 0x54, 0x4e, 0x12, 0xe1,
	0x89, 0xd0, 0x75, 0xb6, 0xdf, 0xc4, 0x46, 0x6e, 0x16, 0x1b, 0x8f, 0x24, 0x7d, 0x91, 0x61, 0xc2,
	0x92, 0x33, 0x57, 0x9a, 0xff, 0x02, 0x50, 0x5d, 0x6e, 0xd6, 0xbf, 0x07, 0x35, 0x97, 0x79, 0x38,
	0xe2, 0x18, 0xf5, 0x2c, 0x9b, 0x32, 0x67, 0xa8, 0x36, 0x7a, 0xff, 0xf7, 0xd8, 0xd8, 0x72, 0x58,
	0xe4, 0xb1, 0x28, 0xea, 0x0d, 0x5b, 0x84, 0xb5, 0x3d, 0xc4, 0xdd, 0xd6, 0xb9, 0xcf, 0x67, 0xb1,
	0xf1, 0x58, 0x5a, 0xad, 0x74, 0x9a, 0xb0, 0x9a, 0x65, 0x3a, 0x49, 0x42, 0x77, 0x41, 0xb5, 0x87,
	0x98, 0xd5, 0x67, 0xe1, 0x50, 0xc1, 0xc5, 0x59, 0xec, 0x74, 0xfe, 0x17, 0x3e, 0x8d, 0x8d, 0xf2,
	0xe9, 0xf1, 0x57, 0x67, 0x2c, 0x1c, 0x0a, 0xc4, 0x2c, 0x36, 0xb6, 0xa4, 0xd9, 0x32, 0xc8, 0x84,
	0xe5, 0x1e, 0x62, 0x99, 0x4c, 0xff, 0x06, 0x68, 0x99, 0x20, 0x1a, 0x05, 0x01, 0x0b, 0xb9, 0x7a,
	0x7a, 0x4f, 0xa6, 0xb1, 0x51, 0x55, 0xc8, 0x57, 0xb2, 0x32, 0x8b, 0x8d, 0x77, 0x57, 0xa0, 0xaa,
	0xc7, 0x84, 0x55, 0x85, 0x55, 0x52, 0xdd, 0x06, 0x65, 0x4c, 0x82, 0xbd, 0x83, 0xa7, 0x6a, 0x01,
	0x9b, 0x62, 0x01, 0x9f, 0xaf, 0x5b, 0x40, 0xa9, 0x7b, 0x7e, 0xb9, 0x77, 0xf0, 0x34, 0x9d, 0x5f,
	0x3d, 0x97, 0x45, 0x8a, 0x09, 0x4b, 0x32, 0x94, 0xc3, 0x9f, 0x03, 0x15, 0x5a, 0x2e, 0x8a, 0x5c,
	0xf1, 0xe0, 0x8b, 0x9d, 0xdd, 0x69, 0x6c, 0x00, 0x49, 0x7a, 0x81, 0x22, 0x77, 0xbe, 0xeb, 0xf6,
	0xe4, 0x27, 0xe4, 0x73, 0x32, 0xf2, 0x52, 0x16, 0x90, 0xcd, 0x89, 0x2a, 0x1b, 0xf7, 0x40, 0x8d,
	0xfb, 0xe0, 0xae, 0xe3, 0x1e, 0xdc, 0x36, 0xee, 0xc1, 0xf2, 0xb8, 0x52, 0x93, 0x79, 0x1c, 0x2a,
	0x8f, 0x77, 0xee, 0xea, 0x71, 0x78, 0x9b, 0xc7, 0xe1, 0xb2, 0x87, 0xd4, 0x24, 0xe7, 0x72, 0x65,
	0x9d, 0x8d, 0xc2, 0x9d, 0xcf, 0xe5, 0x8d, 0x1d, 0xaa, 0x66, 0x19, 0x49, 0x1f, 0x82, 0xba, 0xc3,
	0xfc, 0x88, 0x27, 0x39, 0x9f, 0x05, 0x14, 0x2b, 0x8b, 0xa2, 0xb0, 0x38, 0x5c, 0x67, 0xb1, 0xad,
	0xde, 0xb2, 0x5b, 0xda, 0x4d, 0xf8, 0x68, 0x39, 0x2d, 0xcd, 0x2c, 0xa0, 0x05, 0x98, 0xe3, 0x30,
	0xb2, 0x47, 0xe1, 0x40, 0x19, 0x01, 0x61, 0xf4, 0xc9, 0x3a, 0x23, 0x75, 0x42, 0x57, 0x5b, 0x4d,
	0x58, 0x9b, 0xa7, 0xa4, 0xc1, 0xb7, 0xa0, 0x4a, 0x12, 0x57, 0x7b, 0x44, 0x15, 0xbe, 0x24, 0xf0,
	0xcf, 0xd6, 0xe1, 0xd5, 0x5b, 0xb5, 0xdc, 0x68, 0xc2, 0x4a, 0x9a, 0x90, 0xe8, 0x1e, 0xd0, 0xbd,
	0x11, 0x09, 0xad, 0x01, 0x45, 0x0e, 0xc1, 0xa1, 0xc2, 0x97, 0x05, 0xfe, 0xd3, 0x75, 0xf8, 0xf7,
	0x24, 0xfe, 0x66, 0xb3, 0x09, 0xb5, 0x24, 0xf9, 0x85, 0xcc, 0x49, 0x97, 0x57, 0xa0, 0x6c, 0xe3,
	0x90, 0x12, 0x5f, 0xf1, 0x2b, 0x82, 0xff, 0x74, 0x1d, 0x5f, 0x9d, 0xa0, 0xc5, 0x36, 0x13, 0x96,
	0x64, 0x98, 0x41, 0x29, 0xf3, 0x7b, 0x2c, 0x85, 0x3e, 0xbc, 0x33, 0x74, 0xb1, 0xcd, 0x84, 0x25,
	0x19, 0x0a, 0xe8, 0xc5, 0x66, 0xa1, 0xaa, 0xd5, 0x2e, 0x36, 0x0b, 0x35, 0x4d, 0xbb, 0xd8, 0x2c,
	0x68, 0xda, 0x43, 0x58, 0x99, 0x30, 0xca, 0xac, 0xf1, 0xbe, 0x94, 0xc3, 0x12, 0xfe, 0x11, 0x45,
	0xea, 0xdc, 0xc1, 0xaa, 0x83, 0x38, 0xa2, 0x93, 0x88, 0x2b, 0xd6, 0x3f, 0x79, 0x50, 0x5b, 0xb9,
	0x10, 0xf5, 0x26, 0x28, 0xf9, 0xcc, 0xb2, 0x51, 0x84, 0xad, 0x3e, 0x96, 0xf7, 0x78, 0x01, 0x16,
	0x7d, 0xd6, 0x41, 0x11, 0x3e, 0xc3, 0x58, 0x7f, 0x0e, 0xb6, 0xd3, 0xa2, 0xe5, 0xb8, 0xc8, 0x1f,
	0x60, 0x79, 0xe9, 0x11, 0x1f, 0x71, 0x16, 0x8a, 0xef, 0x69, 0x05, 0x36, 0x6c, 0xa9, 0x3e, 0x11,
	0x82, 0xd3, 0x79, 0x5d, 0xdf, 0x07, 0x5b, 0x98, 0xa2, 0x88, 0x13, 0x87, 0xf0, 0x89, 0xe5, 0x8d,
	0x28, 0x27, 0x01, 0x25, 0x38, 0x14, 0x1f, 0xc7, 0x0a, 0xac, 0xcf, 0x8b, 0x2f, 0xb3, 0x9a, 0xbe,
	0x0b, 0x34, 0xe2, 0x13, 0x4e, 0x10, 0x9d, 0x0f, 0x96, 0x7c, 0xf7, 0x36, 0x60, 0x55, 0xe5, 0xd3,
	0xe9, 0x3e, 0xcc, 0xae, 0x5b, 0x17, 0x93, 0x81, 0xcb, 0xc5, 0xb7, 0x6b, 0x23, 0xbd, 0x54, 0x5f,
	0x88, 0x5c, 0xe7, 0xf8, 0xcd, 0xb4, 0x99, 0x7f, 0x3b, 0x6d, 0xe6, 0xff, 0x9c, 0x36, 0xf3, 0xbf,
	0x5c, 0x37, 0x73, 0x6f, 0xaf, 0x9b, 0xb9, 0xdf, 0xae, 0x9b, 0xb9, 0xef, 0x3e, 0x1a, 0x10, 0xee,
	0x8e, 0xec, 0x96, 0xc3, 0xbc, 0x76, 0x30, 0xf2, 0x7b, 0x04, 0x91, 0x76, 0xff, 0xf5, 0x13, 0x87,
	0x85, 0xb8, 0xcd, 0x27, 0x01, 0x8e, 0xda, 0x14, 0x0f, 0x90, 0x33, 0xb1, 0x1f, 0x88, 0x7f, 0x84,
	0xf6, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x79, 0x6e, 0x5c, 0x5f, 0x09, 0x00, 0x00,
}

func (m *InitEvmParamsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitEvmParamsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitEvmParamsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeemarketParams != nil {
		{
			size, err := m.FeemarketParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.EvmParams != nil {
		{
			size, err := m.EvmParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EVMParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EVMParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EVMParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChainConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ExtraEIPs) > 0 {
		dAtA5 := make([]byte, len(m.ExtraEIPs)*10)
		var j4 int
		for _, num1 := range m.ExtraEIPs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x22
	}
	if m.EnableCall {
		i--
		if m.EnableCall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.EnableCreate {
		i--
		if m.EnableCreate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.EvmDenom) > 0 {
		i -= len(m.EvmDenom)
		copy(dAtA[i:], m.EvmDenom)
		i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(len(m.EvmDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EVMChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EVMChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EVMChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LondonBlock != nil {
		{
			size := m.LondonBlock.Size()
			i -= size
			if _, err := m.LondonBlock.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.BerlinBlock != nil {
		{
			size := m.BerlinBlock.Size()
			i -= size
			if _, err := m.BerlinBlock.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.MuirGlacierBlock != nil {
		{
			size := m.MuirGlacierBlock.Size()
			i -= size
			if _, err := m.MuirGlacierBlock.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.IstanbulBlock != nil {
		{
			size := m.IstanbulBlock.Size()
			i -= size
			if _, err := m.IstanbulBlock.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.PetersburgBlock != nil {
		{
			size := m.PetersburgBlock.Size()
			i -= size
			if _, err := m.PetersburgBlock.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.ConstantinopleBlock != nil {
		{
			size := m.ConstantinopleBlock.Size()
			i -= size
			if _, err := m.ConstantinopleBlock.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ByzantiumBlock != nil {
		{
			size := m.ByzantiumBlock.Size()
			i -= size
			if _, err := m.ByzantiumBlock.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.EIP158Block != nil {
		{
			size := m.EIP158Block.Size()
			i -= size
			if _, err := m.EIP158Block.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.EIP155Block != nil {
		{
			size := m.EIP155Block.Size()
			i -= size
			if _, err := m.EIP155Block.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.EIP150Hash) > 0 {
		i -= len(m.EIP150Hash)
		copy(dAtA[i:], m.EIP150Hash)
		i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(len(m.EIP150Hash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EIP150Block != nil {
		{
			size := m.EIP150Block.Size()
			i -= size
			if _, err := m.EIP150Block.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DAOForkSupport {
		i--
		if m.DAOForkSupport {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.DAOForkBlock != nil {
		{
			size := m.DAOForkBlock.Size()
			i -= size
			if _, err := m.DAOForkBlock.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.HomesteadBlock != nil {
		{
			size := m.HomesteadBlock.Size()
			i -= size
			if _, err := m.HomesteadBlock.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeemarketParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeemarketParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeemarketParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableHeight != 0 {
		i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(m.EnableHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.InitialBaseFee != 0 {
		i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(m.InitialBaseFee))
		i--
		dAtA[i] = 0x20
	}
	if m.ElasticityMultiplier != 0 {
		i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(m.ElasticityMultiplier))
		i--
		dAtA[i] = 0x18
	}
	if m.BaseFeeChangeDenominator != 0 {
		i = encodeVarintEvmProposalTestnet(dAtA, i, uint64(m.BaseFeeChangeDenominator))
		i--
		dAtA[i] = 0x10
	}
	if m.NoBaseFee {
		i--
		if m.NoBaseFee {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvmProposalTestnet(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvmProposalTestnet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitEvmParamsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.EvmParams != nil {
		l = m.EvmParams.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.FeemarketParams != nil {
		l = m.FeemarketParams.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	return n
}

func (m *EVMParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EvmDenom)
	if l > 0 {
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.EnableCreate {
		n += 2
	}
	if m.EnableCall {
		n += 2
	}
	if len(m.ExtraEIPs) > 0 {
		l = 0
		for _, e := range m.ExtraEIPs {
			l += sovEvmProposalTestnet(uint64(e))
		}
		n += 1 + sovEvmProposalTestnet(uint64(l)) + l
	}
	l = m.ChainConfig.Size()
	n += 1 + l + sovEvmProposalTestnet(uint64(l))
	return n
}

func (m *EVMChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HomesteadBlock != nil {
		l = m.HomesteadBlock.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.DAOForkBlock != nil {
		l = m.DAOForkBlock.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.DAOForkSupport {
		n += 2
	}
	if m.EIP150Block != nil {
		l = m.EIP150Block.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	l = len(m.EIP150Hash)
	if l > 0 {
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.EIP155Block != nil {
		l = m.EIP155Block.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.EIP158Block != nil {
		l = m.EIP158Block.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.ByzantiumBlock != nil {
		l = m.ByzantiumBlock.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.ConstantinopleBlock != nil {
		l = m.ConstantinopleBlock.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.PetersburgBlock != nil {
		l = m.PetersburgBlock.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.IstanbulBlock != nil {
		l = m.IstanbulBlock.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.MuirGlacierBlock != nil {
		l = m.MuirGlacierBlock.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.BerlinBlock != nil {
		l = m.BerlinBlock.Size()
		n += 1 + l + sovEvmProposalTestnet(uint64(l))
	}
	if m.LondonBlock != nil {
		l = m.LondonBlock.Size()
		n += 2 + l + sovEvmProposalTestnet(uint64(l))
	}
	return n
}

func (m *FeemarketParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoBaseFee {
		n += 2
	}
	if m.BaseFeeChangeDenominator != 0 {
		n += 1 + sovEvmProposalTestnet(uint64(m.BaseFeeChangeDenominator))
	}
	if m.ElasticityMultiplier != 0 {
		n += 1 + sovEvmProposalTestnet(uint64(m.ElasticityMultiplier))
	}
	if m.InitialBaseFee != 0 {
		n += 1 + sovEvmProposalTestnet(uint64(m.InitialBaseFee))
	}
	if m.EnableHeight != 0 {
		n += 1 + sovEvmProposalTestnet(uint64(m.EnableHeight))
	}
	return n
}

func sovEvmProposalTestnet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvmProposalTestnet(x uint64) (n int) {
	return sovEvmProposalTestnet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InitEvmParamsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvmProposalTestnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitEvmParamsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitEvmParamsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EvmParams == nil {
				m.EvmParams = &EVMParams{}
			}
			if err := m.EvmParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeemarketParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeemarketParams == nil {
				m.FeemarketParams = &FeemarketParams{}
			}
			if err := m.FeemarketParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvmProposalTestnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EVMParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvmProposalTestnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EVMParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EVMParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCreate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCreate = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableCall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableCall = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvmProposalTestnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExtraEIPs = append(m.ExtraEIPs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvmProposalTestnet
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvmProposalTestnet
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvmProposalTestnet
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExtraEIPs) == 0 {
					m.ExtraEIPs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvmProposalTestnet
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExtraEIPs = append(m.ExtraEIPs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraEIPs", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvmProposalTestnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EVMChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvmProposalTestnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EVMChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EVMChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomesteadBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.HomesteadBlock = &v
			if err := m.HomesteadBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DAOForkBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.DAOForkBlock = &v
			if err := m.DAOForkBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DAOForkSupport", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DAOForkSupport = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EIP150Block", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.EIP150Block = &v
			if err := m.EIP150Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EIP150Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EIP150Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EIP155Block", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.EIP155Block = &v
			if err := m.EIP155Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EIP158Block", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.EIP158Block = &v
			if err := m.EIP158Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByzantiumBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.ByzantiumBlock = &v
			if err := m.ByzantiumBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstantinopleBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.ConstantinopleBlock = &v
			if err := m.ConstantinopleBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetersburgBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.PetersburgBlock = &v
			if err := m.PetersburgBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IstanbulBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.IstanbulBlock = &v
			if err := m.IstanbulBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MuirGlacierBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.MuirGlacierBlock = &v
			if err := m.MuirGlacierBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BerlinBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.BerlinBlock = &v
			if err := m.BerlinBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LondonBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v cosmossdk_io_math.Int
			m.LondonBlock = &v
			if err := m.LondonBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvmProposalTestnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeemarketParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvmProposalTestnet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeemarketParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeemarketParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoBaseFee", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoBaseFee = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFeeChangeDenominator", wireType)
			}
			m.BaseFeeChangeDenominator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseFeeChangeDenominator |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElasticityMultiplier", wireType)
			}
			m.ElasticityMultiplier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElasticityMultiplier |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialBaseFee", wireType)
			}
			m.InitialBaseFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialBaseFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableHeight", wireType)
			}
			m.EnableHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnableHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvmProposalTestnet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvmProposalTestnet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvmProposalTestnet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvmProposalTestnet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvmProposalTestnet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvmProposalTestnet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvmProposalTestnet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvmProposalTestnet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvmProposalTestnet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvmProposalTestnet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvmProposalTestnet = fmt.Errorf("proto: unexpected end of group")
)
