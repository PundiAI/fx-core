// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fx/gov/v1/gov_legacy.proto

package legacy

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
// Deprecated: Do not use.
//
// Deprecated: Do not use.
type MsgUpdateFXParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateFXParams) Reset()         { *m = MsgUpdateFXParams{} }
func (m *MsgUpdateFXParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFXParams) ProtoMessage()    {}
func (*MsgUpdateFXParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_645155d0813cbede, []int{0}
}
func (m *MsgUpdateFXParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFXParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFXParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFXParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFXParams.Merge(m, src)
}
func (m *MsgUpdateFXParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFXParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFXParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFXParams proto.InternalMessageInfo

func (m *MsgUpdateFXParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateFXParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateBaseParams is the Msg/UpdateParams request type.
// Deprecated: Do not use.
//
// Deprecated: Do not use.
type MsgUpdateEGFParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params EGFParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateEGFParams) Reset()         { *m = MsgUpdateEGFParams{} }
func (m *MsgUpdateEGFParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEGFParams) ProtoMessage()    {}
func (*MsgUpdateEGFParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_645155d0813cbede, []int{1}
}
func (m *MsgUpdateEGFParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEGFParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEGFParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEGFParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEGFParams.Merge(m, src)
}
func (m *MsgUpdateEGFParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEGFParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEGFParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEGFParams proto.InternalMessageInfo

func (m *MsgUpdateEGFParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateEGFParams) GetParams() EGFParams {
	if m != nil {
		return m.Params
	}
	return EGFParams{}
}

// Deprecated: Do not use.
//
// Deprecated: Do not use.
type MsgUpdateParams struct {
	Authority string       `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Params    LegacyParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_645155d0813cbede, []int{2}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() LegacyParams {
	if m != nil {
		return m.Params
	}
	return LegacyParams{}
}

// Deprecated: Do not use.
//
// Deprecated: Do not use.
type LegacyParams struct {
	MsgType           string                      `protobuf:"bytes,1,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	MinDeposit        []types.Coin                `protobuf:"bytes,2,rep,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MinInitialDeposit types.Coin                  `protobuf:"bytes,3,opt,name=min_initial_deposit,json=minInitialDeposit,proto3" json:"min_initial_deposit,omitempty"`
	VotingPeriod      *time.Duration              `protobuf:"bytes,4,opt,name=voting_period,json=votingPeriod,proto3,stdduration" json:"voting_period,omitempty"`
	Quorum            cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=quorum,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quorum,omitempty"`
	MaxDepositPeriod  *time.Duration              `protobuf:"bytes,6,opt,name=max_deposit_period,json=maxDepositPeriod,proto3,stdduration" json:"max_deposit_period,omitempty"`
	Threshold         cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=threshold,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"threshold,omitempty"`
	VetoThreshold     cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=veto_threshold,json=vetoThreshold,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"veto_threshold,omitempty"`
	// The ratio representing the proportion of the deposit value that must be
	// paid at proposal submission.
	MinInitialDepositRatio string `protobuf:"bytes,9,opt,name=min_initial_deposit_ratio,json=minInitialDepositRatio,proto3" json:"min_initial_deposit_ratio,omitempty"`
	// burn deposits if a proposal does not meet quorum
	BurnVoteQuorum bool `protobuf:"varint,10,opt,name=burn_vote_quorum,json=burnVoteQuorum,proto3" json:"burn_vote_quorum,omitempty"`
	// burn deposits if the proposal does not enter voting period
	BurnProposalDepositPrevote bool `protobuf:"varint,11,opt,name=burn_proposal_deposit_prevote,json=burnProposalDepositPrevote,proto3" json:"burn_proposal_deposit_prevote,omitempty"`
	// burn deposits if quorum with vote type no_veto is met
	BurnVoteVeto bool `protobuf:"varint,12,opt,name=burn_vote_veto,json=burnVoteVeto,proto3" json:"burn_vote_veto,omitempty"`
}

func (m *LegacyParams) Reset()         { *m = LegacyParams{} }
func (m *LegacyParams) String() string { return proto.CompactTextString(m) }
func (*LegacyParams) ProtoMessage()    {}
func (*LegacyParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_645155d0813cbede, []int{3}
}
func (m *LegacyParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyParams.Merge(m, src)
}
func (m *LegacyParams) XXX_Size() int {
	return m.Size()
}
func (m *LegacyParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyParams.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyParams proto.InternalMessageInfo

func (m *LegacyParams) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

func (m *LegacyParams) GetMinDeposit() []types.Coin {
	if m != nil {
		return m.MinDeposit
	}
	return nil
}

func (m *LegacyParams) GetMinInitialDeposit() types.Coin {
	if m != nil {
		return m.MinInitialDeposit
	}
	return types.Coin{}
}

func (m *LegacyParams) GetVotingPeriod() *time.Duration {
	if m != nil {
		return m.VotingPeriod
	}
	return nil
}

func (m *LegacyParams) GetMaxDepositPeriod() *time.Duration {
	if m != nil {
		return m.MaxDepositPeriod
	}
	return nil
}

func (m *LegacyParams) GetMinInitialDepositRatio() string {
	if m != nil {
		return m.MinInitialDepositRatio
	}
	return ""
}

func (m *LegacyParams) GetBurnVoteQuorum() bool {
	if m != nil {
		return m.BurnVoteQuorum
	}
	return false
}

func (m *LegacyParams) GetBurnProposalDepositPrevote() bool {
	if m != nil {
		return m.BurnProposalDepositPrevote
	}
	return false
}

func (m *LegacyParams) GetBurnVoteVeto() bool {
	if m != nil {
		return m.BurnVoteVeto
	}
	return false
}

// Deprecated Params defines the fx x/gov module params
//
// Deprecated: Do not use.
type Params struct {
	MsgType           string         `protobuf:"bytes,1,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	MinDeposit        []types.Coin   `protobuf:"bytes,2,rep,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MinInitialDeposit types.Coin     `protobuf:"bytes,3,opt,name=min_initial_deposit,json=minInitialDeposit,proto3" json:"min_initial_deposit,omitempty"`
	VotingPeriod      *time.Duration `protobuf:"bytes,4,opt,name=voting_period,json=votingPeriod,proto3,stdduration" json:"voting_period,omitempty"`
	Quorum            string         `protobuf:"bytes,5,opt,name=quorum,proto3" json:"quorum,omitempty"`
	MaxDepositPeriod  *time.Duration `protobuf:"bytes,6,opt,name=max_deposit_period,json=maxDepositPeriod,proto3,stdduration" json:"max_deposit_period,omitempty"`
	Threshold         string         `protobuf:"bytes,7,opt,name=threshold,proto3" json:"threshold,omitempty"`
	VetoThreshold     string         `protobuf:"bytes,8,opt,name=veto_threshold,json=vetoThreshold,proto3" json:"veto_threshold,omitempty"`
	// The ratio representing the proportion of the deposit value that must be
	// paid at proposal submission.
	MinInitialDepositRatio string `protobuf:"bytes,9,opt,name=min_initial_deposit_ratio,json=minInitialDepositRatio,proto3" json:"min_initial_deposit_ratio,omitempty"`
	// burn deposits if a proposal does not meet quorum
	BurnVoteQuorum bool `protobuf:"varint,10,opt,name=burn_vote_quorum,json=burnVoteQuorum,proto3" json:"burn_vote_quorum,omitempty"`
	// burn deposits if the proposal does not enter voting period
	BurnProposalDepositPrevote bool `protobuf:"varint,11,opt,name=burn_proposal_deposit_prevote,json=burnProposalDepositPrevote,proto3" json:"burn_proposal_deposit_prevote,omitempty"`
	// burn deposits if quorum with vote type no_veto is met
	BurnVoteVeto bool `protobuf:"varint,12,opt,name=burn_vote_veto,json=burnVoteVeto,proto3" json:"burn_vote_veto,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_645155d0813cbede, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

func (m *Params) GetMinDeposit() []types.Coin {
	if m != nil {
		return m.MinDeposit
	}
	return nil
}

func (m *Params) GetMinInitialDeposit() types.Coin {
	if m != nil {
		return m.MinInitialDeposit
	}
	return types.Coin{}
}

func (m *Params) GetVotingPeriod() *time.Duration {
	if m != nil {
		return m.VotingPeriod
	}
	return nil
}

func (m *Params) GetQuorum() string {
	if m != nil {
		return m.Quorum
	}
	return ""
}

func (m *Params) GetMaxDepositPeriod() *time.Duration {
	if m != nil {
		return m.MaxDepositPeriod
	}
	return nil
}

func (m *Params) GetThreshold() string {
	if m != nil {
		return m.Threshold
	}
	return ""
}

func (m *Params) GetVetoThreshold() string {
	if m != nil {
		return m.VetoThreshold
	}
	return ""
}

func (m *Params) GetMinInitialDepositRatio() string {
	if m != nil {
		return m.MinInitialDepositRatio
	}
	return ""
}

func (m *Params) GetBurnVoteQuorum() bool {
	if m != nil {
		return m.BurnVoteQuorum
	}
	return false
}

func (m *Params) GetBurnProposalDepositPrevote() bool {
	if m != nil {
		return m.BurnProposalDepositPrevote
	}
	return false
}

func (m *Params) GetBurnVoteVeto() bool {
	if m != nil {
		return m.BurnVoteVeto
	}
	return false
}

// Deprecated
//
// Deprecated: Do not use.
type EGFParams struct {
	EgfDepositThreshold types.Coin `protobuf:"bytes,1,opt,name=egf_deposit_threshold,json=egfDepositThreshold,proto3" json:"egf_deposit_threshold,omitempty"`
	ClaimRatio          string     `protobuf:"bytes,2,opt,name=claim_ratio,json=claimRatio,proto3" json:"claim_ratio,omitempty"`
}

func (m *EGFParams) Reset()         { *m = EGFParams{} }
func (m *EGFParams) String() string { return proto.CompactTextString(m) }
func (*EGFParams) ProtoMessage()    {}
func (*EGFParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_645155d0813cbede, []int{5}
}
func (m *EGFParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EGFParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EGFParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EGFParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EGFParams.Merge(m, src)
}
func (m *EGFParams) XXX_Size() int {
	return m.Size()
}
func (m *EGFParams) XXX_DiscardUnknown() {
	xxx_messageInfo_EGFParams.DiscardUnknown(m)
}

var xxx_messageInfo_EGFParams proto.InternalMessageInfo

func (m *EGFParams) GetEgfDepositThreshold() types.Coin {
	if m != nil {
		return m.EgfDepositThreshold
	}
	return types.Coin{}
}

func (m *EGFParams) GetClaimRatio() string {
	if m != nil {
		return m.ClaimRatio
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgUpdateFXParams)(nil), "fx.gov.v1.MsgUpdateFXParams")
	proto.RegisterType((*MsgUpdateEGFParams)(nil), "fx.gov.v1.MsgUpdateEGFParams")
	proto.RegisterType((*MsgUpdateParams)(nil), "fx.gov.v1.MsgUpdateParams")
	proto.RegisterType((*LegacyParams)(nil), "fx.gov.v1.LegacyParams")
	proto.RegisterType((*Params)(nil), "fx.gov.v1.Params")
	proto.RegisterType((*EGFParams)(nil), "fx.gov.v1.EGFParams")
}

func init() { proto.RegisterFile("fx/gov/v1/gov_legacy.proto", fileDescriptor_645155d0813cbede) }

var fileDescriptor_645155d0813cbede = []byte{
	// 902 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0xa4, 0xc1, 0x89, 0xc7, 0x69, 0x48, 0x36, 0x49, 0xbb, 0x09, 0xc4, 0x8e, 0xac, 0x56,
	0xb1, 0x02, 0xd9, 0x55, 0x82, 0xe0, 0x90, 0x5b, 0x5c, 0xb7, 0xb4, 0x12, 0x95, 0x52, 0x53, 0x2a,
	0x40, 0x42, 0xab, 0xb5, 0x77, 0x3c, 0x1e, 0xe1, 0xd9, 0x59, 0x76, 0xc6, 0x2b, 0xfb, 0xca, 0x91,
	0x13, 0xe2, 0xc4, 0x9f, 0xc0, 0x05, 0xa9, 0x87, 0xfe, 0x11, 0x15, 0xa7, 0xd2, 0x13, 0x02, 0xc9,
	0xa0, 0xe4, 0x50, 0x29, 0x7f, 0x05, 0x9a, 0x1f, 0xde, 0x75, 0xfc, 0x83, 0x16, 0x7a, 0xe1, 0xd0,
	0x8b, 0xed, 0x7d, 0xf3, 0xbe, 0xf7, 0x7d, 0xef, 0xcd, 0xfb, 0xac, 0x85, 0xdb, 0xad, 0x9e, 0x8b,
	0x59, 0xe2, 0x26, 0x87, 0xf2, 0xcb, 0xeb, 0x20, 0xec, 0x37, 0xfb, 0x4e, 0x14, 0x33, 0xc1, 0xac,
	0x7c, 0xab, 0xe7, 0x60, 0x96, 0x38, 0xc9, 0xe1, 0x76, 0xb1, 0xc9, 0x38, 0x65, 0xdc, 0x6d, 0xf8,
	0x1c, 0xb9, 0xc9, 0x61, 0x03, 0x09, 0xff, 0xd0, 0x6d, 0x32, 0x12, 0xea, 0xd4, 0xed, 0xeb, 0xe6,
	0x9c, 0x72, 0x2c, 0x4b, 0x51, 0x8e, 0xcd, 0xc1, 0x96, 0x3e, 0xf0, 0xd4, 0x93, 0xab, 0x1f, 0xcc,
	0xd1, 0x06, 0x66, 0x98, 0xe9, 0xb8, 0xfc, 0x65, 0xa2, 0x45, 0xcc, 0x18, 0xee, 0x20, 0x57, 0x3d,
	0x35, 0xba, 0x2d, 0x37, 0xe8, 0xc6, 0xbe, 0x20, 0x6c, 0xc8, 0xb4, 0xe6, 0x53, 0x12, 0x32, 0x57,
	0x7d, 0xea, 0x50, 0xf9, 0x27, 0x00, 0xd7, 0xee, 0x73, 0xfc, 0x59, 0x14, 0xf8, 0x02, 0xdd, 0xf9,
	0xfc, 0xd4, 0x8f, 0x7d, 0xca, 0xad, 0x8f, 0x60, 0xde, 0xef, 0x8a, 0x36, 0x8b, 0x89, 0xe8, 0xdb,
	0x60, 0x17, 0x54, 0xf2, 0x55, 0xfb, 0xf9, 0x93, 0x83, 0x0d, 0xa3, 0xe1, 0x24, 0x08, 0x62, 0xc4,
	0xf9, 0xa7, 0x22, 0x26, 0x21, 0xae, 0x67, 0xa9, 0x96, 0x0b, 0x73, 0x91, 0xaa, 0x60, 0xcf, 0xef,
	0x82, 0x4a, 0xe1, 0x68, 0xcd, 0x49, 0xc7, 0xe0, 0xe8, 0xd2, 0xd5, 0x85, 0xa7, 0x83, 0xd2, 0x5c,
	0xdd, 0xa4, 0x1d, 0xef, 0x7f, 0xfb, 0xe2, 0xf1, 0x7e, 0x56, 0xe0, 0xbb, 0x17, 0x8f, 0xf7, 0x37,
	0xe5, 0x48, 0x27, 0x24, 0xd9, 0xa0, 0xfc, 0x33, 0x80, 0x56, 0x1a, 0xbf, 0xfd, 0xf1, 0x9d, 0xd7,
	0xd4, 0x7a, 0x34, 0xa6, 0x75, 0x63, 0x44, 0x6b, 0x5a, 0x7d, 0x4c, 0xee, 0x7b, 0x93, 0x72, 0xaf,
	0x5d, 0x92, 0x9b, 0x02, 0x6d, 0x50, 0xfe, 0x01, 0xc0, 0xb7, 0xd3, 0x83, 0xd7, 0x14, 0xfb, 0xe1,
	0x98, 0xd8, 0xeb, 0x23, 0x62, 0x3f, 0x51, 0x7b, 0x37, 0x55, 0xef, 0xea, 0x65, 0xbd, 0x36, 0x28,
	0xff, 0xb2, 0x08, 0x97, 0x47, 0x01, 0xd6, 0x16, 0x5c, 0xa2, 0x1c, 0x7b, 0xa2, 0x1f, 0x21, 0x2d,
	0xa8, 0xbe, 0x48, 0x39, 0x7e, 0xd8, 0x8f, 0x90, 0xf5, 0x05, 0x2c, 0x50, 0x12, 0x7a, 0x01, 0x8a,
	0x18, 0x27, 0xc2, 0x9e, 0xdf, 0xbd, 0x52, 0x29, 0x1c, 0x6d, 0x39, 0x46, 0xab, 0x5c, 0x67, 0xc7,
	0xac, 0xb3, 0x73, 0x8b, 0x91, 0xb0, 0xba, 0x23, 0xb9, 0x2f, 0x06, 0xa5, 0xcd, 0x11, 0xd4, 0xfb,
	0x8c, 0x12, 0x81, 0x68, 0x24, 0xfa, 0x75, 0x48, 0x49, 0x58, 0xd3, 0x51, 0x2b, 0x82, 0xeb, 0x32,
	0x89, 0x84, 0x44, 0x10, 0xbf, 0x93, 0x52, 0x5c, 0x51, 0xcd, 0xfd, 0x03, 0xc5, 0x4d, 0x43, 0xb1,
	0x33, 0x05, 0x3d, 0x42, 0xb5, 0x46, 0x49, 0x78, 0x4f, 0x9f, 0x0e, 0x19, 0x6b, 0xf0, 0x6a, 0xc2,
	0x04, 0x09, 0xb1, 0x17, 0xa1, 0x98, 0xb0, 0xc0, 0x5e, 0x30, 0x5c, 0xda, 0x33, 0xce, 0xd0, 0x33,
	0x4e, 0xcd, 0x78, 0xa6, 0xba, 0xf0, 0xe3, 0x9f, 0x25, 0x50, 0x5f, 0xd6, 0xa8, 0x53, 0x05, 0xb2,
	0xbe, 0x82, 0xb9, 0x6f, 0xba, 0x2c, 0xee, 0x52, 0xfb, 0x2d, 0x75, 0x79, 0xb7, 0xa5, 0x9e, 0xdf,
	0x07, 0xa5, 0x77, 0xb4, 0x62, 0x1e, 0x7c, 0xed, 0x10, 0xe6, 0x52, 0x5f, 0xb4, 0xcd, 0xb5, 0xd4,
	0x50, 0xf3, 0x62, 0x50, 0x5a, 0xd5, 0xa0, 0x4c, 0xe1, 0xf3, 0x27, 0x07, 0xd0, 0x34, 0x59, 0x43,
	0xcd, 0xba, 0x29, 0x6a, 0x51, 0x68, 0x51, 0xbf, 0x37, 0x6c, 0x68, 0xa8, 0x34, 0xf7, 0x32, 0xa5,
	0x37, 0x2e, 0x06, 0xa5, 0x77, 0x27, 0x81, 0x19, 0x9d, 0xea, 0x64, 0x95, 0xfa, 0x3d, 0x33, 0x0d,
	0xd3, 0x4d, 0x0b, 0xe6, 0x45, 0x3b, 0x46, 0xbc, 0xcd, 0x3a, 0x81, 0xbd, 0xa8, 0x1a, 0xba, 0xfb,
	0x6a, 0x0d, 0xad, 0xa7, 0xb8, 0x99, 0x3d, 0x65, 0xa5, 0x2d, 0x01, 0x57, 0x12, 0x24, 0x98, 0x97,
	0x91, 0x2d, 0x29, 0xb2, 0xfb, 0xaf, 0x46, 0x66, 0x5f, 0x06, 0xcf, 0x64, 0xbc, 0x2a, 0xf3, 0x1e,
	0xa6, 0xac, 0xf7, 0xe0, 0xd6, 0x94, 0x2d, 0xf1, 0xd4, 0xcc, 0xec, 0xbc, 0x12, 0xb0, 0x32, 0x56,
	0xe1, 0xda, 0xc4, 0xde, 0xd4, 0x65, 0xb6, 0x55, 0x81, 0xab, 0x8d, 0x6e, 0x1c, 0x7a, 0x09, 0x13,
	0xc8, 0x33, 0x0b, 0x00, 0x77, 0x41, 0x65, 0xa9, 0xbe, 0x22, 0xe3, 0x8f, 0x98, 0x40, 0x0f, 0xf4,
	0x0d, 0x9e, 0xc0, 0x1d, 0x95, 0x19, 0xc5, 0x2c, 0x62, 0x7c, 0x84, 0x36, 0x8a, 0x91, 0x44, 0xdb,
	0x05, 0x05, 0xdb, 0x96, 0x49, 0xa7, 0x26, 0x67, 0x78, 0x29, 0x3a, 0xc3, 0xba, 0x01, 0x57, 0x32,
	0x32, 0xd9, 0x92, 0xbd, 0xac, 0x30, 0xcb, 0x43, 0xaa, 0x47, 0x48, 0xb0, 0xe3, 0x79, 0x1b, 0x94,
	0xff, 0xc8, 0xc1, 0xdc, 0x1b, 0x1b, 0xff, 0x07, 0x1b, 0x1f, 0x8f, 0xd9, 0xb8, 0xfc, 0xff, 0xf5,
	0xe8, 0xad, 0x49, 0x8f, 0xde, 0xfc, 0xd7, 0x06, 0x7c, 0x30, 0xc3, 0x80, 0xfb, 0x6f, 0xdc, 0x35,
	0xdb, 0x5d, 0xbf, 0x02, 0x98, 0xcf, 0x5e, 0x33, 0x12, 0xb8, 0x89, 0x70, 0x2b, 0x25, 0xcc, 0x26,
	0x09, 0x5e, 0xb6, 0xec, 0x7b, 0x66, 0xd9, 0x4b, 0x53, 0xf1, 0x23, 0xeb, 0xbe, 0x8e, 0x70, 0xcb,
	0xa8, 0xcd, 0xe6, 0x7c, 0x17, 0x16, 0x9a, 0x1d, 0x9f, 0x50, 0x33, 0xd9, 0x79, 0x35, 0xd9, 0x3d,
	0x69, 0xcf, 0x91, 0xf0, 0xcc, 0x4b, 0x83, 0x2a, 0x49, 0x8d, 0x59, 0xf6, 0x54, 0x3d, 0x79, 0x7a,
	0x56, 0x04, 0xcf, 0xce, 0x8a, 0xe0, 0xaf, 0xb3, 0x22, 0xf8, 0xfe, 0xbc, 0x38, 0xf7, 0xec, 0xbc,
	0x38, 0xf7, 0xdb, 0x79, 0x71, 0xee, 0xcb, 0x3d, 0x4c, 0x44, 0xbb, 0xdb, 0x70, 0x9a, 0x8c, 0xba,
	0x51, 0x37, 0x0c, 0x88, 0x4f, 0xdc, 0x56, 0xef, 0xa0, 0xc9, 0x62, 0xe4, 0xca, 0x7f, 0x15, 0xee,
	0xea, 0xf7, 0xdb, 0x46, 0x4e, 0xed, 0xf6, 0x07, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x19, 0x95,
	0x08, 0xeb, 0xfe, 0x0a, 0x00, 0x00,
}

func (m *MsgUpdateFXParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFXParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFXParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGovLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintGovLegacy(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEGFParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEGFParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEGFParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGovLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintGovLegacy(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGovLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintGovLegacy(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LegacyParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BurnVoteVeto {
		i--
		if m.BurnVoteVeto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.BurnProposalDepositPrevote {
		i--
		if m.BurnProposalDepositPrevote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.BurnVoteQuorum {
		i--
		if m.BurnVoteQuorum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.MinInitialDepositRatio) > 0 {
		i -= len(m.MinInitialDepositRatio)
		copy(dAtA[i:], m.MinInitialDepositRatio)
		i = encodeVarintGovLegacy(dAtA, i, uint64(len(m.MinInitialDepositRatio)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size := m.VetoThreshold.Size()
		i -= size
		if _, err := m.VetoThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.Threshold.Size()
		i -= size
		if _, err := m.Threshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.MaxDepositPeriod != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.MaxDepositPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MaxDepositPeriod):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintGovLegacy(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.Quorum.Size()
		i -= size
		if _, err := m.Quorum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.VotingPeriod != nil {
		n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.VotingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.VotingPeriod):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintGovLegacy(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.MinInitialDeposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGovLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MinDeposit) > 0 {
		for iNdEx := len(m.MinDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGovLegacy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MsgType) > 0 {
		i -= len(m.MsgType)
		copy(dAtA[i:], m.MsgType)
		i = encodeVarintGovLegacy(dAtA, i, uint64(len(m.MsgType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BurnVoteVeto {
		i--
		if m.BurnVoteVeto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.BurnProposalDepositPrevote {
		i--
		if m.BurnProposalDepositPrevote {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.BurnVoteQuorum {
		i--
		if m.BurnVoteQuorum {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.MinInitialDepositRatio) > 0 {
		i -= len(m.MinInitialDepositRatio)
		copy(dAtA[i:], m.MinInitialDepositRatio)
		i = encodeVarintGovLegacy(dAtA, i, uint64(len(m.MinInitialDepositRatio)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VetoThreshold) > 0 {
		i -= len(m.VetoThreshold)
		copy(dAtA[i:], m.VetoThreshold)
		i = encodeVarintGovLegacy(dAtA, i, uint64(len(m.VetoThreshold)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Threshold) > 0 {
		i -= len(m.Threshold)
		copy(dAtA[i:], m.Threshold)
		i = encodeVarintGovLegacy(dAtA, i, uint64(len(m.Threshold)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MaxDepositPeriod != nil {
		n7, err7 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.MaxDepositPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MaxDepositPeriod):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintGovLegacy(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Quorum) > 0 {
		i -= len(m.Quorum)
		copy(dAtA[i:], m.Quorum)
		i = encodeVarintGovLegacy(dAtA, i, uint64(len(m.Quorum)))
		i--
		dAtA[i] = 0x2a
	}
	if m.VotingPeriod != nil {
		n8, err8 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.VotingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.VotingPeriod):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintGovLegacy(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.MinInitialDeposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGovLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MinDeposit) > 0 {
		for iNdEx := len(m.MinDeposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinDeposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGovLegacy(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MsgType) > 0 {
		i -= len(m.MsgType)
		copy(dAtA[i:], m.MsgType)
		i = encodeVarintGovLegacy(dAtA, i, uint64(len(m.MsgType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EGFParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EGFParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EGFParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimRatio) > 0 {
		i -= len(m.ClaimRatio)
		copy(dAtA[i:], m.ClaimRatio)
		i = encodeVarintGovLegacy(dAtA, i, uint64(len(m.ClaimRatio)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.EgfDepositThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGovLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGovLegacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovGovLegacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateFXParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovGovLegacy(uint64(l))
	return n
}

func (m *MsgUpdateEGFParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovGovLegacy(uint64(l))
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovGovLegacy(uint64(l))
	return n
}

func (m *LegacyParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgType)
	if l > 0 {
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	if len(m.MinDeposit) > 0 {
		for _, e := range m.MinDeposit {
			l = e.Size()
			n += 1 + l + sovGovLegacy(uint64(l))
		}
	}
	l = m.MinInitialDeposit.Size()
	n += 1 + l + sovGovLegacy(uint64(l))
	if m.VotingPeriod != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.VotingPeriod)
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	l = m.Quorum.Size()
	n += 1 + l + sovGovLegacy(uint64(l))
	if m.MaxDepositPeriod != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MaxDepositPeriod)
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	l = m.Threshold.Size()
	n += 1 + l + sovGovLegacy(uint64(l))
	l = m.VetoThreshold.Size()
	n += 1 + l + sovGovLegacy(uint64(l))
	l = len(m.MinInitialDepositRatio)
	if l > 0 {
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	if m.BurnVoteQuorum {
		n += 2
	}
	if m.BurnProposalDepositPrevote {
		n += 2
	}
	if m.BurnVoteVeto {
		n += 2
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgType)
	if l > 0 {
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	if len(m.MinDeposit) > 0 {
		for _, e := range m.MinDeposit {
			l = e.Size()
			n += 1 + l + sovGovLegacy(uint64(l))
		}
	}
	l = m.MinInitialDeposit.Size()
	n += 1 + l + sovGovLegacy(uint64(l))
	if m.VotingPeriod != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.VotingPeriod)
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	l = len(m.Quorum)
	if l > 0 {
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	if m.MaxDepositPeriod != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.MaxDepositPeriod)
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	l = len(m.Threshold)
	if l > 0 {
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	l = len(m.VetoThreshold)
	if l > 0 {
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	l = len(m.MinInitialDepositRatio)
	if l > 0 {
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	if m.BurnVoteQuorum {
		n += 2
	}
	if m.BurnProposalDepositPrevote {
		n += 2
	}
	if m.BurnVoteVeto {
		n += 2
	}
	return n
}

func (m *EGFParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EgfDepositThreshold.Size()
	n += 1 + l + sovGovLegacy(uint64(l))
	l = len(m.ClaimRatio)
	if l > 0 {
		n += 1 + l + sovGovLegacy(uint64(l))
	}
	return n
}

func sovGovLegacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGovLegacy(x uint64) (n int) {
	return sovGovLegacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateFXParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFXParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFXParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEGFParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEGFParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEGFParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LegacyParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDeposit = append(m.MinDeposit, types.Coin{})
			if err := m.MinDeposit[len(m.MinDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitialDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinInitialDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VotingPeriod == nil {
				m.VotingPeriod = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.VotingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quorum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepositPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxDepositPeriod == nil {
				m.MaxDepositPeriod = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.MaxDepositPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Threshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VetoThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VetoThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitialDepositRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinInitialDepositRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnVoteQuorum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnVoteQuorum = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnProposalDepositPrevote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnProposalDepositPrevote = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnVoteVeto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnVoteVeto = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGovLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDeposit = append(m.MinDeposit, types.Coin{})
			if err := m.MinDeposit[len(m.MinDeposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitialDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinInitialDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VotingPeriod == nil {
				m.VotingPeriod = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.VotingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quorum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDepositPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxDepositPeriod == nil {
				m.MaxDepositPeriod = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.MaxDepositPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VetoThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VetoThreshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinInitialDepositRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinInitialDepositRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnVoteQuorum", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnVoteQuorum = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnProposalDepositPrevote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnProposalDepositPrevote = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnVoteVeto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnVoteVeto = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGovLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EGFParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EGFParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EGFParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EgfDepositThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EgfDepositThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimRatio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGovLegacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGovLegacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGovLegacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGovLegacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGovLegacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGovLegacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGovLegacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGovLegacy = fmt.Errorf("proto: unexpected end of group")
)
