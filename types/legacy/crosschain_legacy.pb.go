// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fx/gravity/crosschain/v1/crosschain_legacy.proto

package legacy

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Deprecated: after block 5713000
type InitCrossChainParamsProposal struct {
	Title       string      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Params      *ForkParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	ChainName   string      `protobuf:"bytes,4,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *InitCrossChainParamsProposal) Reset()      { *m = InitCrossChainParamsProposal{} }
func (*InitCrossChainParamsProposal) ProtoMessage() {}
func (*InitCrossChainParamsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_276fc1a91771efc3, []int{0}
}
func (m *InitCrossChainParamsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitCrossChainParamsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitCrossChainParamsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitCrossChainParamsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitCrossChainParamsProposal.Merge(m, src)
}
func (m *InitCrossChainParamsProposal) XXX_Size() int {
	return m.Size()
}
func (m *InitCrossChainParamsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_InitCrossChainParamsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_InitCrossChainParamsProposal proto.InternalMessageInfo

type ForkParams struct {
	GravityId                         string                      `protobuf:"bytes,1,opt,name=gravity_id,json=gravityId,proto3" json:"gravity_id,omitempty"`
	AverageBlockTime                  uint64                      `protobuf:"varint,2,opt,name=average_block_time,json=averageBlockTime,proto3" json:"average_block_time,omitempty"`
	ExternalBatchTimeout              uint64                      `protobuf:"varint,3,opt,name=external_batch_timeout,json=externalBatchTimeout,proto3" json:"external_batch_timeout,omitempty"`
	AverageExternalBlockTime          uint64                      `protobuf:"varint,4,opt,name=average_external_block_time,json=averageExternalBlockTime,proto3" json:"average_external_block_time,omitempty"`
	SignedWindow                      uint64                      `protobuf:"varint,5,opt,name=signed_window,json=signedWindow,proto3" json:"signed_window,omitempty"`
	SlashFraction                     cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=slash_fraction,json=slashFraction,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slash_fraction"`
	OracleSetUpdatePowerChangePercent cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=oracle_set_update_power_change_percent,json=oracleSetUpdatePowerChangePercent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"oracle_set_update_power_change_percent"`
	IbcTransferTimeoutHeight          uint64                      `protobuf:"varint,8,opt,name=ibc_transfer_timeout_height,json=ibcTransferTimeoutHeight,proto3" json:"ibc_transfer_timeout_height,omitempty"`
	// Deprecated: after block 5713000
	Oracles               []string   `protobuf:"bytes,9,rep,name=oracles,proto3" json:"oracles,omitempty"`
	DelegateThreshold     types.Coin `protobuf:"bytes,10,opt,name=delegate_threshold,json=delegateThreshold,proto3" json:"delegate_threshold"`
	DelegateMultiple      int64      `protobuf:"varint,11,opt,name=delegate_multiple,json=delegateMultiple,proto3" json:"delegate_multiple,omitempty"`
	BridgeCallTimeout     uint64     `protobuf:"varint,12,opt,name=bridge_call_timeout,json=bridgeCallTimeout,proto3" json:"bridge_call_timeout,omitempty"`
	BridgeCallMaxGasLimit uint64     `protobuf:"varint,13,opt,name=bridge_call_max_gas_limit,json=bridgeCallMaxGasLimit,proto3" json:"bridge_call_max_gas_limit,omitempty"`
	// Deprecated: do not use
	EnableSendToExternalPending bool `protobuf:"varint,14,opt,name=enable_send_to_external_pending,json=enableSendToExternalPending,proto3" json:"enable_send_to_external_pending,omitempty"`
	// Deprecated: do not use
	EnableBridgeCallPending bool `protobuf:"varint,15,opt,name=enable_bridge_call_pending,json=enableBridgeCallPending,proto3" json:"enable_bridge_call_pending,omitempty"`
}

func (m *ForkParams) Reset()         { *m = ForkParams{} }
func (m *ForkParams) String() string { return proto.CompactTextString(m) }
func (*ForkParams) ProtoMessage()    {}
func (*ForkParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_276fc1a91771efc3, []int{1}
}
func (m *ForkParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ForkParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ForkParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ForkParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForkParams.Merge(m, src)
}
func (m *ForkParams) XXX_Size() int {
	return m.Size()
}
func (m *ForkParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ForkParams.DiscardUnknown(m)
}

var xxx_messageInfo_ForkParams proto.InternalMessageInfo

func (m *ForkParams) GetGravityId() string {
	if m != nil {
		return m.GravityId
	}
	return ""
}

func (m *ForkParams) GetAverageBlockTime() uint64 {
	if m != nil {
		return m.AverageBlockTime
	}
	return 0
}

func (m *ForkParams) GetExternalBatchTimeout() uint64 {
	if m != nil {
		return m.ExternalBatchTimeout
	}
	return 0
}

func (m *ForkParams) GetAverageExternalBlockTime() uint64 {
	if m != nil {
		return m.AverageExternalBlockTime
	}
	return 0
}

func (m *ForkParams) GetSignedWindow() uint64 {
	if m != nil {
		return m.SignedWindow
	}
	return 0
}

func (m *ForkParams) GetIbcTransferTimeoutHeight() uint64 {
	if m != nil {
		return m.IbcTransferTimeoutHeight
	}
	return 0
}

func (m *ForkParams) GetOracles() []string {
	if m != nil {
		return m.Oracles
	}
	return nil
}

func (m *ForkParams) GetDelegateThreshold() types.Coin {
	if m != nil {
		return m.DelegateThreshold
	}
	return types.Coin{}
}

func (m *ForkParams) GetDelegateMultiple() int64 {
	if m != nil {
		return m.DelegateMultiple
	}
	return 0
}

func (m *ForkParams) GetBridgeCallTimeout() uint64 {
	if m != nil {
		return m.BridgeCallTimeout
	}
	return 0
}

func (m *ForkParams) GetBridgeCallMaxGasLimit() uint64 {
	if m != nil {
		return m.BridgeCallMaxGasLimit
	}
	return 0
}

func (m *ForkParams) GetEnableSendToExternalPending() bool {
	if m != nil {
		return m.EnableSendToExternalPending
	}
	return false
}

func (m *ForkParams) GetEnableBridgeCallPending() bool {
	if m != nil {
		return m.EnableBridgeCallPending
	}
	return false
}

// Deprecated: Do not use.
type UpdateChainOraclesProposal struct {
	// the title of the update proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Oracles     []string `protobuf:"bytes,3,rep,name=oracles,proto3" json:"oracles,omitempty"`
	ChainName   string   `protobuf:"bytes,4,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *UpdateChainOraclesProposal) Reset()      { *m = UpdateChainOraclesProposal{} }
func (*UpdateChainOraclesProposal) ProtoMessage() {}
func (*UpdateChainOraclesProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_276fc1a91771efc3, []int{2}
}
func (m *UpdateChainOraclesProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChainOraclesProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChainOraclesProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChainOraclesProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChainOraclesProposal.Merge(m, src)
}
func (m *UpdateChainOraclesProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChainOraclesProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChainOraclesProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChainOraclesProposal proto.InternalMessageInfo

// Deprecated: after block 5713000
type MsgSetOrchestratorAddress struct {
	OracleAddress   string     `protobuf:"bytes,1,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	BridgerAddress  string     `protobuf:"bytes,2,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
	ExternalAddress string     `protobuf:"bytes,3,opt,name=external_address,json=externalAddress,proto3" json:"external_address,omitempty"`
	Deposit         types.Coin `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit"`
	ChainName       string     `protobuf:"bytes,5,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *MsgSetOrchestratorAddress) Reset()         { *m = MsgSetOrchestratorAddress{} }
func (m *MsgSetOrchestratorAddress) String() string { return proto.CompactTextString(m) }
func (*MsgSetOrchestratorAddress) ProtoMessage()    {}
func (*MsgSetOrchestratorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_276fc1a91771efc3, []int{3}
}
func (m *MsgSetOrchestratorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOrchestratorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOrchestratorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOrchestratorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOrchestratorAddress.Merge(m, src)
}
func (m *MsgSetOrchestratorAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOrchestratorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOrchestratorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOrchestratorAddress proto.InternalMessageInfo

func (m *MsgSetOrchestratorAddress) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

func (m *MsgSetOrchestratorAddress) GetBridgerAddress() string {
	if m != nil {
		return m.BridgerAddress
	}
	return ""
}

func (m *MsgSetOrchestratorAddress) GetExternalAddress() string {
	if m != nil {
		return m.ExternalAddress
	}
	return ""
}

func (m *MsgSetOrchestratorAddress) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

func (m *MsgSetOrchestratorAddress) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

// Deprecated: after block 5713000
type MsgAddOracleDeposit struct {
	OracleAddress string     `protobuf:"bytes,1,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	Amount        types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	ChainName     string     `protobuf:"bytes,3,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *MsgAddOracleDeposit) Reset()         { *m = MsgAddOracleDeposit{} }
func (m *MsgAddOracleDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgAddOracleDeposit) ProtoMessage()    {}
func (*MsgAddOracleDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_276fc1a91771efc3, []int{4}
}
func (m *MsgAddOracleDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddOracleDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddOracleDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddOracleDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddOracleDeposit.Merge(m, src)
}
func (m *MsgAddOracleDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddOracleDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddOracleDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddOracleDeposit proto.InternalMessageInfo

func (m *MsgAddOracleDeposit) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

func (m *MsgAddOracleDeposit) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgAddOracleDeposit) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

// Deprecated: Do not use.
type MsgCancelSendToExternal struct {
	TransactionId uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Sender        string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	ChainName     string `protobuf:"bytes,3,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *MsgCancelSendToExternal) Reset()         { *m = MsgCancelSendToExternal{} }
func (m *MsgCancelSendToExternal) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToExternal) ProtoMessage()    {}
func (*MsgCancelSendToExternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_276fc1a91771efc3, []int{5}
}
func (m *MsgCancelSendToExternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToExternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToExternal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToExternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToExternal.Merge(m, src)
}
func (m *MsgCancelSendToExternal) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToExternal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToExternal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToExternal proto.InternalMessageInfo

func (m *MsgCancelSendToExternal) GetTransactionId() uint64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *MsgCancelSendToExternal) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCancelSendToExternal) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

// Deprecated: Do not use.
type MsgRequestBatch struct {
	Sender     string                `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom      string                `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	MinimumFee cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=minimum_fee,json=minimumFee,proto3,customtype=cosmossdk.io/math.Int" json:"minimum_fee"`
	FeeReceive string                `protobuf:"bytes,4,opt,name=fee_receive,json=feeReceive,proto3" json:"fee_receive,omitempty"`
	ChainName  string                `protobuf:"bytes,5,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	BaseFee    cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=base_fee,json=baseFee,proto3,customtype=cosmossdk.io/math.Int" json:"base_fee"`
}

func (m *MsgRequestBatch) Reset()         { *m = MsgRequestBatch{} }
func (m *MsgRequestBatch) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatch) ProtoMessage()    {}
func (*MsgRequestBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_276fc1a91771efc3, []int{6}
}
func (m *MsgRequestBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatch.Merge(m, src)
}
func (m *MsgRequestBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatch proto.InternalMessageInfo

func (m *MsgRequestBatch) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRequestBatch) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgRequestBatch) GetFeeReceive() string {
	if m != nil {
		return m.FeeReceive
	}
	return ""
}

func (m *MsgRequestBatch) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

// Deprecated: Do not use.
type MsgIncreaseBridgeFee struct {
	ChainName     string     `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	TransactionId uint64     `protobuf:"varint,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Sender        string     `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	AddBridgeFee  types.Coin `protobuf:"bytes,4,opt,name=add_bridge_fee,json=addBridgeFee,proto3" json:"add_bridge_fee"`
}

func (m *MsgIncreaseBridgeFee) Reset()         { *m = MsgIncreaseBridgeFee{} }
func (m *MsgIncreaseBridgeFee) String() string { return proto.CompactTextString(m) }
func (*MsgIncreaseBridgeFee) ProtoMessage()    {}
func (*MsgIncreaseBridgeFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_276fc1a91771efc3, []int{7}
}
func (m *MsgIncreaseBridgeFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIncreaseBridgeFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIncreaseBridgeFee.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIncreaseBridgeFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIncreaseBridgeFee.Merge(m, src)
}
func (m *MsgIncreaseBridgeFee) XXX_Size() int {
	return m.Size()
}
func (m *MsgIncreaseBridgeFee) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIncreaseBridgeFee.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIncreaseBridgeFee proto.InternalMessageInfo

func (m *MsgIncreaseBridgeFee) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *MsgIncreaseBridgeFee) GetTransactionId() uint64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *MsgIncreaseBridgeFee) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgIncreaseBridgeFee) GetAddBridgeFee() types.Coin {
	if m != nil {
		return m.AddBridgeFee
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*InitCrossChainParamsProposal)(nil), "fx.gravity.crosschain.v1.InitCrossChainParamsProposal")
	proto.RegisterType((*ForkParams)(nil), "fx.gravity.crosschain.v1.ForkParams")
	proto.RegisterType((*UpdateChainOraclesProposal)(nil), "fx.gravity.crosschain.v1.UpdateChainOraclesProposal")
	proto.RegisterType((*MsgSetOrchestratorAddress)(nil), "fx.gravity.crosschain.v1.MsgSetOrchestratorAddress")
	proto.RegisterType((*MsgAddOracleDeposit)(nil), "fx.gravity.crosschain.v1.MsgAddOracleDeposit")
	proto.RegisterType((*MsgCancelSendToExternal)(nil), "fx.gravity.crosschain.v1.MsgCancelSendToExternal")
	proto.RegisterType((*MsgRequestBatch)(nil), "fx.gravity.crosschain.v1.MsgRequestBatch")
	proto.RegisterType((*MsgIncreaseBridgeFee)(nil), "fx.gravity.crosschain.v1.MsgIncreaseBridgeFee")
}

func init() {
	proto.RegisterFile("fx/gravity/crosschain/v1/crosschain_legacy.proto", fileDescriptor_276fc1a91771efc3)
}

var fileDescriptor_276fc1a91771efc3 = []byte{
	// 1247 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xc6, 0x4e, 0xd2, 0x4c, 0x7e, 0xb5, 0xdb, 0xb4, 0xdd, 0xa4, 0xdf, 0xaf, 0x6d, 0x4c,
	0x81, 0xd0, 0x1f, 0xbb, 0x04, 0x2a, 0x28, 0xa1, 0x1c, 0xea, 0xa4, 0x81, 0x48, 0x75, 0x1b, 0x6d,
	0x83, 0x40, 0x5c, 0x56, 0xe3, 0xdd, 0xe7, 0xf5, 0xa8, 0xbb, 0x33, 0x66, 0x66, 0xec, 0xba, 0x37,
	0x84, 0x38, 0x20, 0x4e, 0x1c, 0xb9, 0x20, 0x55, 0xe2, 0x0c, 0xea, 0x81, 0x7f, 0x00, 0x71, 0xe9,
	0x81, 0x43, 0xc5, 0x09, 0x21, 0x54, 0xa1, 0xf6, 0x50, 0x4e, 0xfc, 0x0d, 0x68, 0x67, 0x66, 0xfd,
	0xab, 0x94, 0x04, 0xb8, 0x44, 0x99, 0xf7, 0x3e, 0xef, 0xbd, 0xcf, 0xfb, 0xb9, 0x46, 0xaf, 0xb4,
	0xfa, 0x5e, 0xcc, 0x71, 0x8f, 0xc8, 0x3b, 0x5e, 0xc8, 0x99, 0x10, 0x61, 0x1b, 0x13, 0xea, 0xf5,
	0x36, 0x46, 0x5e, 0x41, 0x02, 0x31, 0x0e, 0xef, 0xb8, 0x1d, 0xce, 0x24, 0xb3, 0x9d, 0x56, 0xdf,
	0x35, 0x16, 0xee, 0x10, 0xe3, 0xf6, 0x36, 0xd6, 0x56, 0x62, 0x16, 0x33, 0x05, 0xf2, 0xb2, 0xff,
	0x34, 0x7e, 0xad, 0x1c, 0x32, 0x91, 0x32, 0xe1, 0x35, 0xb1, 0x00, 0xaf, 0xb7, 0xd1, 0x04, 0x89,
	0x37, 0xbc, 0x90, 0x11, 0x6a, 0xf4, 0xa7, 0x8c, 0x3e, 0x15, 0x71, 0x16, 0x36, 0x15, 0xb1, 0x51,
	0xac, 0x6a, 0x45, 0xa0, 0x3d, 0xea, 0x87, 0x51, 0x1d, 0xc3, 0x29, 0xa1, 0xcc, 0x53, 0x7f, 0xb5,
	0xa8, 0xf6, 0xbd, 0x85, 0xfe, 0xb7, 0x4b, 0x89, 0xdc, 0xca, 0x28, 0x6d, 0x65, 0x94, 0xf6, 0x30,
	0xc7, 0xa9, 0xd8, 0xe3, 0xac, 0xc3, 0x04, 0x4e, 0xec, 0x15, 0x34, 0x2d, 0x89, 0x4c, 0xc0, 0xb1,
	0xaa, 0xd6, 0xfa, 0x9c, 0xaf, 0x1f, 0x76, 0x15, 0xcd, 0x47, 0x20, 0x42, 0x4e, 0x3a, 0x92, 0x30,
	0xea, 0x4c, 0x29, 0xdd, 0xa8, 0xc8, 0xbe, 0x8c, 0x66, 0x3a, 0xca, 0x93, 0x53, 0xac, 0x5a, 0xeb,
	0xf3, 0xaf, 0x9e, 0x71, 0x9f, 0x55, 0x00, 0x77, 0x87, 0xf1, 0x5b, 0x3a, 0xaa, 0x6f, 0x6c, 0xec,
	0xff, 0x23, 0xa4, 0x6b, 0x48, 0x71, 0x0a, 0x4e, 0x49, 0xb9, 0x9f, 0x53, 0x92, 0xeb, 0x38, 0x85,
	0xcd, 0x85, 0xcf, 0xee, 0x56, 0x0a, 0x5f, 0xde, 0xad, 0x14, 0x7e, 0xbf, 0x5b, 0x29, 0xd4, 0xbe,
	0x9e, 0x45, 0x68, 0xe8, 0x23, 0xb3, 0x35, 0x71, 0x02, 0x12, 0x19, 0xda, 0x73, 0x46, 0xb2, 0x1b,
	0xd9, 0xe7, 0x91, 0x8d, 0x7b, 0xc0, 0x71, 0x0c, 0x41, 0x33, 0x61, 0xe1, 0xad, 0x40, 0x92, 0x14,
	0x54, 0x06, 0x25, 0xff, 0xa8, 0xd1, 0xd4, 0x33, 0xc5, 0x3e, 0x49, 0xc1, 0xbe, 0x88, 0x4e, 0x42,
	0x5f, 0x02, 0xa7, 0x38, 0x09, 0x9a, 0x58, 0x86, 0x6d, 0x05, 0x67, 0x5d, 0xa9, 0xd2, 0x2a, 0xf9,
	0x2b, 0xb9, 0xb6, 0x9e, 0x29, 0xf7, 0xb5, 0xce, 0x7e, 0x1b, 0x9d, 0xce, 0x63, 0x0c, 0xad, 0x87,
	0xc1, 0x4a, 0xca, 0xd4, 0x31, 0x90, 0xab, 0xb9, 0x87, 0x41, 0xd0, 0xe7, 0xd1, 0xa2, 0x20, 0x31,
	0x85, 0x28, 0xb8, 0x4d, 0x68, 0xc4, 0x6e, 0x3b, 0xd3, 0xca, 0x60, 0x41, 0x0b, 0xdf, 0x57, 0x32,
	0xfb, 0x03, 0xb4, 0x24, 0x12, 0x2c, 0xda, 0x41, 0x8b, 0xe3, 0x50, 0x75, 0x61, 0xa6, 0x6a, 0xad,
	0x2f, 0xd4, 0x37, 0xee, 0x3f, 0xac, 0x14, 0x7e, 0x79, 0x58, 0x39, 0xad, 0x5b, 0x2f, 0xa2, 0x5b,
	0x2e, 0x61, 0x5e, 0x8a, 0x65, 0xdb, 0xbd, 0xa6, 0x06, 0x72, 0x1b, 0xc2, 0x9f, 0xbe, 0xbb, 0x80,
	0xcc, 0x64, 0x6c, 0x43, 0xe8, 0x2f, 0x2a, 0x47, 0x3b, 0xc6, 0x8f, 0xfd, 0xa9, 0x85, 0x5e, 0x64,
	0x1c, 0x87, 0x09, 0x04, 0x02, 0x64, 0xd0, 0xed, 0x44, 0x58, 0x42, 0xd0, 0x61, 0xb7, 0x81, 0x07,
	0x61, 0x1b, 0xd3, 0x18, 0x82, 0x0e, 0xf0, 0x10, 0xa8, 0x74, 0x66, 0xff, 0x6d, 0xc8, 0xe7, 0x74,
	0x80, 0x9b, 0x20, 0xdf, 0x53, 0xee, 0xf7, 0x32, 0xef, 0x5b, 0xca, 0xf9, 0x9e, 0xf6, 0x9d, 0x15,
	0x91, 0x34, 0xc3, 0x40, 0x72, 0x4c, 0x45, 0x0b, 0x78, 0x5e, 0xf8, 0xa0, 0x0d, 0x24, 0x6e, 0x4b,
	0xe7, 0x88, 0x2e, 0x22, 0x69, 0x86, 0xfb, 0x06, 0x61, 0xaa, 0xff, 0xae, 0xd2, 0xdb, 0x65, 0x34,
	0xab, 0x63, 0x08, 0x67, 0xae, 0x5a, 0x5c, 0x9f, 0xab, 0x97, 0xee, 0x3f, 0xac, 0x58, 0x7e, 0x2e,
	0xb4, 0xaf, 0x23, 0x3b, 0x82, 0x6c, 0x45, 0x25, 0x04, 0xb2, 0xcd, 0x41, 0xb4, 0x59, 0x12, 0x39,
	0x48, 0x0d, 0xeb, 0xaa, 0x6b, 0xa8, 0x66, 0xdb, 0xe7, 0x9a, 0xed, 0x73, 0xb7, 0x18, 0xa1, 0xca,
	0x4b, 0xc1, 0x3f, 0x96, 0x9b, 0xee, 0xe7, 0x96, 0xf6, 0x39, 0x34, 0x10, 0x06, 0x69, 0x37, 0x91,
	0xa4, 0x93, 0x80, 0x33, 0x5f, 0xb5, 0xd6, 0x8b, 0xfe, 0xd1, 0x5c, 0xd1, 0x30, 0x72, 0xdb, 0x45,
	0xc7, 0x9b, 0x9c, 0x44, 0x31, 0x04, 0x21, 0x4e, 0x92, 0xc1, 0x4c, 0x2d, 0xa8, 0x9c, 0x8e, 0x69,
	0xd5, 0x16, 0x4e, 0x92, 0x7c, 0xa0, 0x2e, 0xa1, 0xd5, 0x51, 0x7c, 0x8a, 0xfb, 0x41, 0x8c, 0x45,
	0x90, 0x90, 0x94, 0x48, 0x67, 0x51, 0x59, 0x9d, 0x18, 0x5a, 0x35, 0x70, 0xff, 0x1d, 0x2c, 0xae,
	0x65, 0x4a, 0x7b, 0x1b, 0x55, 0x80, 0xe2, 0xa6, 0xea, 0x25, 0x8d, 0x02, 0xc9, 0x86, 0x13, 0xd9,
	0x01, 0x1a, 0x11, 0x1a, 0x3b, 0x4b, 0x55, 0x6b, 0xfd, 0x88, 0x7f, 0x5a, 0xc3, 0x6e, 0x02, 0x8d,
	0xf6, 0x59, 0x3e, 0x93, 0x7b, 0x1a, 0x62, 0xbf, 0x85, 0xd6, 0x8c, 0x97, 0x51, 0x1a, 0xb9, 0x83,
	0x65, 0xe5, 0xe0, 0x94, 0x46, 0xd4, 0x07, 0x34, 0x8c, 0xf1, 0x66, 0xe9, 0xe3, 0x5f, 0xab, 0x85,
	0xda, 0x57, 0x16, 0x5a, 0xd3, 0xbd, 0x56, 0x67, 0xe6, 0x86, 0x6e, 0xc3, 0x7f, 0xbe, 0x33, 0xce,
	0xb0, 0xcd, 0xc5, 0xac, 0xcd, 0xc3, 0x06, 0x1f, 0x70, 0x43, 0x96, 0x46, 0x6f, 0x88, 0x63, 0xd5,
	0xbe, 0x9d, 0x42, 0xab, 0x0d, 0x11, 0xdf, 0x04, 0x79, 0x83, 0x87, 0x6d, 0x10, 0x92, 0x63, 0xc9,
	0xf8, 0x95, 0x28, 0xe2, 0x20, 0x84, 0xfd, 0x02, 0x5a, 0x32, 0x2b, 0x81, 0xb5, 0xc4, 0xf0, 0x5c,
	0xd4, 0xd2, 0x1c, 0xf6, 0x12, 0x5a, 0xd6, 0x05, 0xe2, 0x03, 0x9c, 0xe6, 0xbc, 0x64, 0xc4, 0x39,
	0xf0, 0x65, 0x74, 0x74, 0xd0, 0x87, 0x1c, 0x59, 0x54, 0xc8, 0xe5, 0x5c, 0x9e, 0x43, 0xdf, 0x44,
	0xb3, 0x11, 0x74, 0x98, 0x20, 0x52, 0x25, 0x71, 0x88, 0xe9, 0xcc, 0xf1, 0x13, 0x25, 0x98, 0x9e,
	0x2c, 0xc1, 0xe5, 0x4f, 0x9e, 0xdc, 0x3b, 0x3b, 0x91, 0xd7, 0xe7, 0x4f, 0xee, 0x9d, 0x3d, 0x33,
	0xf2, 0x49, 0x7b, 0x66, 0x49, 0x6a, 0x3f, 0x5a, 0xe8, 0x78, 0x43, 0xc4, 0x57, 0xa2, 0x48, 0xf7,
	0x72, 0xdb, 0x04, 0x3d, 0x64, 0xa9, 0xde, 0x40, 0x33, 0x38, 0x65, 0x5d, 0x2a, 0x55, 0x85, 0x0e,
	0x91, 0x95, 0x81, 0x4f, 0x24, 0x55, 0x9c, 0x4c, 0xea, 0xf5, 0x67, 0x24, 0x55, 0x1e, 0x4f, 0x6a,
	0x92, 0x76, 0xed, 0x1b, 0x0b, 0x9d, 0x6a, 0x88, 0x78, 0x0b, 0xd3, 0x10, 0x92, 0xf1, 0x2d, 0xc8,
	0x52, 0x52, 0x67, 0x48, 0x1f, 0xc8, 0xfc, 0xb3, 0x52, 0xf2, 0x17, 0x47, 0xa4, 0xbb, 0x91, 0x7d,
	0x12, 0xcd, 0x64, 0x4b, 0x06, 0xdc, 0x34, 0xdd, 0xbc, 0x0e, 0x62, 0x7c, 0x31, 0x63, 0x6c, 0xb0,
	0x19, 0xd3, 0xda, 0x38, 0xd3, 0xbf, 0x62, 0xe4, 0x58, 0xb5, 0x1f, 0xa6, 0xd0, 0x72, 0x43, 0xc4,
	0x3e, 0x7c, 0xd4, 0x05, 0x21, 0xd5, 0xe7, 0x67, 0x84, 0x80, 0x35, 0x46, 0x60, 0x05, 0x4d, 0x47,
	0x40, 0x59, 0x6a, 0x78, 0xe9, 0x87, 0x7d, 0x0d, 0xcd, 0xa7, 0x84, 0x92, 0xb4, 0x9b, 0x06, 0x2d,
	0x30, 0xbc, 0xea, 0xe7, 0xcc, 0x2d, 0x3f, 0xf1, 0xf4, 0x2d, 0xdf, 0xa5, 0x72, 0xe4, 0x8a, 0xef,
	0x52, 0xe9, 0x23, 0x63, 0xbf, 0x03, 0x60, 0x57, 0xd0, 0x7c, 0x0b, 0x20, 0xe0, 0x10, 0x02, 0xe9,
	0xe5, 0xfb, 0x86, 0x5a, 0x00, 0xbe, 0x96, 0x1c, 0x30, 0x8c, 0xf6, 0x0e, 0x3a, 0x92, 0x75, 0x5e,
	0x51, 0x99, 0xf9, 0xe7, 0x54, 0x66, 0x33, 0xe3, 0x1d, 0x80, 0xcd, 0xf3, 0x13, 0xd5, 0x5c, 0x1b,
	0xaf, 0xe6, 0x68, 0xbd, 0x1c, 0xab, 0xf6, 0x87, 0x85, 0x56, 0x1a, 0x22, 0xde, 0xa5, 0x21, 0x07,
	0x2c, 0xcc, 0xf1, 0xca, 0xd2, 0x19, 0x67, 0x6b, 0x4d, 0xb2, 0x7d, 0x7a, 0x22, 0xa6, 0xfe, 0x7e,
	0x22, 0x8a, 0x63, 0x0d, 0xb9, 0x8a, 0x96, 0x70, 0x14, 0xe5, 0xc7, 0x34, 0x4b, 0xf9, 0x90, 0xab,
	0xbd, 0x80, 0xa3, 0x68, 0x40, 0x72, 0x73, 0x63, 0x22, 0xd7, 0xca, 0x78, 0xae, 0x4f, 0x65, 0xe5,
	0x58, 0xf5, 0xed, 0xfb, 0x8f, 0xca, 0xd6, 0x83, 0x47, 0x65, 0xeb, 0xb7, 0x47, 0x65, 0xeb, 0x8b,
	0xc7, 0xe5, 0xc2, 0x83, 0xc7, 0xe5, 0xc2, 0xcf, 0x8f, 0xcb, 0x85, 0x0f, 0xcf, 0xc6, 0x44, 0xb6,
	0xbb, 0x4d, 0x37, 0x64, 0xa9, 0xd7, 0xe9, 0xd2, 0x88, 0x60, 0xe2, 0xb5, 0xfa, 0x17, 0x42, 0xc6,
	0xc1, 0xeb, 0x5d, 0xf2, 0xe4, 0x9d, 0x0e, 0x08, 0x4f, 0xff, 0xa6, 0x6d, 0xce, 0xa8, 0x5f, 0x8f,
	0xaf, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x72, 0x38, 0xd9, 0x08, 0x0b, 0x00, 0x00,
}

func (m *InitCrossChainParamsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitCrossChainParamsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitCrossChainParamsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrosschainLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ForkParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ForkParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ForkParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableBridgeCallPending {
		i--
		if m.EnableBridgeCallPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.EnableSendToExternalPending {
		i--
		if m.EnableSendToExternalPending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.BridgeCallMaxGasLimit != 0 {
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(m.BridgeCallMaxGasLimit))
		i--
		dAtA[i] = 0x68
	}
	if m.BridgeCallTimeout != 0 {
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(m.BridgeCallTimeout))
		i--
		dAtA[i] = 0x60
	}
	if m.DelegateMultiple != 0 {
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(m.DelegateMultiple))
		i--
		dAtA[i] = 0x58
	}
	{
		size, err := m.DelegateThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Oracles[iNdEx])
			copy(dAtA[i:], m.Oracles[iNdEx])
			i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.Oracles[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.IbcTransferTimeoutHeight != 0 {
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(m.IbcTransferTimeoutHeight))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.OracleSetUpdatePowerChangePercent.Size()
		i -= size
		if _, err := m.OracleSetUpdatePowerChangePercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.SlashFraction.Size()
		i -= size
		if _, err := m.SlashFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.SignedWindow != 0 {
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(m.SignedWindow))
		i--
		dAtA[i] = 0x28
	}
	if m.AverageExternalBlockTime != 0 {
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(m.AverageExternalBlockTime))
		i--
		dAtA[i] = 0x20
	}
	if m.ExternalBatchTimeout != 0 {
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(m.ExternalBatchTimeout))
		i--
		dAtA[i] = 0x18
	}
	if m.AverageBlockTime != 0 {
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(m.AverageBlockTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GravityId) > 0 {
		i -= len(m.GravityId)
		copy(dAtA[i:], m.GravityId)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.GravityId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateChainOraclesProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChainOraclesProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateChainOraclesProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Oracles[iNdEx])
			copy(dAtA[i:], m.Oracles[iNdEx])
			i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.Oracles[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetOrchestratorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOrchestratorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOrchestratorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ExternalAddress) > 0 {
		i -= len(m.ExternalAddress)
		copy(dAtA[i:], m.ExternalAddress)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.ExternalAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BridgerAddress) > 0 {
		i -= len(m.BridgerAddress)
		copy(dAtA[i:], m.BridgerAddress)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.BridgerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddOracleDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddOracleDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddOracleDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToExternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.TransactionId != 0 {
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BaseFee.Size()
		i -= size
		if _, err := m.BaseFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FeeReceive) > 0 {
		i -= len(m.FeeReceive)
		copy(dAtA[i:], m.FeeReceive)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.FeeReceive)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.MinimumFee.Size()
		i -= size
		if _, err := m.MinimumFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIncreaseBridgeFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIncreaseBridgeFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIncreaseBridgeFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AddBridgeFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TransactionId != 0 {
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintCrosschainLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrosschainLegacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrosschainLegacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitCrossChainParamsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	return n
}

func (m *ForkParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GravityId)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	if m.AverageBlockTime != 0 {
		n += 1 + sovCrosschainLegacy(uint64(m.AverageBlockTime))
	}
	if m.ExternalBatchTimeout != 0 {
		n += 1 + sovCrosschainLegacy(uint64(m.ExternalBatchTimeout))
	}
	if m.AverageExternalBlockTime != 0 {
		n += 1 + sovCrosschainLegacy(uint64(m.AverageExternalBlockTime))
	}
	if m.SignedWindow != 0 {
		n += 1 + sovCrosschainLegacy(uint64(m.SignedWindow))
	}
	l = m.SlashFraction.Size()
	n += 1 + l + sovCrosschainLegacy(uint64(l))
	l = m.OracleSetUpdatePowerChangePercent.Size()
	n += 1 + l + sovCrosschainLegacy(uint64(l))
	if m.IbcTransferTimeoutHeight != 0 {
		n += 1 + sovCrosschainLegacy(uint64(m.IbcTransferTimeoutHeight))
	}
	if len(m.Oracles) > 0 {
		for _, s := range m.Oracles {
			l = len(s)
			n += 1 + l + sovCrosschainLegacy(uint64(l))
		}
	}
	l = m.DelegateThreshold.Size()
	n += 1 + l + sovCrosschainLegacy(uint64(l))
	if m.DelegateMultiple != 0 {
		n += 1 + sovCrosschainLegacy(uint64(m.DelegateMultiple))
	}
	if m.BridgeCallTimeout != 0 {
		n += 1 + sovCrosschainLegacy(uint64(m.BridgeCallTimeout))
	}
	if m.BridgeCallMaxGasLimit != 0 {
		n += 1 + sovCrosschainLegacy(uint64(m.BridgeCallMaxGasLimit))
	}
	if m.EnableSendToExternalPending {
		n += 2
	}
	if m.EnableBridgeCallPending {
		n += 2
	}
	return n
}

func (m *UpdateChainOraclesProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	if len(m.Oracles) > 0 {
		for _, s := range m.Oracles {
			l = len(s)
			n += 1 + l + sovCrosschainLegacy(uint64(l))
		}
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	return n
}

func (m *MsgSetOrchestratorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = len(m.BridgerAddress)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = len(m.ExternalAddress)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovCrosschainLegacy(uint64(l))
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	return n
}

func (m *MsgAddOracleDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCrosschainLegacy(uint64(l))
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	return n
}

func (m *MsgCancelSendToExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionId != 0 {
		n += 1 + sovCrosschainLegacy(uint64(m.TransactionId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	return n
}

func (m *MsgRequestBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = m.MinimumFee.Size()
	n += 1 + l + sovCrosschainLegacy(uint64(l))
	l = len(m.FeeReceive)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = m.BaseFee.Size()
	n += 1 + l + sovCrosschainLegacy(uint64(l))
	return n
}

func (m *MsgIncreaseBridgeFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	if m.TransactionId != 0 {
		n += 1 + sovCrosschainLegacy(uint64(m.TransactionId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCrosschainLegacy(uint64(l))
	}
	l = m.AddBridgeFee.Size()
	n += 1 + l + sovCrosschainLegacy(uint64(l))
	return n
}

func sovCrosschainLegacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrosschainLegacy(x uint64) (n int) {
	return sovCrosschainLegacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InitCrossChainParamsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitCrossChainParamsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitCrossChainParamsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &ForkParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ForkParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ForkParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ForkParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GravityId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GravityId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageBlockTime", wireType)
			}
			m.AverageBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalBatchTimeout", wireType)
			}
			m.ExternalBatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalBatchTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageExternalBlockTime", wireType)
			}
			m.AverageExternalBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AverageExternalBlockTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedWindow", wireType)
			}
			m.SignedWindow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignedWindow |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleSetUpdatePowerChangePercent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OracleSetUpdatePowerChangePercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcTransferTimeoutHeight", wireType)
			}
			m.IbcTransferTimeoutHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IbcTransferTimeoutHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegateThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateMultiple", wireType)
			}
			m.DelegateMultiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegateMultiple |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeCallTimeout", wireType)
			}
			m.BridgeCallTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeCallTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeCallMaxGasLimit", wireType)
			}
			m.BridgeCallMaxGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeCallMaxGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableSendToExternalPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableSendToExternalPending = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableBridgeCallPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableBridgeCallPending = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChainOraclesProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChainOraclesProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChainOraclesProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOrchestratorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOrchestratorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOrchestratorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddOracleDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddOracleDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddOracleDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToExternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToExternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToExternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeReceive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeReceive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIncreaseBridgeFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrosschainLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIncreaseBridgeFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIncreaseBridgeFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddBridgeFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddBridgeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrosschainLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrosschainLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrosschainLegacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrosschainLegacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrosschainLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrosschainLegacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrosschainLegacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrosschainLegacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrosschainLegacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrosschainLegacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrosschainLegacy = fmt.Errorf("proto: unexpected end of group")
)
