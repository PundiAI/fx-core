// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fx/staking/v1/staking_legacy.proto

package legacy

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Deprecated: Do not use.
type MsgGrantPrivilege struct {
	ValidatorAddress string     `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	FromAddress      string     `protobuf:"bytes,2,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToPubkey         *types.Any `protobuf:"bytes,3,opt,name=to_pubkey,json=toPubkey,proto3" json:"to_pubkey,omitempty"`
	Signature        string     `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgGrantPrivilege) Reset()         { *m = MsgGrantPrivilege{} }
func (m *MsgGrantPrivilege) String() string { return proto.CompactTextString(m) }
func (*MsgGrantPrivilege) ProtoMessage()    {}
func (*MsgGrantPrivilege) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ac4460055f235c, []int{0}
}
func (m *MsgGrantPrivilege) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGrantPrivilege) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGrantPrivilege.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGrantPrivilege) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGrantPrivilege.Merge(m, src)
}
func (m *MsgGrantPrivilege) XXX_Size() int {
	return m.Size()
}
func (m *MsgGrantPrivilege) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGrantPrivilege.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGrantPrivilege proto.InternalMessageInfo

func (m *MsgGrantPrivilege) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgGrantPrivilege) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *MsgGrantPrivilege) GetToPubkey() *types.Any {
	if m != nil {
		return m.ToPubkey
	}
	return nil
}

func (m *MsgGrantPrivilege) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// Deprecated: Do not use.
type MsgEditConsensusPubKey struct {
	ValidatorAddress string     `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	From             string     `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Pubkey           *types.Any `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *MsgEditConsensusPubKey) Reset()         { *m = MsgEditConsensusPubKey{} }
func (m *MsgEditConsensusPubKey) String() string { return proto.CompactTextString(m) }
func (*MsgEditConsensusPubKey) ProtoMessage()    {}
func (*MsgEditConsensusPubKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ac4460055f235c, []int{1}
}
func (m *MsgEditConsensusPubKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditConsensusPubKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditConsensusPubKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditConsensusPubKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditConsensusPubKey.Merge(m, src)
}
func (m *MsgEditConsensusPubKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditConsensusPubKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditConsensusPubKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditConsensusPubKey proto.InternalMessageInfo

func (m *MsgEditConsensusPubKey) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgEditConsensusPubKey) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgEditConsensusPubKey) GetPubkey() *types.Any {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgGrantPrivilege)(nil), "fx.staking.v1.MsgGrantPrivilege")
	proto.RegisterType((*MsgEditConsensusPubKey)(nil), "fx.staking.v1.MsgEditConsensusPubKey")
}

func init() {
	proto.RegisterFile("fx/staking/v1/staking_legacy.proto", fileDescriptor_74ac4460055f235c)
}

var fileDescriptor_74ac4460055f235c = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xcd, 0x6a, 0xea, 0x40,
	0x14, 0x76, 0xbc, 0x22, 0xd7, 0xf1, 0x5e, 0xb8, 0x06, 0xb9, 0x44, 0xb9, 0x04, 0xaf, 0x2b, 0xb9,
	0x17, 0x67, 0xb0, 0xdd, 0x94, 0xee, 0xb4, 0x7f, 0x0b, 0x11, 0xc4, 0x65, 0x37, 0x61, 0x92, 0x4c,
	0xa6, 0x83, 0x71, 0x26, 0xcc, 0x4c, 0x82, 0x79, 0x8b, 0xbe, 0x44, 0xdf, 0xa0, 0x0f, 0x51, 0xba,
	0x92, 0xae, 0xba, 0x2c, 0xfa, 0x22, 0xc5, 0x24, 0xda, 0x75, 0xe9, 0xee, 0x9c, 0xef, 0xfb, 0xce,
	0x39, 0xdf, 0x07, 0x07, 0xf6, 0xc3, 0x35, 0xd6, 0x86, 0x2c, 0xb9, 0x60, 0x38, 0x1d, 0x1d, 0x4a,
	0x37, 0xa2, 0x8c, 0xf8, 0x19, 0x8a, 0x95, 0x34, 0xd2, 0xfa, 0x19, 0xae, 0x51, 0x49, 0xa0, 0x74,
	0xd4, 0xed, 0xf8, 0x52, 0xaf, 0xa4, 0x76, 0x73, 0x12, 0x17, 0x4d, 0xa1, 0xec, 0x76, 0x98, 0x94,
	0x2c, 0xa2, 0x38, 0xef, 0xbc, 0x24, 0xc4, 0x44, 0x94, 0x4b, 0xfa, 0x2f, 0x00, 0xb6, 0x66, 0x9a,
	0xdd, 0x28, 0x22, 0xcc, 0x5c, 0xf1, 0x94, 0x47, 0x94, 0x51, 0xeb, 0x3f, 0x6c, 0xa5, 0x24, 0xe2,
	0x01, 0x31, 0x52, 0xb9, 0x24, 0x08, 0x14, 0xd5, 0xda, 0x06, 0x3d, 0x30, 0x68, 0x2c, 0x7e, 0x1d,
	0x89, 0x71, 0x81, 0x5b, 0x7f, 0xe1, 0x8f, 0x50, 0xc9, 0xd5, 0x51, 0x57, 0xcd, 0x75, 0xcd, 0x3d,
	0x76, 0x90, 0x4c, 0x61, 0xc3, 0x48, 0x37, 0x4e, 0xbc, 0x25, 0xcd, 0xec, 0x6f, 0x3d, 0x30, 0x68,
	0x9e, 0xb4, 0x51, 0x61, 0x0a, 0x1d, 0x4c, 0xa1, 0xb1, 0xc8, 0x26, 0xf6, 0xf3, 0xe3, 0xb0, 0x5d,
	0x7a, 0xf7, 0x55, 0x16, 0x1b, 0x89, 0xe6, 0x89, 0x37, 0xa5, 0xd9, 0xe2, 0xbb, 0x91, 0xf3, 0x7c,
	0xde, 0xfa, 0x03, 0x1b, 0x9a, 0x33, 0x41, 0x4c, 0xa2, 0xa8, 0x5d, 0xcb, 0x8f, 0x7d, 0x00, 0xe7,
	0x55, 0x1b, 0xf4, 0x1f, 0x00, 0xfc, 0x3d, 0xd3, 0xec, 0x2a, 0xe0, 0xe6, 0x42, 0x0a, 0x4d, 0x85,
	0x4e, 0x74, 0xb1, 0xe6, 0x73, 0xc9, 0x2c, 0x58, 0xdb, 0xa7, 0x28, 0x13, 0xe5, 0xb5, 0x75, 0x0d,
	0xeb, 0x5f, 0xca, 0x51, 0x4e, 0xef, 0x7d, 0x4e, 0x2e, 0x9f, 0xb6, 0x0e, 0xd8, 0x6c, 0x1d, 0xf0,
	0xb6, 0x75, 0xc0, 0xfd, 0xce, 0xa9, 0x6c, 0x76, 0x4e, 0xe5, 0x75, 0xe7, 0x54, 0x6e, 0xff, 0x31,
	0x6e, 0xee, 0x12, 0x0f, 0xf9, 0x72, 0x85, 0xe3, 0x44, 0x04, 0x9c, 0x70, 0x1c, 0xae, 0x87, 0xbe,
	0x54, 0x14, 0xa7, 0x67, 0xd8, 0x64, 0x31, 0xd5, 0xb8, 0xf8, 0x06, 0xaf, 0x9e, 0x5f, 0x3e, 0x7d,
	0x0f, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xe5, 0x11, 0xfe, 0x34, 0x02, 0x00, 0x00,
}

func (m *MsgGrantPrivilege) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGrantPrivilege) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGrantPrivilege) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintStakingLegacy(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.ToPubkey != nil {
		{
			size, err := m.ToPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStakingLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintStakingLegacy(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintStakingLegacy(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditConsensusPubKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditConsensusPubKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditConsensusPubKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStakingLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintStakingLegacy(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintStakingLegacy(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStakingLegacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovStakingLegacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgGrantPrivilege) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovStakingLegacy(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovStakingLegacy(uint64(l))
	}
	if m.ToPubkey != nil {
		l = m.ToPubkey.Size()
		n += 1 + l + sovStakingLegacy(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovStakingLegacy(uint64(l))
	}
	return n
}

func (m *MsgEditConsensusPubKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovStakingLegacy(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovStakingLegacy(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovStakingLegacy(uint64(l))
	}
	return n
}

func sovStakingLegacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStakingLegacy(x uint64) (n int) {
	return sovStakingLegacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgGrantPrivilege) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakingLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGrantPrivilege: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGrantPrivilege: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToPubkey == nil {
				m.ToPubkey = &types.Any{}
			}
			if err := m.ToPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakingLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditConsensusPubKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStakingLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditConsensusPubKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditConsensusPubKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStakingLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.Any{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStakingLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStakingLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStakingLegacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStakingLegacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStakingLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStakingLegacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStakingLegacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStakingLegacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStakingLegacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStakingLegacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStakingLegacy = fmt.Errorf("proto: unexpected end of group")
)
