// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IBridgeFeeQuoteQuoteInfo is an auto generated low-level Go binding around an user-defined struct.
type IBridgeFeeQuoteQuoteInfo struct {
	Id        *big.Int
	ChainName [32]byte
	TokenName [32]byte
	Oracle    common.Address
	Amount    *big.Int
	GasLimit  uint64
	Expiry    uint64
}

// IBridgeFeeQuoteQuoteInput is an auto generated low-level Go binding around an user-defined struct.
type IBridgeFeeQuoteQuoteInput struct {
	Cap       uint8
	GasLimit  uint64
	Expiry    uint64
	ChainName [32]byte
	TokenName [32]byte
	Amount    *big.Int
}

// BridgeFeeQuoteMetaData contains all meta data concerning the BridgeFeeQuote contract.
var BridgeFeeQuoteMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ChainNameAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainNameInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteCapInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNameAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNameInvalid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"}],\"name\":\"NewQuote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainNames\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"}],\"name\":\"getDefaultOracleQuote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getQuoteById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_cap\",\"type\":\"uint8\"}],\"name\":\"getQuoteByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"}],\"name\":\"getQuotesByToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"}],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_maxQuoteCap\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxQuoteCap\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInput[]\",\"name\":\"_inputs\",\"type\":\"tuple[]\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"}],\"name\":\"registerChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"}],\"name\":\"removeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b50608051612bf961004c60003960008181610ba801528181610be801528181610ddc01528181610e1c0152610eab0152612bf96000f3fe6080604052600436106101855760003560e01c8063943b24b2116100d1578063d547741f1161008a578063e58378bb11610064578063e58378bb146104bf578063ecbbc033146104e1578063f808443514610501578063fdb336f71461052157600080fd5b8063d547741f14610452578063e14f186414610472578063e47a543f1461049f57600080fd5b8063943b24b214610370578063a217fddf14610390578063a8541c17146103a5578063b908afa8146103c5578063bece7532146103f9578063cd87db921461043257600080fd5b80633659cfe61161013e5780634f1ef286116101185780634f1ef286146102fb57806352d1902d1461030e5780637b81dad71461032357806391d148541461035057600080fd5b80633659cfe61461028e57806336cbd832146102ae57806341fa04a8146102db57600080fd5b8063013fcc3d1461019157806301ffc9a7146101c7578063248a9ca3146101f75780632c189169146102355780632f2ff15d1461024c57806336568abe1461026e57600080fd5b3661018c57005b600080fd5b34801561019d57600080fd5b506101b16101ac366004612340565b610536565b6040516101be91906123b4565b60405180910390f35b3480156101d357600080fd5b506101e76101e23660046123f8565b610abb565b60405190151581526020016101be565b34801561020357600080fd5b50610227610212366004612422565b600090815260c9602052604090206001015490565b6040519081526020016101be565b34801561024157600080fd5b5061022761012e5481565b34801561025857600080fd5b5061026c610267366004612450565b610af0565b005b34801561027a57600080fd5b5061026c610289366004612450565b610b1a565b34801561029a57600080fd5b5061026c6102a9366004612480565b610b9d565b3480156102ba57600080fd5b506102ce6102c93660046124b3565b610c7d565b6040516101be9190612554565b3480156102e757600080fd5b506101e76102f6366004612562565b610d0a565b61026c610309366004612626565b610dd1565b34801561031a57600080fd5b50610227610e9e565b34801561032f57600080fd5b5061012d5461033e9060ff1681565b60405160ff90911681526020016101be565b34801561035c57600080fd5b506101e761036b366004612450565b610f51565b34801561037c57600080fd5b5061026c61038b3660046126cd565b610f7c565b34801561039c57600080fd5b50610227600081565b3480156103b157600080fd5b506102ce6103c0366004612422565b61111d565b3480156103d157600080fd5b506102277f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba10150881565b34801561040557600080fd5b5061012f5461041a906001600160a01b031681565b6040516001600160a01b0390911681526020016101be565b34801561043e57600080fd5b506101e761044d366004612562565b611216565b34801561045e57600080fd5b5061026c61046d366004612450565b6112eb565b34801561047e57600080fd5b5061049261048d366004612702565b611310565b6040516101be9190612724565b3480156104ab57600080fd5b506104926104ba366004612702565b6114fc565b3480156104cb57600080fd5b50610227600080516020612b5d83398151915281565b3480156104ed57600080fd5b506101b16104fc366004612422565b61169a565b34801561050d57600080fd5b506101e761051c366004612562565b6116b5565b34801561052d57600080fd5b506101b161175d565b606061054061176f565b6000826001600160401b0381111561055a5761055a6125e0565b604051908082528060200260200182016040528015610583578160200160208202803683370190505b50905060005b83811015610aa8576105b18585838181106105a6576105a6612766565b905060c002016117c9565b5061012f546001600160a01b031663b338123c8686848181106105d6576105d6612766565b6040516001600160e01b031960e086901b168152606060c09092029390930101356004830152503360248201526044016020604051808303816000875af1158015610625573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610649919061277c565b61066657604051635a10f29160e11b815260040160405180910390fd5b60006106d186868481811061067d5761067d612766565b905060c002016060013587878581811061069957610699612766565b905060c0020160800135338989878181106106b6576106b6612766565b6106cc92602060c090920201908101915061279e565b611872565b60008181526101346020526040902054909150801561072d5760008181526101336020908152604080832080546001600160801b03191681556001810184905560020183905561012e5485845261013490925290912055610825565b6040518060a0016040528061012e54815260200188888681811061075357610753612766565b905060c0020160600135815260200188888681811061077457610774612766565b905060c00201608001358152602001336001600160a01b031681526020018888868181106107a4576107a4612766565b6107ba92602060c090920201908101915061279e565b60ff9081169091526000848152610134602090815260409182902084518155908401516001820155908301516002820155606083015160039091018054608090940151909216600160a01b026001600160a81b03199093166001600160a01b03909116179190911790555b604051806080016040528088888681811061084257610842612766565b905060c00201604001602081019061085a91906127b9565b6001600160401b0316815260200188888681811061087a5761087a612766565b905060c00201602001602081019061089291906127b9565b6001600160401b031681526020018888868181106108b2576108b2612766565b60a060c0909102929092019190910135825250602090810184905261012e80546000908152610133835260409081902084518154948601516001600160401b03908116600160401b026001600160801b0319909616911617939093178355830151600183015560609092015160029091015554845185908590811061093957610939612766565b60200260200101818152505086868481811061095757610957612766565b905060c002016080013587878581811061097357610973612766565b905060c002016060013561012e547faaa59a21a73d2d9728095280eca494951b3d50f06502210d9ab16a1ff3a7bc58338b8b898181106109b5576109b5612766565b905060c0020160a001358c8c8a8181106109d1576109d1612766565b905060c0020160200160208101906109e991906127b9565b8d8d8b8181106109fb576109fb612766565b905060c002016040016020810190610a1391906127b9565b8e8e8c818110610a2557610a25612766565b610a3b92602060c090920201908101915061279e565b604080516001600160a01b0396909616865260208601949094526001600160401b03928316858501529116606084015260ff166080830152519081900360a00190a461012e8054906000610a8e836127f8565b919050555050508080610aa0906127f8565b915050610589565b509050610ab5600160fb55565b92915050565b60006001600160e01b03198216637965db0b60e01b1480610ab557506301ffc9a760e01b6001600160e01b0319831614610ab5565b600082815260c96020526040902060010154610b0b816118dd565b610b1583836118e7565b505050565b6001600160a01b0381163314610b8f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610b99828261196d565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610be65760405162461bcd60e51b8152600401610b8690612813565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c2f600080516020612b7d833981519152546001600160a01b031690565b6001600160a01b031614610c555760405162461bcd60e51b8152600401610b869061285f565b610c5e816119d4565b60408051600080825260208201909252610c7a918391906119fe565b50565b610c85612304565b8484610c9361013083611b69565b610caf5760405162b9a46560e61b815260040160405180910390fd5b600082815261013260205260409020610cc89082611b69565b610ce557604051637557bb2f60e11b815260040160405180910390fd5b6000610cf388888888611872565b9050610cfe81611b84565b98975050505050505050565b6000600080516020612b5d833981519152610d24816118dd565b60005b83811015610dc557610d62858583818110610d4457610d44612766565b60008a81526101326020908152604090912093910201359050611b69565b610d7f57604051637557bb2f60e11b815260040160405180910390fd5b610db2858583818110610d9457610d94612766565b60008a81526101326020908152604090912093910201359050611c82565b5080610dbd816127f8565b915050610d27565b50600195945050505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e1a5760405162461bcd60e51b8152600401610b8690612813565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e63600080516020612b7d833981519152546001600160a01b031690565b6001600160a01b031614610e895760405162461bcd60e51b8152600401610b869061285f565b610e92826119d4565b610b99828260016119fe565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f3e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610b86565b50600080516020612b7d83398151915290565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600054610100900460ff1615808015610f9c5750600054600160ff909116105b80610fb65750303b158015610fb6575060005460ff166001145b6110195760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610b86565b6000805460ff19166001179055801561103c576000805461ff0019166101001790555b61012f80546001600160a01b0319166001600160a01b03851617905561012d805460ff191660ff8416179055600161012e55611076611c8e565b61107e611c8e565b611086611cb7565b6110916000336118e7565b6110bb7f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba101508336118e7565b6110d3600080516020612b5d833981519152336118e7565b8015610b15576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b611125612304565b5060008181526101336020908152604080832081516080808201845282546001600160401b038082168452600160401b90910481168387019081526001808601548588019081526002968701546060808801829052908b526101348a5299889020885160a08082018b528254825293820154818c0190815298820154818b019081526003909201546001600160a01b03808216838f01908152600160a01b90920460ff16928901929092528a5160e081018c529d8e5298519a8d019a909a5251978b01979097529451909616968801969096529251928601929092529151831691840191909152511660c082015290565b6000600080516020612b5d833981519152611230816118dd565b61123c61013086611b69565b1561125a57604051630bb9107160e11b815260040160405180910390fd5b61126661013086611ce6565b5060005b83811015610dc557611287858583818110610d4457610d44612766565b156112a557604051634234cba560e01b815260040160405180910390fd5b6112d88585838181106112ba576112ba612766565b60008a81526101326020908152604090912093910201359050611ce6565b50806112e3816127f8565b91505061126a565b600082815260c96020526040902060010154611306816118dd565b610b15838361196d565b6060828261132061013083611b69565b61133c5760405162b9a46560e61b815260040160405180910390fd5b6000828152610132602052604090206113559082611b69565b61137257604051637557bb2f60e11b815260040160405180910390fd5b61012f54604051636116658160e01b8152600481018790526000916001600160a01b031690636116658190602401600060405180830381865afa1580156113bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113e591908101906128ab565b61012d5481519192506000916113fe9160ff1690612950565b90506000816001600160401b0381111561141a5761141a6125e0565b60405190808252806020026020018201604052801561145357816020015b611440612304565b8152602001906001900390816114385790505b5090506000805b84518110156114ee5760005b61012d5460ff90811690821610156114db5761149d8b8b88858151811061148f5761148f612766565b602002602001015184610c7d565b8484815181106114af576114af612766565b602002602001018190525082806114c5906127f8565b93505080806114d39061296f565b915050611466565b50806114e6816127f8565b91505061145a565b509098975050505050505050565b6060828261150c61013083611b69565b6115285760405162b9a46560e61b815260040160405180910390fd5b6000828152610132602052604090206115419082611b69565b61155e57604051637557bb2f60e11b815260040160405180910390fd5b61012f54604080516380dce16960e01b815290516000926001600160a01b0316916380dce1699160048083019260209291908290030181865afa1580156115a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cd919061298f565b61012d5490915060009060ff166001600160401b038111156115f1576115f16125e0565b60405190808252806020026020018201604052801561162a57816020015b611617612304565b81526020019060019003908161160f5790505b50905060005b61012d5460ff908116908216101561168f57600061165089898685611872565b905061165b81611b84565b838360ff168151811061167057611670612766565b60200260200101819052505080806116879061296f565b915050611630565b509695505050505050565b600081815261013260205260409020606090610ab590611cf2565b6000600080516020612b5d8339815191526116cf816118dd565b6116db61013086611b69565b6116f75760405162b9a46560e61b815260040160405180910390fd5b60005b83811015610dc557611717858583818110610d4457610d44612766565b1561173557604051634234cba560e01b815260040160405180910390fd5b61174a8585838181106112ba576112ba612766565b5080611755816127f8565b9150506116fa565b606061176a610130611cf2565b905090565b600260fb5414156117c25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610b86565b600260fb55565b6000606082013560808301356117e161013083611b69565b6117fd5760405162b9a46560e61b815260040160405180910390fd5b6000828152610132602052604090206118169082611b69565b61183357604051637557bb2f60e11b815260040160405180910390fd5b61012d5460ff16611847602086018661279e565b60ff16106118685760405163c54fa96960e01b815260040160405180910390fd5b5060019392505050565b6040805160208101869052908101849052606083811b6bffffffffffffffffffffffff19169082015260f882901b6001600160f81b03191660748201526000906075016040516020818303038152906040528051906020012090505b949350505050565b600160fb55565b610c7a8133611cff565b6118f18282610f51565b610b9957600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119293390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6119778282610f51565b15610b9957600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba101508610b99816118dd565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a3157610b1583611d58565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a8b575060408051601f3d908101601f19168201909252611a88918101906129ac565b60015b611aee5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610b86565b600080516020612b7d8339815191528114611b5d5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610b86565b50610b15838383611df4565b600081815260018301602052604081205415155b9392505050565b611b8c612304565b50600090815261013460209081526040808320815160a0808201845282548083526001808501548488019081526002808701548689019081526003909701546001600160a01b038082166060808a01918252600160a01b90930460ff166080808b0191909152968d526101338c529b8a90208a518088018c5281546001600160401b038082168352600160401b9091048116828f0190815297830154828e019081529290950154818501528b5160e081018d5299518a5294519b89019b909b529751988701989098529851909516958401959095529451948201949094529151841692820192909252905190911660c082015290565b6000611b7d8383611e1f565b600054610100900460ff16611cb55760405162461bcd60e51b8152600401610b86906129c5565b565b600054610100900460ff16611cde5760405162461bcd60e51b8152600401610b86906129c5565b611cb5611f12565b6000611b7d8383611f39565b60606000611b7d83611f88565b611d098282610f51565b610b9957611d1681611fe4565b611d21836020611ff6565b604051602001611d32929190612a3c565b60408051601f198184030181529082905262461bcd60e51b8252610b8691600401612ab1565b6001600160a01b0381163b611dc55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610b86565b600080516020612b7d83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611dfd83612191565b600082511180611e0a5750805b15610b1557611e1983836121d1565b50505050565b60008181526001830160205260408120548015611f08576000611e43600183612ae4565b8554909150600090611e5790600190612ae4565b9050818114611ebc576000866000018281548110611e7757611e77612766565b9060005260206000200154905080876000018481548110611e9a57611e9a612766565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611ecd57611ecd612afb565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610ab5565b6000915050610ab5565b600054610100900460ff166118d65760405162461bcd60e51b8152600401610b86906129c5565b6000818152600183016020526040812054611f8057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ab5565b506000610ab5565b606081600001805480602002602001604051908101604052809291908181526020018280548015611fd857602002820191906000526020600020905b815481526020019060010190808311611fc4575b50505050509050919050565b6060610ab56001600160a01b03831660145b60606000612005836002612950565b612010906002612b11565b6001600160401b03811115612027576120276125e0565b6040519080825280601f01601f191660200182016040528015612051576020820181803683370190505b509050600360fc1b8160008151811061206c5761206c612766565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061209b5761209b612766565b60200101906001600160f81b031916908160001a90535060006120bf846002612950565b6120ca906001612b11565b90505b6001811115612142576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106120fe576120fe612766565b1a60f81b82828151811061211457612114612766565b60200101906001600160f81b031916908160001a90535060049490941c9361213b81612b29565b90506120cd565b508315611b7d5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610b86565b61219a81611d58565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611b7d8383604051806060016040528060278152602001612b9d602791396060600080856001600160a01b03168560405161220e9190612b40565b600060405180830381855af49150503d8060008114612249576040519150601f19603f3d011682016040523d82523d6000602084013e61224e565b606091505b509150915061225f86838387612269565b9695505050505050565b606083156122d55782516122ce576001600160a01b0385163b6122ce5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b86565b50816118ce565b6118ce83838151156122ea5781518083602001fd5b8060405162461bcd60e51b8152600401610b869190612ab1565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6000806020838503121561235357600080fd5b82356001600160401b038082111561236a57600080fd5b818501915085601f83011261237e57600080fd5b81358181111561238d57600080fd5b86602060c0830285010111156123a257600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b818110156123ec578351835292840192918401916001016123d0565b50909695505050505050565b60006020828403121561240a57600080fd5b81356001600160e01b031981168114611b7d57600080fd5b60006020828403121561243457600080fd5b5035919050565b6001600160a01b0381168114610c7a57600080fd5b6000806040838503121561246357600080fd5b8235915060208301356124758161243b565b809150509250929050565b60006020828403121561249257600080fd5b8135611b7d8161243b565b803560ff811681146124ae57600080fd5b919050565b600080600080608085870312156124c957600080fd5b843593506020850135925060408501356124e28161243b565b91506124f06060860161249d565b905092959194509250565b8051825260208082015190830152604080820151908301526060808201516001600160a01b0316908301526080808201519083015260a0808201516001600160401b039081169184019190915260c09182015116910152565b60e08101610ab582846124fb565b60008060006040848603121561257757600080fd5b8335925060208401356001600160401b038082111561259557600080fd5b818601915086601f8301126125a957600080fd5b8135818111156125b857600080fd5b8760208260051b85010111156125cd57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561261e5761261e6125e0565b604052919050565b6000806040838503121561263957600080fd5b82356126448161243b565b91506020838101356001600160401b038082111561266157600080fd5b818601915086601f83011261267557600080fd5b813581811115612687576126876125e0565b612699601f8201601f191685016125f6565b915080825287848285010111156126af57600080fd5b80848401858401376000848284010152508093505050509250929050565b600080604083850312156126e057600080fd5b82356126eb8161243b565b91506126f96020840161249d565b90509250929050565b6000806040838503121561271557600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156123ec576127538385516124fb565b9284019260e09290920191600101612740565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561278e57600080fd5b81518015158114611b7d57600080fd5b6000602082840312156127b057600080fd5b611b7d8261249d565b6000602082840312156127cb57600080fd5b81356001600160401b0381168114611b7d57600080fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561280c5761280c6127e2565b5060010190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208083850312156128be57600080fd5b82516001600160401b03808211156128d557600080fd5b818501915085601f8301126128e957600080fd5b8151818111156128fb576128fb6125e0565b8060051b915061290c8483016125f6565b818152918301840191848101908884111561292657600080fd5b938501935b83851015610cfe57845192506129408361243b565b828252938501939085019061292b565b600081600019048311821515161561296a5761296a6127e2565b500290565b600060ff821660ff811415612986576129866127e2565b60010192915050565b6000602082840312156129a157600080fd5b8151611b7d8161243b565b6000602082840312156129be57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015612a2b578181015183820152602001612a13565b83811115611e195750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612a74816017850160208801612a10565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612aa5816028840160208801612a10565b01602801949350505050565b6020815260008251806020840152612ad0816040850160208701612a10565b601f01601f19169190910160400192915050565b600082821015612af657612af66127e2565b500390565b634e487b7160e01b600052603160045260246000fd5b60008219821115612b2457612b246127e2565b500190565b600081612b3857612b386127e2565b506000190190565b60008251612b52818460208701612a10565b919091019291505056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220f60b342a6d4bf9f08aac10d3d82f022a93edd6d291cd8158b1bba1cd7c0b7eac64736f6c634300080a0033",
}

// BridgeFeeQuoteABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeFeeQuoteMetaData.ABI instead.
var BridgeFeeQuoteABI = BridgeFeeQuoteMetaData.ABI

// BridgeFeeQuoteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeFeeQuoteMetaData.Bin instead.
var BridgeFeeQuoteBin = BridgeFeeQuoteMetaData.Bin

// DeployBridgeFeeQuote deploys a new Ethereum contract, binding an instance of BridgeFeeQuote to it.
func DeployBridgeFeeQuote(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BridgeFeeQuote, error) {
	parsed, err := BridgeFeeQuoteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeFeeQuoteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeFeeQuote{BridgeFeeQuoteCaller: BridgeFeeQuoteCaller{contract: contract}, BridgeFeeQuoteTransactor: BridgeFeeQuoteTransactor{contract: contract}, BridgeFeeQuoteFilterer: BridgeFeeQuoteFilterer{contract: contract}}, nil
}

// BridgeFeeQuote is an auto generated Go binding around an Ethereum contract.
type BridgeFeeQuote struct {
	BridgeFeeQuoteCaller     // Read-only binding to the contract
	BridgeFeeQuoteTransactor // Write-only binding to the contract
	BridgeFeeQuoteFilterer   // Log filterer for contract events
}

// BridgeFeeQuoteCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeFeeQuoteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFeeQuoteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeFeeQuoteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFeeQuoteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFeeQuoteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFeeQuoteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeFeeQuoteSession struct {
	Contract     *BridgeFeeQuote   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeFeeQuoteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeFeeQuoteCallerSession struct {
	Contract *BridgeFeeQuoteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BridgeFeeQuoteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeFeeQuoteTransactorSession struct {
	Contract     *BridgeFeeQuoteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BridgeFeeQuoteRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeFeeQuoteRaw struct {
	Contract *BridgeFeeQuote // Generic contract binding to access the raw methods on
}

// BridgeFeeQuoteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeFeeQuoteCallerRaw struct {
	Contract *BridgeFeeQuoteCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeFeeQuoteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeFeeQuoteTransactorRaw struct {
	Contract *BridgeFeeQuoteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeFeeQuote creates a new instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuote(address common.Address, backend bind.ContractBackend) (*BridgeFeeQuote, error) {
	contract, err := bindBridgeFeeQuote(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuote{BridgeFeeQuoteCaller: BridgeFeeQuoteCaller{contract: contract}, BridgeFeeQuoteTransactor: BridgeFeeQuoteTransactor{contract: contract}, BridgeFeeQuoteFilterer: BridgeFeeQuoteFilterer{contract: contract}}, nil
}

// NewBridgeFeeQuoteCaller creates a new read-only instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuoteCaller(address common.Address, caller bind.ContractCaller) (*BridgeFeeQuoteCaller, error) {
	contract, err := bindBridgeFeeQuote(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteCaller{contract: contract}, nil
}

// NewBridgeFeeQuoteTransactor creates a new write-only instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuoteTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeFeeQuoteTransactor, error) {
	contract, err := bindBridgeFeeQuote(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteTransactor{contract: contract}, nil
}

// NewBridgeFeeQuoteFilterer creates a new log filterer instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuoteFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFeeQuoteFilterer, error) {
	contract, err := bindBridgeFeeQuote(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteFilterer{contract: contract}, nil
}

// bindBridgeFeeQuote binds a generic wrapper to an already deployed contract.
func bindBridgeFeeQuote(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeFeeQuoteMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeFeeQuote *BridgeFeeQuoteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeFeeQuote.Contract.BridgeFeeQuoteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeFeeQuote *BridgeFeeQuoteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.BridgeFeeQuoteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeFeeQuote *BridgeFeeQuoteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.BridgeFeeQuoteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeFeeQuote *BridgeFeeQuoteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeFeeQuote.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.DEFAULTADMINROLE(&_BridgeFeeQuote.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.DEFAULTADMINROLE(&_BridgeFeeQuote.CallOpts)
}

// OWNERROLE is a free data retrieval call binding the contract method 0xe58378bb.
//
// Solidity: function OWNER_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) OWNERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "OWNER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OWNERROLE is a free data retrieval call binding the contract method 0xe58378bb.
//
// Solidity: function OWNER_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) OWNERROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.OWNERROLE(&_BridgeFeeQuote.CallOpts)
}

// OWNERROLE is a free data retrieval call binding the contract method 0xe58378bb.
//
// Solidity: function OWNER_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) OWNERROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.OWNERROLE(&_BridgeFeeQuote.CallOpts)
}

// UPGRADEROLE is a free data retrieval call binding the contract method 0xb908afa8.
//
// Solidity: function UPGRADE_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) UPGRADEROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "UPGRADE_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UPGRADEROLE is a free data retrieval call binding the contract method 0xb908afa8.
//
// Solidity: function UPGRADE_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) UPGRADEROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.UPGRADEROLE(&_BridgeFeeQuote.CallOpts)
}

// UPGRADEROLE is a free data retrieval call binding the contract method 0xb908afa8.
//
// Solidity: function UPGRADE_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) UPGRADEROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.UPGRADEROLE(&_BridgeFeeQuote.CallOpts)
}

// GetChainNames is a free data retrieval call binding the contract method 0xfdb336f7.
//
// Solidity: function getChainNames() view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetChainNames(opts *bind.CallOpts) ([][32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getChainNames")

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetChainNames is a free data retrieval call binding the contract method 0xfdb336f7.
//
// Solidity: function getChainNames() view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetChainNames() ([][32]byte, error) {
	return _BridgeFeeQuote.Contract.GetChainNames(&_BridgeFeeQuote.CallOpts)
}

// GetChainNames is a free data retrieval call binding the contract method 0xfdb336f7.
//
// Solidity: function getChainNames() view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetChainNames() ([][32]byte, error) {
	return _BridgeFeeQuote.Contract.GetChainNames(&_BridgeFeeQuote.CallOpts)
}

// GetDefaultOracleQuote is a free data retrieval call binding the contract method 0xe47a543f.
//
// Solidity: function getDefaultOracleQuote(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetDefaultOracleQuote(opts *bind.CallOpts, _chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getDefaultOracleQuote", _chainName, _token)

	if err != nil {
		return *new([]IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IBridgeFeeQuoteQuoteInfo)).(*[]IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetDefaultOracleQuote is a free data retrieval call binding the contract method 0xe47a543f.
//
// Solidity: function getDefaultOracleQuote(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetDefaultOracleQuote(_chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetDefaultOracleQuote(&_BridgeFeeQuote.CallOpts, _chainName, _token)
}

// GetDefaultOracleQuote is a free data retrieval call binding the contract method 0xe47a543f.
//
// Solidity: function getDefaultOracleQuote(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetDefaultOracleQuote(_chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetDefaultOracleQuote(&_BridgeFeeQuote.CallOpts, _chainName, _token)
}

// GetQuoteById is a free data retrieval call binding the contract method 0xa8541c17.
//
// Solidity: function getQuoteById(uint256 _id) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetQuoteById(opts *bind.CallOpts, _id *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getQuoteById", _id)

	if err != nil {
		return *new(IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IBridgeFeeQuoteQuoteInfo)).(*IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetQuoteById is a free data retrieval call binding the contract method 0xa8541c17.
//
// Solidity: function getQuoteById(uint256 _id) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetQuoteById(_id *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteById(&_BridgeFeeQuote.CallOpts, _id)
}

// GetQuoteById is a free data retrieval call binding the contract method 0xa8541c17.
//
// Solidity: function getQuoteById(uint256 _id) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetQuoteById(_id *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteById(&_BridgeFeeQuote.CallOpts, _id)
}

// GetQuoteByIndex is a free data retrieval call binding the contract method 0x36cbd832.
//
// Solidity: function getQuoteByIndex(bytes32 _chainName, bytes32 _token, address _oracle, uint8 _cap) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetQuoteByIndex(opts *bind.CallOpts, _chainName [32]byte, _token [32]byte, _oracle common.Address, _cap uint8) (IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getQuoteByIndex", _chainName, _token, _oracle, _cap)

	if err != nil {
		return *new(IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IBridgeFeeQuoteQuoteInfo)).(*IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetQuoteByIndex is a free data retrieval call binding the contract method 0x36cbd832.
//
// Solidity: function getQuoteByIndex(bytes32 _chainName, bytes32 _token, address _oracle, uint8 _cap) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetQuoteByIndex(_chainName [32]byte, _token [32]byte, _oracle common.Address, _cap uint8) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteByIndex(&_BridgeFeeQuote.CallOpts, _chainName, _token, _oracle, _cap)
}

// GetQuoteByIndex is a free data retrieval call binding the contract method 0x36cbd832.
//
// Solidity: function getQuoteByIndex(bytes32 _chainName, bytes32 _token, address _oracle, uint8 _cap) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetQuoteByIndex(_chainName [32]byte, _token [32]byte, _oracle common.Address, _cap uint8) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteByIndex(&_BridgeFeeQuote.CallOpts, _chainName, _token, _oracle, _cap)
}

// GetQuotesByToken is a free data retrieval call binding the contract method 0xe14f1864.
//
// Solidity: function getQuotesByToken(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetQuotesByToken(opts *bind.CallOpts, _chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getQuotesByToken", _chainName, _token)

	if err != nil {
		return *new([]IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IBridgeFeeQuoteQuoteInfo)).(*[]IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetQuotesByToken is a free data retrieval call binding the contract method 0xe14f1864.
//
// Solidity: function getQuotesByToken(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetQuotesByToken(_chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuotesByToken(&_BridgeFeeQuote.CallOpts, _chainName, _token)
}

// GetQuotesByToken is a free data retrieval call binding the contract method 0xe14f1864.
//
// Solidity: function getQuotesByToken(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetQuotesByToken(_chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuotesByToken(&_BridgeFeeQuote.CallOpts, _chainName, _token)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _BridgeFeeQuote.Contract.GetRoleAdmin(&_BridgeFeeQuote.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _BridgeFeeQuote.Contract.GetRoleAdmin(&_BridgeFeeQuote.CallOpts, role)
}

// GetTokens is a free data retrieval call binding the contract method 0xecbbc033.
//
// Solidity: function getTokens(bytes32 _chainName) view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetTokens(opts *bind.CallOpts, _chainName [32]byte) ([][32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getTokens", _chainName)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetTokens is a free data retrieval call binding the contract method 0xecbbc033.
//
// Solidity: function getTokens(bytes32 _chainName) view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetTokens(_chainName [32]byte) ([][32]byte, error) {
	return _BridgeFeeQuote.Contract.GetTokens(&_BridgeFeeQuote.CallOpts, _chainName)
}

// GetTokens is a free data retrieval call binding the contract method 0xecbbc033.
//
// Solidity: function getTokens(bytes32 _chainName) view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetTokens(_chainName [32]byte) ([][32]byte, error) {
	return _BridgeFeeQuote.Contract.GetTokens(&_BridgeFeeQuote.CallOpts, _chainName)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _BridgeFeeQuote.Contract.HasRole(&_BridgeFeeQuote.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _BridgeFeeQuote.Contract.HasRole(&_BridgeFeeQuote.CallOpts, role, account)
}

// MaxQuoteCap is a free data retrieval call binding the contract method 0x7b81dad7.
//
// Solidity: function maxQuoteCap() view returns(uint8)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) MaxQuoteCap(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "maxQuoteCap")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// MaxQuoteCap is a free data retrieval call binding the contract method 0x7b81dad7.
//
// Solidity: function maxQuoteCap() view returns(uint8)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) MaxQuoteCap() (uint8, error) {
	return _BridgeFeeQuote.Contract.MaxQuoteCap(&_BridgeFeeQuote.CallOpts)
}

// MaxQuoteCap is a free data retrieval call binding the contract method 0x7b81dad7.
//
// Solidity: function maxQuoteCap() view returns(uint8)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) MaxQuoteCap() (uint8, error) {
	return _BridgeFeeQuote.Contract.MaxQuoteCap(&_BridgeFeeQuote.CallOpts)
}

// OracleContract is a free data retrieval call binding the contract method 0xbece7532.
//
// Solidity: function oracleContract() view returns(address)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) OracleContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "oracleContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OracleContract is a free data retrieval call binding the contract method 0xbece7532.
//
// Solidity: function oracleContract() view returns(address)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) OracleContract() (common.Address, error) {
	return _BridgeFeeQuote.Contract.OracleContract(&_BridgeFeeQuote.CallOpts)
}

// OracleContract is a free data retrieval call binding the contract method 0xbece7532.
//
// Solidity: function oracleContract() view returns(address)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) OracleContract() (common.Address, error) {
	return _BridgeFeeQuote.Contract.OracleContract(&_BridgeFeeQuote.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) ProxiableUUID() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.ProxiableUUID(&_BridgeFeeQuote.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) ProxiableUUID() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.ProxiableUUID(&_BridgeFeeQuote.CallOpts)
}

// QuoteNonce is a free data retrieval call binding the contract method 0x2c189169.
//
// Solidity: function quoteNonce() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) QuoteNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "quoteNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// QuoteNonce is a free data retrieval call binding the contract method 0x2c189169.
//
// Solidity: function quoteNonce() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) QuoteNonce() (*big.Int, error) {
	return _BridgeFeeQuote.Contract.QuoteNonce(&_BridgeFeeQuote.CallOpts)
}

// QuoteNonce is a free data retrieval call binding the contract method 0x2c189169.
//
// Solidity: function quoteNonce() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) QuoteNonce() (*big.Int, error) {
	return _BridgeFeeQuote.Contract.QuoteNonce(&_BridgeFeeQuote.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BridgeFeeQuote.Contract.SupportsInterface(&_BridgeFeeQuote.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BridgeFeeQuote.Contract.SupportsInterface(&_BridgeFeeQuote.CallOpts, interfaceId)
}

// AddToken is a paid mutator transaction binding the contract method 0xf8084435.
//
// Solidity: function addToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) AddToken(opts *bind.TransactOpts, _chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "addToken", _chainName, _tokens)
}

// AddToken is a paid mutator transaction binding the contract method 0xf8084435.
//
// Solidity: function addToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) AddToken(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.AddToken(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// AddToken is a paid mutator transaction binding the contract method 0xf8084435.
//
// Solidity: function addToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) AddToken(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.AddToken(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.GrantRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.GrantRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x943b24b2.
//
// Solidity: function initialize(address _oracle, uint8 _maxQuoteCap) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) Initialize(opts *bind.TransactOpts, _oracle common.Address, _maxQuoteCap uint8) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "initialize", _oracle, _maxQuoteCap)
}

// Initialize is a paid mutator transaction binding the contract method 0x943b24b2.
//
// Solidity: function initialize(address _oracle, uint8 _maxQuoteCap) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) Initialize(_oracle common.Address, _maxQuoteCap uint8) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Initialize(&_BridgeFeeQuote.TransactOpts, _oracle, _maxQuoteCap)
}

// Initialize is a paid mutator transaction binding the contract method 0x943b24b2.
//
// Solidity: function initialize(address _oracle, uint8 _maxQuoteCap) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) Initialize(_oracle common.Address, _maxQuoteCap uint8) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Initialize(&_BridgeFeeQuote.TransactOpts, _oracle, _maxQuoteCap)
}

// Quote is a paid mutator transaction binding the contract method 0x013fcc3d.
//
// Solidity: function quote((uint8,uint64,uint64,bytes32,bytes32,uint256)[] _inputs) returns(uint256[])
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) Quote(opts *bind.TransactOpts, _inputs []IBridgeFeeQuoteQuoteInput) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "quote", _inputs)
}

// Quote is a paid mutator transaction binding the contract method 0x013fcc3d.
//
// Solidity: function quote((uint8,uint64,uint64,bytes32,bytes32,uint256)[] _inputs) returns(uint256[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) Quote(_inputs []IBridgeFeeQuoteQuoteInput) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Quote(&_BridgeFeeQuote.TransactOpts, _inputs)
}

// Quote is a paid mutator transaction binding the contract method 0x013fcc3d.
//
// Solidity: function quote((uint8,uint64,uint64,bytes32,bytes32,uint256)[] _inputs) returns(uint256[])
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) Quote(_inputs []IBridgeFeeQuoteQuoteInput) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Quote(&_BridgeFeeQuote.TransactOpts, _inputs)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xcd87db92.
//
// Solidity: function registerChain(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RegisterChain(opts *bind.TransactOpts, _chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "registerChain", _chainName, _tokens)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xcd87db92.
//
// Solidity: function registerChain(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RegisterChain(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RegisterChain(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xcd87db92.
//
// Solidity: function registerChain(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RegisterChain(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RegisterChain(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x41fa04a8.
//
// Solidity: function removeToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RemoveToken(opts *bind.TransactOpts, _chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "removeToken", _chainName, _tokens)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x41fa04a8.
//
// Solidity: function removeToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RemoveToken(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RemoveToken(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x41fa04a8.
//
// Solidity: function removeToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RemoveToken(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RemoveToken(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RenounceRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RenounceRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RevokeRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RevokeRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeTo(&_BridgeFeeQuote.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeTo(&_BridgeFeeQuote.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeToAndCall(&_BridgeFeeQuote.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeToAndCall(&_BridgeFeeQuote.TransactOpts, newImplementation, data)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) Receive() (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Receive(&_BridgeFeeQuote.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) Receive() (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Receive(&_BridgeFeeQuote.TransactOpts)
}

// BridgeFeeQuoteAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteAdminChangedIterator struct {
	Event *BridgeFeeQuoteAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteAdminChanged represents a AdminChanged event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*BridgeFeeQuoteAdminChangedIterator, error) {

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteAdminChangedIterator{contract: _BridgeFeeQuote.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteAdminChanged) (event.Subscription, error) {

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteAdminChanged)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseAdminChanged(log types.Log) (*BridgeFeeQuoteAdminChanged, error) {
	event := new(BridgeFeeQuoteAdminChanged)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteBeaconUpgradedIterator struct {
	Event *BridgeFeeQuoteBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteBeaconUpgraded represents a BeaconUpgraded event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*BridgeFeeQuoteBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteBeaconUpgradedIterator{contract: _BridgeFeeQuote.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteBeaconUpgraded)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseBeaconUpgraded(log types.Log) (*BridgeFeeQuoteBeaconUpgraded, error) {
	event := new(BridgeFeeQuoteBeaconUpgraded)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteInitializedIterator struct {
	Event *BridgeFeeQuoteInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteInitialized represents a Initialized event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterInitialized(opts *bind.FilterOpts) (*BridgeFeeQuoteInitializedIterator, error) {

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteInitializedIterator{contract: _BridgeFeeQuote.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteInitialized) (event.Subscription, error) {

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteInitialized)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseInitialized(log types.Log) (*BridgeFeeQuoteInitialized, error) {
	event := new(BridgeFeeQuoteInitialized)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteNewQuoteIterator is returned from FilterNewQuote and is used to iterate over the raw logs and unpacked data for NewQuote events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteNewQuoteIterator struct {
	Event *BridgeFeeQuoteNewQuote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteNewQuoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteNewQuote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteNewQuote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteNewQuoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteNewQuoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteNewQuote represents a NewQuote event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteNewQuote struct {
	Id        *big.Int
	ChainName [32]byte
	TokenName [32]byte
	Oracle    common.Address
	Fee       *big.Int
	GasLimit  *big.Int
	Expiry    *big.Int
	Cap       uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewQuote is a free log retrieval operation binding the contract event 0xaaa59a21a73d2d9728095280eca494951b3d50f06502210d9ab16a1ff3a7bc58.
//
// Solidity: event NewQuote(uint256 indexed id, bytes32 indexed chainName, bytes32 indexed tokenName, address oracle, uint256 fee, uint256 gasLimit, uint256 expiry, uint8 cap)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterNewQuote(opts *bind.FilterOpts, id []*big.Int, chainName [][32]byte, tokenName [][32]byte) (*BridgeFeeQuoteNewQuoteIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var chainNameRule []interface{}
	for _, chainNameItem := range chainName {
		chainNameRule = append(chainNameRule, chainNameItem)
	}
	var tokenNameRule []interface{}
	for _, tokenNameItem := range tokenName {
		tokenNameRule = append(tokenNameRule, tokenNameItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "NewQuote", idRule, chainNameRule, tokenNameRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteNewQuoteIterator{contract: _BridgeFeeQuote.contract, event: "NewQuote", logs: logs, sub: sub}, nil
}

// WatchNewQuote is a free log subscription operation binding the contract event 0xaaa59a21a73d2d9728095280eca494951b3d50f06502210d9ab16a1ff3a7bc58.
//
// Solidity: event NewQuote(uint256 indexed id, bytes32 indexed chainName, bytes32 indexed tokenName, address oracle, uint256 fee, uint256 gasLimit, uint256 expiry, uint8 cap)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchNewQuote(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteNewQuote, id []*big.Int, chainName [][32]byte, tokenName [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var chainNameRule []interface{}
	for _, chainNameItem := range chainName {
		chainNameRule = append(chainNameRule, chainNameItem)
	}
	var tokenNameRule []interface{}
	for _, tokenNameItem := range tokenName {
		tokenNameRule = append(tokenNameRule, tokenNameItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "NewQuote", idRule, chainNameRule, tokenNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteNewQuote)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "NewQuote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewQuote is a log parse operation binding the contract event 0xaaa59a21a73d2d9728095280eca494951b3d50f06502210d9ab16a1ff3a7bc58.
//
// Solidity: event NewQuote(uint256 indexed id, bytes32 indexed chainName, bytes32 indexed tokenName, address oracle, uint256 fee, uint256 gasLimit, uint256 expiry, uint8 cap)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseNewQuote(log types.Log) (*BridgeFeeQuoteNewQuote, error) {
	event := new(BridgeFeeQuoteNewQuote)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "NewQuote", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleAdminChangedIterator struct {
	Event *BridgeFeeQuoteRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteRoleAdminChanged represents a RoleAdminChanged event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*BridgeFeeQuoteRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteRoleAdminChangedIterator{contract: _BridgeFeeQuote.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteRoleAdminChanged)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseRoleAdminChanged(log types.Log) (*BridgeFeeQuoteRoleAdminChanged, error) {
	event := new(BridgeFeeQuoteRoleAdminChanged)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleGrantedIterator struct {
	Event *BridgeFeeQuoteRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteRoleGranted represents a RoleGranted event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeFeeQuoteRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteRoleGrantedIterator{contract: _BridgeFeeQuote.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteRoleGranted)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseRoleGranted(log types.Log) (*BridgeFeeQuoteRoleGranted, error) {
	event := new(BridgeFeeQuoteRoleGranted)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleRevokedIterator struct {
	Event *BridgeFeeQuoteRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteRoleRevoked represents a RoleRevoked event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeFeeQuoteRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteRoleRevokedIterator{contract: _BridgeFeeQuote.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteRoleRevoked)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseRoleRevoked(log types.Log) (*BridgeFeeQuoteRoleRevoked, error) {
	event := new(BridgeFeeQuoteRoleRevoked)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteUpgradedIterator struct {
	Event *BridgeFeeQuoteUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteUpgraded represents a Upgraded event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*BridgeFeeQuoteUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteUpgradedIterator{contract: _BridgeFeeQuote.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteUpgraded)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseUpgraded(log types.Log) (*BridgeFeeQuoteUpgraded, error) {
	event := new(BridgeFeeQuoteUpgraded)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
