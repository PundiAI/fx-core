// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IBridgeFeeQuoteQuoteInfo is an auto generated low-level Go binding around an user-defined struct.
type IBridgeFeeQuoteQuoteInfo struct {
	Id        *big.Int
	ChainName [32]byte
	TokenName [32]byte
	Oracle    common.Address
	Amount    *big.Int
	GasLimit  uint64
	Expiry    uint64
}

// IBridgeFeeQuoteQuoteInput is an auto generated low-level Go binding around an user-defined struct.
type IBridgeFeeQuoteQuoteInput struct {
	Cap       uint8
	GasLimit  uint64
	Expiry    uint64
	ChainName [32]byte
	TokenName [32]byte
	Oracle    common.Address
	Amount    *big.Int
}

// BridgeFeeQuoteMetaData contains all meta data concerning the BridgeFeeQuote contract.
var BridgeFeeQuoteMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ChainNameAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainNameInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteCapInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNameAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNameInvalid\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"}],\"name\":\"NewQuote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainNames\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"}],\"name\":\"getDefaultOracleQuote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getQuoteById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_cap\",\"type\":\"uint8\"}],\"name\":\"getQuoteByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"}],\"name\":\"getQuotesByToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"}],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_maxQuoteCap\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxQuoteCap\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"cap\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"gasLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"tokenName\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInput[]\",\"name\":\"_inputs\",\"type\":\"tuple[]\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"}],\"name\":\"registerChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_tokens\",\"type\":\"bytes32[]\"}],\"name\":\"removeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x60a06040523060805234801561001457600080fd5b50608051612cbc61004c60003960008181610621015281816106610152818161093c0152818161097c0152610a0b0152612cbc6000f3fe6080604052600436106101855760003560e01c8063943b24b2116100d1578063d547741f1161008a578063e58378bb11610064578063e58378bb146104bb578063ecbbc033146104dd578063f8084435146104fd578063fdb336f71461051d57600080fd5b8063d547741f1461044e578063e14f18641461046e578063e47a543f1461049b57600080fd5b8063943b24b21461036c578063a217fddf1461038c578063a8541c17146103a1578063b908afa8146103c1578063bece7532146103f5578063cd87db921461042e57600080fd5b806336cbd8321161013e57806352d1902d1161011857806352d1902d146102dd57806374d84184146102f25780637b81dad71461031f57806391d148541461034c57600080fd5b806336cbd8321461027d57806341fa04a8146102aa5780634f1ef286146102ca57600080fd5b806301ffc9a714610191578063248a9ca3146101c65780632c189169146102045780632f2ff15d1461021b57806336568abe1461023d5780633659cfe61461025d57600080fd5b3661018c57005b600080fd5b34801561019d57600080fd5b506101b16101ac3660046123f7565b610532565b60405190151581526020015b60405180910390f35b3480156101d257600080fd5b506101f66101e1366004612421565b600090815260c9602052604090206001015490565b6040519081526020016101bd565b34801561021057600080fd5b506101f661012e5481565b34801561022757600080fd5b5061023b61023636600461244f565b610569565b005b34801561024957600080fd5b5061023b61025836600461244f565b610593565b34801561026957600080fd5b5061023b61027836600461247f565b610616565b34801561028957600080fd5b5061029d6102983660046124b2565b6106f6565b6040516101bd9190612553565b3480156102b657600080fd5b506101b16102c5366004612561565b61086a565b61023b6102d8366004612625565b610931565b3480156102e957600080fd5b506101f66109fe565b3480156102fe57600080fd5b5061031261030d3660046126cc565b610ab1565b6040516101bd9190612740565b34801561032b57600080fd5b5061012d5461033a9060ff1681565b60405160ff90911681526020016101bd565b34801561035857600080fd5b506101b161036736600461244f565b6110dc565b34801561037857600080fd5b5061023b610387366004612784565b611107565b34801561039857600080fd5b506101f6600081565b3480156103ad57600080fd5b5061029d6103bc366004612421565b6112a8565b3480156103cd57600080fd5b506101f67f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba10150881565b34801561040157600080fd5b5061012f54610416906001600160a01b031681565b6040516001600160a01b0390911681526020016101bd565b34801561043a57600080fd5b506101b1610449366004612561565b6113a1565b34801561045a57600080fd5b5061023b61046936600461244f565b611476565b34801561047a57600080fd5b5061048e6104893660046127b9565b61149b565b6040516101bd91906127db565b3480156104a757600080fd5b5061048e6104b63660046127b9565b611687565b3480156104c757600080fd5b506101f6600080516020612c2083398151915281565b3480156104e957600080fd5b506103126104f8366004612421565b611817565b34801561050957600080fd5b506101b1610518366004612561565b611832565b34801561052957600080fd5b506103126118da565b60006001600160e01b03198216637965db0b60e01b148061056357506301ffc9a760e01b6001600160e01b03198316145b92915050565b600082815260c96020526040902060010154610584816118ec565b61058e83836118f6565b505050565b6001600160a01b03811633146106085760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610612828261197c565b5050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561065f5760405162461bcd60e51b81526004016105ff9061281d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106a8600080516020612c40833981519152546001600160a01b031690565b6001600160a01b0316146106ce5760405162461bcd60e51b81526004016105ff90612869565b6106d7816119e3565b604080516000808252602082019092526106f391839190611a0d565b50565b6106fe6123bb565b848461070c61013083611b78565b6107285760405162b9a46560e61b815260040160405180910390fd5b6000828152610132602052604090206107419082611b78565b61075e57604051637557bb2f60e11b815260040160405180910390fd5b600061076c88888888611b93565b600090815261013460209081526040808320815160a0808201845282548083526001808501548488019081526002808701548689019081526003909701546001600160a01b038082166060808a01918252600160a01b90930460ff166080808b0191909152968d526101338c529b8a90208a518088018c5281546001600160401b038082168352600160401b9091048116828f0190815297830154828e019081529290950154818501528b5160e081018d5299518a5294519b89019b909b529751988701989098529851909516958401959095529451948201949094529151841692820192909252905190911660c082015298975050505050505050565b6000600080516020612c20833981519152610884816118ec565b60005b83811015610925576108c28585838181106108a4576108a46128b5565b60008a81526101326020908152604090912093910201359050611b78565b6108df57604051637557bb2f60e11b815260040160405180910390fd5b6109128585838181106108f4576108f46128b5565b60008a81526101326020908152604090912093910201359050611bf7565b508061091d816128e1565b915050610887565b50600195945050505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561097a5760405162461bcd60e51b81526004016105ff9061281d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109c3600080516020612c40833981519152546001600160a01b031690565b6001600160a01b0316146109e95760405162461bcd60e51b81526004016105ff90612869565b6109f2826119e3565b61061282826001611a0d565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a9e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016105ff565b50600080516020612c4083398151915290565b6060610abb611c03565b6000826001600160401b03811115610ad557610ad56125df565b604051908082528060200260200182016040528015610afe578160200160208202803683370190505b50905060005b838110156110cf57610b2c858583818110610b2157610b216128b5565b905060e00201611c5d565b5061012f546001600160a01b031663b338123c868684818110610b5157610b516128b5565b905060e0020160600135878785818110610b6d57610b6d6128b5565b905060e0020160a0016020810190610b85919061247f565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044016020604051808303816000875af1158015610bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf591906128fc565b610c1257604051635a10f29160e11b815260040160405180910390fd5b6000610ca6868684818110610c2957610c296128b5565b905060e0020160600135878785818110610c4557610c456128b5565b905060e0020160800135888886818110610c6157610c616128b5565b905060e0020160a0016020810190610c79919061247f565b898987818110610c8b57610c8b6128b5565b610ca192602060e090920201908101915061291e565b611b93565b600081815261013460205260409020549091508015610d025760008181526101336020908152604080832080546001600160801b03191681556001810184905560020183905561012e5485845261013490925290912055610e23565b6040518060a0016040528061012e548152602001888886818110610d2857610d286128b5565b905060e00201606001358152602001888886818110610d4957610d496128b5565b905060e00201608001358152602001888886818110610d6a57610d6a6128b5565b905060e0020160a0016020810190610d82919061247f565b6001600160a01b03168152602001888886818110610da257610da26128b5565b610db892602060e090920201908101915061291e565b60ff9081169091526000848152610134602090815260409182902084518155908401516001820155908301516002820155606083015160039091018054608090940151909216600160a01b026001600160a81b03199093166001600160a01b03909116179190911790555b6040518060800160405280888886818110610e4057610e406128b5565b905060e002016040016020810190610e589190612939565b6001600160401b03168152602001888886818110610e7857610e786128b5565b905060e002016020016020810190610e909190612939565b6001600160401b03168152602001888886818110610eb057610eb06128b5565b60c060e0909102929092019190910135825250602090810184905261012e80546000908152610133835260409081902084518154948601516001600160401b03908116600160401b026001600160801b03199096169116179390931783558301516001830155606090920151600290910155548451859085908110610f3757610f376128b5565b602002602001018181525050868684818110610f5557610f556128b5565b905060e0020160800135878785818110610f7157610f716128b5565b905060e002016060013561012e547faaa59a21a73d2d9728095280eca494951b3d50f06502210d9ab16a1ff3a7bc588a8a88818110610fb257610fb26128b5565b905060e0020160a0016020810190610fca919061247f565b8b8b89818110610fdc57610fdc6128b5565b905060e0020160c001358c8c8a818110610ff857610ff86128b5565b905060e0020160200160208101906110109190612939565b8d8d8b818110611022576110226128b5565b905060e00201604001602081019061103a9190612939565b8e8e8c81811061104c5761104c6128b5565b61106292602060e090920201908101915061291e565b604080516001600160a01b0396909616865260208601949094526001600160401b03928316858501529116606084015260ff166080830152519081900360a00190a461012e80549060006110b5836128e1565b9190505550505080806110c7906128e1565b915050610b04565b509050610563600160fb55565b600091825260c9602090815260408084206001600160a01b0393909316845291905290205460ff1690565b600054610100900460ff16158080156111275750600054600160ff909116105b806111415750303b158015611141575060005460ff166001145b6111a45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105ff565b6000805460ff1916600117905580156111c7576000805461ff0019166101001790555b61012f80546001600160a01b0319166001600160a01b03851617905561012d805460ff191660ff8416179055600161012e55611201611d45565b611209611d45565b611211611d6e565b61121c6000336118f6565b6112467f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba101508336118f6565b61125e600080516020612c20833981519152336118f6565b801561058e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b6112b06123bb565b5060008181526101336020908152604080832081516080808201845282546001600160401b038082168452600160401b90910481168387019081526001808601548588019081526002968701546060808801829052908b526101348a5299889020885160a08082018b528254825293820154818c0190815298820154818b019081526003909201546001600160a01b03808216838f01908152600160a01b90920460ff16928901929092528a5160e081018c529d8e5298519a8d019a909a5251978b01979097529451909616968801969096529251928601929092529151831691840191909152511660c082015290565b6000600080516020612c208339815191526113bb816118ec565b6113c761013086611b78565b156113e557604051630bb9107160e11b815260040160405180910390fd5b6113f161013086611d9d565b5060005b83811015610925576114128585838181106108a4576108a46128b5565b1561143057604051634234cba560e01b815260040160405180910390fd5b611463858583818110611445576114456128b5565b60008a81526101326020908152604090912093910201359050611d9d565b508061146e816128e1565b9150506113f5565b600082815260c96020526040902060010154611491816118ec565b61058e838361197c565b606082826114ab61013083611b78565b6114c75760405162b9a46560e61b815260040160405180910390fd5b6000828152610132602052604090206114e09082611b78565b6114fd57604051637557bb2f60e11b815260040160405180910390fd5b61012f54604051636116658160e01b8152600481018790526000916001600160a01b031690636116658190602401600060405180830381865afa158015611548573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115709190810190612962565b61012d5481519192506000916115899160ff1690612a13565b90506000816001600160401b038111156115a5576115a56125df565b6040519080825280602002602001820160405280156115de57816020015b6115cb6123bb565b8152602001906001900390816115c35790505b5090506000805b84518110156116795760005b61012d5460ff9081169082161015611666576116288b8b88858151811061161a5761161a6128b5565b6020026020010151846106f6565b84848151811061163a5761163a6128b5565b60200260200101819052508280611650906128e1565b935050808061165e90612a32565b9150506115f1565b5080611671816128e1565b9150506115e5565b509098975050505050505050565b6060828261169761013083611b78565b6116b35760405162b9a46560e61b815260040160405180910390fd5b6000828152610132602052604090206116cc9082611b78565b6116e957604051637557bb2f60e11b815260040160405180910390fd5b61012f54604080516380dce16960e01b815290516000926001600160a01b0316916380dce1699160048083019260209291908290030181865afa158015611734573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117589190612a52565b61012d5490915060009060ff166001600160401b0381111561177c5761177c6125df565b6040519080825280602002602001820160405280156117b557816020015b6117a26123bb565b81526020019060019003908161179a5790505b50905060005b61012d5460ff908116908216101561180c576117d9888885846106f6565b828260ff16815181106117ee576117ee6128b5565b6020026020010181905250808061180490612a32565b9150506117bb565b509695505050505050565b60008181526101326020526040902060609061056390611da9565b6000600080516020612c2083398151915261184c816118ec565b61185861013086611b78565b6118745760405162b9a46560e61b815260040160405180910390fd5b60005b83811015610925576118948585838181106108a4576108a46128b5565b156118b257604051634234cba560e01b815260040160405180910390fd5b6118c7858583818110611445576114456128b5565b50806118d2816128e1565b915050611877565b60606118e7610130611da9565b905090565b6106f38133611db6565b61190082826110dc565b61061257600082815260c9602090815260408083206001600160a01b03851684529091529020805460ff191660011790556119383390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61198682826110dc565b1561061257600082815260c9602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b7f88aa719609f728b0c5e7fb8dd3608d5c25d497efbb3b9dd64e9251ebba101508610612816118ec565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611a405761058e83611e0f565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a9a575060408051601f3d908101601f19168201909252611a9791810190612a6f565b60015b611afd5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016105ff565b600080516020612c408339815191528114611b6c5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016105ff565b5061058e838383611eab565b600081815260018301602052604081205415155b9392505050565b6040805160208101869052908101849052606083811b6bffffffffffffffffffffffff19169082015260f882901b6001600160f81b03191660748201526000906075016040516020818303038152906040528051906020012090505b949350505050565b6000611b8c8383611ed6565b600260fb541415611c565760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105ff565b600260fb55565b600060608201356080830135611c7561013083611b78565b611c915760405162b9a46560e61b815260040160405180910390fd5b600082815261013260205260409020611caa9082611b78565b611cc757604051637557bb2f60e11b815260040160405180910390fd5b33611cd860c0860160a0870161247f565b6001600160a01b031614611cff57604051635a10f29160e11b815260040160405180910390fd5b61012d5460ff16611d13602086018661291e565b60ff1610611d345760405163c54fa96960e01b815260040160405180910390fd5b5060019392505050565b600160fb55565b600054610100900460ff16611d6c5760405162461bcd60e51b81526004016105ff90612a88565b565b600054610100900460ff16611d955760405162461bcd60e51b81526004016105ff90612a88565b611d6c611fc9565b6000611b8c8383611ff0565b60606000611b8c8361203f565b611dc082826110dc565b61061257611dcd8161209b565b611dd88360206120ad565b604051602001611de9929190612aff565b60408051601f198184030181529082905262461bcd60e51b82526105ff91600401612b74565b6001600160a01b0381163b611e7c5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105ff565b600080516020612c4083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b611eb483612248565b600082511180611ec15750805b1561058e57611ed08383612288565b50505050565b60008181526001830160205260408120548015611fbf576000611efa600183612ba7565b8554909150600090611f0e90600190612ba7565b9050818114611f73576000866000018281548110611f2e57611f2e6128b5565b9060005260206000200154905080876000018481548110611f5157611f516128b5565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611f8457611f84612bbe565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610563565b6000915050610563565b600054610100900460ff16611d3e5760405162461bcd60e51b81526004016105ff90612a88565b600081815260018301602052604081205461203757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610563565b506000610563565b60608160000180548060200260200160405190810160405280929190818152602001828054801561208f57602002820191906000526020600020905b81548152602001906001019080831161207b575b50505050509050919050565b60606105636001600160a01b03831660145b606060006120bc836002612a13565b6120c7906002612bd4565b6001600160401b038111156120de576120de6125df565b6040519080825280601f01601f191660200182016040528015612108576020820181803683370190505b509050600360fc1b81600081518110612123576121236128b5565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612152576121526128b5565b60200101906001600160f81b031916908160001a9053506000612176846002612a13565b612181906001612bd4565b90505b60018111156121f9576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106121b5576121b56128b5565b1a60f81b8282815181106121cb576121cb6128b5565b60200101906001600160f81b031916908160001a90535060049490941c936121f281612bec565b9050612184565b508315611b8c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016105ff565b61225181611e0f565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060611b8c8383604051806060016040528060278152602001612c60602791396060600080856001600160a01b0316856040516122c59190612c03565b600060405180830381855af49150503d8060008114612300576040519150601f19603f3d011682016040523d82523d6000602084013e612305565b606091505b509150915061231686838387612320565b9695505050505050565b6060831561238c578251612385576001600160a01b0385163b6123855760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ff565b5081611bef565b611bef83838151156123a15781518083602001fd5b8060405162461bcd60e51b81526004016105ff9190612b74565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b60006020828403121561240957600080fd5b81356001600160e01b031981168114611b8c57600080fd5b60006020828403121561243357600080fd5b5035919050565b6001600160a01b03811681146106f357600080fd5b6000806040838503121561246257600080fd5b8235915060208301356124748161243a565b809150509250929050565b60006020828403121561249157600080fd5b8135611b8c8161243a565b803560ff811681146124ad57600080fd5b919050565b600080600080608085870312156124c857600080fd5b843593506020850135925060408501356124e18161243a565b91506124ef6060860161249c565b905092959194509250565b8051825260208082015190830152604080820151908301526060808201516001600160a01b0316908301526080808201519083015260a0808201516001600160401b039081169184019190915260c09182015116910152565b60e0810161056382846124fa565b60008060006040848603121561257657600080fd5b8335925060208401356001600160401b038082111561259457600080fd5b818601915086601f8301126125a857600080fd5b8135818111156125b757600080fd5b8760208260051b85010111156125cc57600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561261d5761261d6125df565b604052919050565b6000806040838503121561263857600080fd5b82356126438161243a565b91506020838101356001600160401b038082111561266057600080fd5b818601915086601f83011261267457600080fd5b813581811115612686576126866125df565b612698601f8201601f191685016125f5565b915080825287848285010111156126ae57600080fd5b80848401858401376000848284010152508093505050509250929050565b600080602083850312156126df57600080fd5b82356001600160401b03808211156126f657600080fd5b818501915085601f83011261270a57600080fd5b81358181111561271957600080fd5b86602060e08302850101111561272e57600080fd5b60209290920196919550909350505050565b6020808252825182820181905260009190848201906040850190845b818110156127785783518352928401929184019160010161275c565b50909695505050505050565b6000806040838503121561279757600080fd5b82356127a28161243a565b91506127b06020840161249c565b90509250929050565b600080604083850312156127cc57600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b818110156127785761280a8385516124fa565b9284019260e092909201916001016127f7565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156128f5576128f56128cb565b5060010190565b60006020828403121561290e57600080fd5b81518015158114611b8c57600080fd5b60006020828403121561293057600080fd5b611b8c8261249c565b60006020828403121561294b57600080fd5b81356001600160401b0381168114611b8c57600080fd5b6000602080838503121561297557600080fd5b82516001600160401b038082111561298c57600080fd5b818501915085601f8301126129a057600080fd5b8151818111156129b2576129b26125df565b8060051b91506129c38483016125f5565b81815291830184019184810190888411156129dd57600080fd5b938501935b83851015612a0757845192506129f78361243a565b82825293850193908501906129e2565b98975050505050505050565b6000816000190483118215151615612a2d57612a2d6128cb565b500290565b600060ff821660ff811415612a4957612a496128cb565b60010192915050565b600060208284031215612a6457600080fd5b8151611b8c8161243a565b600060208284031215612a8157600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60005b83811015612aee578181015183820152602001612ad6565b83811115611ed05750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612b37816017850160208801612ad3565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612b68816028840160208801612ad3565b01602801949350505050565b6020815260008251806020840152612b93816040850160208701612ad3565b601f01601f19169190910160400192915050565b600082821015612bb957612bb96128cb565b500390565b634e487b7160e01b600052603160045260246000fd5b60008219821115612be757612be76128cb565b500190565b600081612bfb57612bfb6128cb565b506000190190565b60008251612c15818460208701612ad3565b919091019291505056feb19546dff01e856fb3f010c267a7b1c60363cf8a4664e21cc89c26224620214e360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ab16aefa830eed131324fe9e156c0e38f59f97b4a184223b88cdf90d94367b7864736f6c634300080a0033",
}

// BridgeFeeQuoteABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeFeeQuoteMetaData.ABI instead.
var BridgeFeeQuoteABI = BridgeFeeQuoteMetaData.ABI

// BridgeFeeQuoteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeFeeQuoteMetaData.Bin instead.
var BridgeFeeQuoteBin = BridgeFeeQuoteMetaData.Bin

// DeployBridgeFeeQuote deploys a new Ethereum contract, binding an instance of BridgeFeeQuote to it.
func DeployBridgeFeeQuote(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BridgeFeeQuote, error) {
	parsed, err := BridgeFeeQuoteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeFeeQuoteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeFeeQuote{BridgeFeeQuoteCaller: BridgeFeeQuoteCaller{contract: contract}, BridgeFeeQuoteTransactor: BridgeFeeQuoteTransactor{contract: contract}, BridgeFeeQuoteFilterer: BridgeFeeQuoteFilterer{contract: contract}}, nil
}

// BridgeFeeQuote is an auto generated Go binding around an Ethereum contract.
type BridgeFeeQuote struct {
	BridgeFeeQuoteCaller     // Read-only binding to the contract
	BridgeFeeQuoteTransactor // Write-only binding to the contract
	BridgeFeeQuoteFilterer   // Log filterer for contract events
}

// BridgeFeeQuoteCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeFeeQuoteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFeeQuoteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeFeeQuoteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFeeQuoteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFeeQuoteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFeeQuoteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeFeeQuoteSession struct {
	Contract     *BridgeFeeQuote   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeFeeQuoteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeFeeQuoteCallerSession struct {
	Contract *BridgeFeeQuoteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BridgeFeeQuoteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeFeeQuoteTransactorSession struct {
	Contract     *BridgeFeeQuoteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BridgeFeeQuoteRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeFeeQuoteRaw struct {
	Contract *BridgeFeeQuote // Generic contract binding to access the raw methods on
}

// BridgeFeeQuoteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeFeeQuoteCallerRaw struct {
	Contract *BridgeFeeQuoteCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeFeeQuoteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeFeeQuoteTransactorRaw struct {
	Contract *BridgeFeeQuoteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeFeeQuote creates a new instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuote(address common.Address, backend bind.ContractBackend) (*BridgeFeeQuote, error) {
	contract, err := bindBridgeFeeQuote(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuote{BridgeFeeQuoteCaller: BridgeFeeQuoteCaller{contract: contract}, BridgeFeeQuoteTransactor: BridgeFeeQuoteTransactor{contract: contract}, BridgeFeeQuoteFilterer: BridgeFeeQuoteFilterer{contract: contract}}, nil
}

// NewBridgeFeeQuoteCaller creates a new read-only instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuoteCaller(address common.Address, caller bind.ContractCaller) (*BridgeFeeQuoteCaller, error) {
	contract, err := bindBridgeFeeQuote(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteCaller{contract: contract}, nil
}

// NewBridgeFeeQuoteTransactor creates a new write-only instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuoteTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeFeeQuoteTransactor, error) {
	contract, err := bindBridgeFeeQuote(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteTransactor{contract: contract}, nil
}

// NewBridgeFeeQuoteFilterer creates a new log filterer instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuoteFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFeeQuoteFilterer, error) {
	contract, err := bindBridgeFeeQuote(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteFilterer{contract: contract}, nil
}

// bindBridgeFeeQuote binds a generic wrapper to an already deployed contract.
func bindBridgeFeeQuote(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeFeeQuoteMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeFeeQuote *BridgeFeeQuoteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeFeeQuote.Contract.BridgeFeeQuoteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeFeeQuote *BridgeFeeQuoteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.BridgeFeeQuoteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeFeeQuote *BridgeFeeQuoteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.BridgeFeeQuoteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeFeeQuote *BridgeFeeQuoteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeFeeQuote.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.DEFAULTADMINROLE(&_BridgeFeeQuote.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.DEFAULTADMINROLE(&_BridgeFeeQuote.CallOpts)
}

// OWNERROLE is a free data retrieval call binding the contract method 0xe58378bb.
//
// Solidity: function OWNER_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) OWNERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "OWNER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OWNERROLE is a free data retrieval call binding the contract method 0xe58378bb.
//
// Solidity: function OWNER_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) OWNERROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.OWNERROLE(&_BridgeFeeQuote.CallOpts)
}

// OWNERROLE is a free data retrieval call binding the contract method 0xe58378bb.
//
// Solidity: function OWNER_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) OWNERROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.OWNERROLE(&_BridgeFeeQuote.CallOpts)
}

// UPGRADEROLE is a free data retrieval call binding the contract method 0xb908afa8.
//
// Solidity: function UPGRADE_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) UPGRADEROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "UPGRADE_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UPGRADEROLE is a free data retrieval call binding the contract method 0xb908afa8.
//
// Solidity: function UPGRADE_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) UPGRADEROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.UPGRADEROLE(&_BridgeFeeQuote.CallOpts)
}

// UPGRADEROLE is a free data retrieval call binding the contract method 0xb908afa8.
//
// Solidity: function UPGRADE_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) UPGRADEROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.UPGRADEROLE(&_BridgeFeeQuote.CallOpts)
}

// GetChainNames is a free data retrieval call binding the contract method 0xfdb336f7.
//
// Solidity: function getChainNames() view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetChainNames(opts *bind.CallOpts) ([][32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getChainNames")

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetChainNames is a free data retrieval call binding the contract method 0xfdb336f7.
//
// Solidity: function getChainNames() view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetChainNames() ([][32]byte, error) {
	return _BridgeFeeQuote.Contract.GetChainNames(&_BridgeFeeQuote.CallOpts)
}

// GetChainNames is a free data retrieval call binding the contract method 0xfdb336f7.
//
// Solidity: function getChainNames() view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetChainNames() ([][32]byte, error) {
	return _BridgeFeeQuote.Contract.GetChainNames(&_BridgeFeeQuote.CallOpts)
}

// GetDefaultOracleQuote is a free data retrieval call binding the contract method 0xe47a543f.
//
// Solidity: function getDefaultOracleQuote(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetDefaultOracleQuote(opts *bind.CallOpts, _chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getDefaultOracleQuote", _chainName, _token)

	if err != nil {
		return *new([]IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IBridgeFeeQuoteQuoteInfo)).(*[]IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetDefaultOracleQuote is a free data retrieval call binding the contract method 0xe47a543f.
//
// Solidity: function getDefaultOracleQuote(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetDefaultOracleQuote(_chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetDefaultOracleQuote(&_BridgeFeeQuote.CallOpts, _chainName, _token)
}

// GetDefaultOracleQuote is a free data retrieval call binding the contract method 0xe47a543f.
//
// Solidity: function getDefaultOracleQuote(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetDefaultOracleQuote(_chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetDefaultOracleQuote(&_BridgeFeeQuote.CallOpts, _chainName, _token)
}

// GetQuoteById is a free data retrieval call binding the contract method 0xa8541c17.
//
// Solidity: function getQuoteById(uint256 _id) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetQuoteById(opts *bind.CallOpts, _id *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getQuoteById", _id)

	if err != nil {
		return *new(IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IBridgeFeeQuoteQuoteInfo)).(*IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetQuoteById is a free data retrieval call binding the contract method 0xa8541c17.
//
// Solidity: function getQuoteById(uint256 _id) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetQuoteById(_id *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteById(&_BridgeFeeQuote.CallOpts, _id)
}

// GetQuoteById is a free data retrieval call binding the contract method 0xa8541c17.
//
// Solidity: function getQuoteById(uint256 _id) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetQuoteById(_id *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteById(&_BridgeFeeQuote.CallOpts, _id)
}

// GetQuoteByIndex is a free data retrieval call binding the contract method 0x36cbd832.
//
// Solidity: function getQuoteByIndex(bytes32 _chainName, bytes32 _token, address _oracle, uint8 _cap) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetQuoteByIndex(opts *bind.CallOpts, _chainName [32]byte, _token [32]byte, _oracle common.Address, _cap uint8) (IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getQuoteByIndex", _chainName, _token, _oracle, _cap)

	if err != nil {
		return *new(IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IBridgeFeeQuoteQuoteInfo)).(*IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetQuoteByIndex is a free data retrieval call binding the contract method 0x36cbd832.
//
// Solidity: function getQuoteByIndex(bytes32 _chainName, bytes32 _token, address _oracle, uint8 _cap) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetQuoteByIndex(_chainName [32]byte, _token [32]byte, _oracle common.Address, _cap uint8) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteByIndex(&_BridgeFeeQuote.CallOpts, _chainName, _token, _oracle, _cap)
}

// GetQuoteByIndex is a free data retrieval call binding the contract method 0x36cbd832.
//
// Solidity: function getQuoteByIndex(bytes32 _chainName, bytes32 _token, address _oracle, uint8 _cap) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64))
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetQuoteByIndex(_chainName [32]byte, _token [32]byte, _oracle common.Address, _cap uint8) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteByIndex(&_BridgeFeeQuote.CallOpts, _chainName, _token, _oracle, _cap)
}

// GetQuotesByToken is a free data retrieval call binding the contract method 0xe14f1864.
//
// Solidity: function getQuotesByToken(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetQuotesByToken(opts *bind.CallOpts, _chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getQuotesByToken", _chainName, _token)

	if err != nil {
		return *new([]IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IBridgeFeeQuoteQuoteInfo)).(*[]IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetQuotesByToken is a free data retrieval call binding the contract method 0xe14f1864.
//
// Solidity: function getQuotesByToken(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetQuotesByToken(_chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuotesByToken(&_BridgeFeeQuote.CallOpts, _chainName, _token)
}

// GetQuotesByToken is a free data retrieval call binding the contract method 0xe14f1864.
//
// Solidity: function getQuotesByToken(bytes32 _chainName, bytes32 _token) view returns((uint256,bytes32,bytes32,address,uint256,uint64,uint64)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetQuotesByToken(_chainName [32]byte, _token [32]byte) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuotesByToken(&_BridgeFeeQuote.CallOpts, _chainName, _token)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _BridgeFeeQuote.Contract.GetRoleAdmin(&_BridgeFeeQuote.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _BridgeFeeQuote.Contract.GetRoleAdmin(&_BridgeFeeQuote.CallOpts, role)
}

// GetTokens is a free data retrieval call binding the contract method 0xecbbc033.
//
// Solidity: function getTokens(bytes32 _chainName) view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetTokens(opts *bind.CallOpts, _chainName [32]byte) ([][32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getTokens", _chainName)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetTokens is a free data retrieval call binding the contract method 0xecbbc033.
//
// Solidity: function getTokens(bytes32 _chainName) view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetTokens(_chainName [32]byte) ([][32]byte, error) {
	return _BridgeFeeQuote.Contract.GetTokens(&_BridgeFeeQuote.CallOpts, _chainName)
}

// GetTokens is a free data retrieval call binding the contract method 0xecbbc033.
//
// Solidity: function getTokens(bytes32 _chainName) view returns(bytes32[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetTokens(_chainName [32]byte) ([][32]byte, error) {
	return _BridgeFeeQuote.Contract.GetTokens(&_BridgeFeeQuote.CallOpts, _chainName)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _BridgeFeeQuote.Contract.HasRole(&_BridgeFeeQuote.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _BridgeFeeQuote.Contract.HasRole(&_BridgeFeeQuote.CallOpts, role, account)
}

// MaxQuoteCap is a free data retrieval call binding the contract method 0x7b81dad7.
//
// Solidity: function maxQuoteCap() view returns(uint8)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) MaxQuoteCap(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "maxQuoteCap")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// MaxQuoteCap is a free data retrieval call binding the contract method 0x7b81dad7.
//
// Solidity: function maxQuoteCap() view returns(uint8)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) MaxQuoteCap() (uint8, error) {
	return _BridgeFeeQuote.Contract.MaxQuoteCap(&_BridgeFeeQuote.CallOpts)
}

// MaxQuoteCap is a free data retrieval call binding the contract method 0x7b81dad7.
//
// Solidity: function maxQuoteCap() view returns(uint8)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) MaxQuoteCap() (uint8, error) {
	return _BridgeFeeQuote.Contract.MaxQuoteCap(&_BridgeFeeQuote.CallOpts)
}

// OracleContract is a free data retrieval call binding the contract method 0xbece7532.
//
// Solidity: function oracleContract() view returns(address)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) OracleContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "oracleContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OracleContract is a free data retrieval call binding the contract method 0xbece7532.
//
// Solidity: function oracleContract() view returns(address)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) OracleContract() (common.Address, error) {
	return _BridgeFeeQuote.Contract.OracleContract(&_BridgeFeeQuote.CallOpts)
}

// OracleContract is a free data retrieval call binding the contract method 0xbece7532.
//
// Solidity: function oracleContract() view returns(address)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) OracleContract() (common.Address, error) {
	return _BridgeFeeQuote.Contract.OracleContract(&_BridgeFeeQuote.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) ProxiableUUID() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.ProxiableUUID(&_BridgeFeeQuote.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) ProxiableUUID() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.ProxiableUUID(&_BridgeFeeQuote.CallOpts)
}

// QuoteNonce is a free data retrieval call binding the contract method 0x2c189169.
//
// Solidity: function quoteNonce() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) QuoteNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "quoteNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// QuoteNonce is a free data retrieval call binding the contract method 0x2c189169.
//
// Solidity: function quoteNonce() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) QuoteNonce() (*big.Int, error) {
	return _BridgeFeeQuote.Contract.QuoteNonce(&_BridgeFeeQuote.CallOpts)
}

// QuoteNonce is a free data retrieval call binding the contract method 0x2c189169.
//
// Solidity: function quoteNonce() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) QuoteNonce() (*big.Int, error) {
	return _BridgeFeeQuote.Contract.QuoteNonce(&_BridgeFeeQuote.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BridgeFeeQuote.Contract.SupportsInterface(&_BridgeFeeQuote.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BridgeFeeQuote.Contract.SupportsInterface(&_BridgeFeeQuote.CallOpts, interfaceId)
}

// AddToken is a paid mutator transaction binding the contract method 0xf8084435.
//
// Solidity: function addToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) AddToken(opts *bind.TransactOpts, _chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "addToken", _chainName, _tokens)
}

// AddToken is a paid mutator transaction binding the contract method 0xf8084435.
//
// Solidity: function addToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) AddToken(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.AddToken(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// AddToken is a paid mutator transaction binding the contract method 0xf8084435.
//
// Solidity: function addToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) AddToken(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.AddToken(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.GrantRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.GrantRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0x943b24b2.
//
// Solidity: function initialize(address _oracle, uint8 _maxQuoteCap) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) Initialize(opts *bind.TransactOpts, _oracle common.Address, _maxQuoteCap uint8) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "initialize", _oracle, _maxQuoteCap)
}

// Initialize is a paid mutator transaction binding the contract method 0x943b24b2.
//
// Solidity: function initialize(address _oracle, uint8 _maxQuoteCap) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) Initialize(_oracle common.Address, _maxQuoteCap uint8) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Initialize(&_BridgeFeeQuote.TransactOpts, _oracle, _maxQuoteCap)
}

// Initialize is a paid mutator transaction binding the contract method 0x943b24b2.
//
// Solidity: function initialize(address _oracle, uint8 _maxQuoteCap) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) Initialize(_oracle common.Address, _maxQuoteCap uint8) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Initialize(&_BridgeFeeQuote.TransactOpts, _oracle, _maxQuoteCap)
}

// Quote is a paid mutator transaction binding the contract method 0x74d84184.
//
// Solidity: function quote((uint8,uint64,uint64,bytes32,bytes32,address,uint256)[] _inputs) returns(uint256[])
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) Quote(opts *bind.TransactOpts, _inputs []IBridgeFeeQuoteQuoteInput) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "quote", _inputs)
}

// Quote is a paid mutator transaction binding the contract method 0x74d84184.
//
// Solidity: function quote((uint8,uint64,uint64,bytes32,bytes32,address,uint256)[] _inputs) returns(uint256[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) Quote(_inputs []IBridgeFeeQuoteQuoteInput) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Quote(&_BridgeFeeQuote.TransactOpts, _inputs)
}

// Quote is a paid mutator transaction binding the contract method 0x74d84184.
//
// Solidity: function quote((uint8,uint64,uint64,bytes32,bytes32,address,uint256)[] _inputs) returns(uint256[])
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) Quote(_inputs []IBridgeFeeQuoteQuoteInput) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Quote(&_BridgeFeeQuote.TransactOpts, _inputs)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xcd87db92.
//
// Solidity: function registerChain(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RegisterChain(opts *bind.TransactOpts, _chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "registerChain", _chainName, _tokens)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xcd87db92.
//
// Solidity: function registerChain(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RegisterChain(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RegisterChain(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xcd87db92.
//
// Solidity: function registerChain(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RegisterChain(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RegisterChain(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x41fa04a8.
//
// Solidity: function removeToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RemoveToken(opts *bind.TransactOpts, _chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "removeToken", _chainName, _tokens)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x41fa04a8.
//
// Solidity: function removeToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RemoveToken(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RemoveToken(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x41fa04a8.
//
// Solidity: function removeToken(bytes32 _chainName, bytes32[] _tokens) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RemoveToken(_chainName [32]byte, _tokens [][32]byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RemoveToken(&_BridgeFeeQuote.TransactOpts, _chainName, _tokens)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RenounceRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RenounceRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RevokeRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RevokeRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeTo(&_BridgeFeeQuote.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeTo(&_BridgeFeeQuote.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeToAndCall(&_BridgeFeeQuote.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeToAndCall(&_BridgeFeeQuote.TransactOpts, newImplementation, data)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) Receive() (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Receive(&_BridgeFeeQuote.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) Receive() (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Receive(&_BridgeFeeQuote.TransactOpts)
}

// BridgeFeeQuoteAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteAdminChangedIterator struct {
	Event *BridgeFeeQuoteAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteAdminChanged represents a AdminChanged event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*BridgeFeeQuoteAdminChangedIterator, error) {

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteAdminChangedIterator{contract: _BridgeFeeQuote.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteAdminChanged) (event.Subscription, error) {

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteAdminChanged)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseAdminChanged(log types.Log) (*BridgeFeeQuoteAdminChanged, error) {
	event := new(BridgeFeeQuoteAdminChanged)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteBeaconUpgradedIterator struct {
	Event *BridgeFeeQuoteBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteBeaconUpgraded represents a BeaconUpgraded event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*BridgeFeeQuoteBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteBeaconUpgradedIterator{contract: _BridgeFeeQuote.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteBeaconUpgraded)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseBeaconUpgraded(log types.Log) (*BridgeFeeQuoteBeaconUpgraded, error) {
	event := new(BridgeFeeQuoteBeaconUpgraded)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteInitializedIterator struct {
	Event *BridgeFeeQuoteInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteInitialized represents a Initialized event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterInitialized(opts *bind.FilterOpts) (*BridgeFeeQuoteInitializedIterator, error) {

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteInitializedIterator{contract: _BridgeFeeQuote.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteInitialized) (event.Subscription, error) {

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteInitialized)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseInitialized(log types.Log) (*BridgeFeeQuoteInitialized, error) {
	event := new(BridgeFeeQuoteInitialized)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteNewQuoteIterator is returned from FilterNewQuote and is used to iterate over the raw logs and unpacked data for NewQuote events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteNewQuoteIterator struct {
	Event *BridgeFeeQuoteNewQuote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteNewQuoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteNewQuote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteNewQuote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteNewQuoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteNewQuoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteNewQuote represents a NewQuote event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteNewQuote struct {
	Id        *big.Int
	ChainName [32]byte
	TokenName [32]byte
	Oracle    common.Address
	Fee       *big.Int
	GasLimit  *big.Int
	Expiry    *big.Int
	Cap       uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewQuote is a free log retrieval operation binding the contract event 0xaaa59a21a73d2d9728095280eca494951b3d50f06502210d9ab16a1ff3a7bc58.
//
// Solidity: event NewQuote(uint256 indexed id, bytes32 indexed chainName, bytes32 indexed tokenName, address oracle, uint256 fee, uint256 gasLimit, uint256 expiry, uint8 cap)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterNewQuote(opts *bind.FilterOpts, id []*big.Int, chainName [][32]byte, tokenName [][32]byte) (*BridgeFeeQuoteNewQuoteIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var chainNameRule []interface{}
	for _, chainNameItem := range chainName {
		chainNameRule = append(chainNameRule, chainNameItem)
	}
	var tokenNameRule []interface{}
	for _, tokenNameItem := range tokenName {
		tokenNameRule = append(tokenNameRule, tokenNameItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "NewQuote", idRule, chainNameRule, tokenNameRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteNewQuoteIterator{contract: _BridgeFeeQuote.contract, event: "NewQuote", logs: logs, sub: sub}, nil
}

// WatchNewQuote is a free log subscription operation binding the contract event 0xaaa59a21a73d2d9728095280eca494951b3d50f06502210d9ab16a1ff3a7bc58.
//
// Solidity: event NewQuote(uint256 indexed id, bytes32 indexed chainName, bytes32 indexed tokenName, address oracle, uint256 fee, uint256 gasLimit, uint256 expiry, uint8 cap)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchNewQuote(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteNewQuote, id []*big.Int, chainName [][32]byte, tokenName [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var chainNameRule []interface{}
	for _, chainNameItem := range chainName {
		chainNameRule = append(chainNameRule, chainNameItem)
	}
	var tokenNameRule []interface{}
	for _, tokenNameItem := range tokenName {
		tokenNameRule = append(tokenNameRule, tokenNameItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "NewQuote", idRule, chainNameRule, tokenNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteNewQuote)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "NewQuote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewQuote is a log parse operation binding the contract event 0xaaa59a21a73d2d9728095280eca494951b3d50f06502210d9ab16a1ff3a7bc58.
//
// Solidity: event NewQuote(uint256 indexed id, bytes32 indexed chainName, bytes32 indexed tokenName, address oracle, uint256 fee, uint256 gasLimit, uint256 expiry, uint8 cap)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseNewQuote(log types.Log) (*BridgeFeeQuoteNewQuote, error) {
	event := new(BridgeFeeQuoteNewQuote)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "NewQuote", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleAdminChangedIterator struct {
	Event *BridgeFeeQuoteRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteRoleAdminChanged represents a RoleAdminChanged event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*BridgeFeeQuoteRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteRoleAdminChangedIterator{contract: _BridgeFeeQuote.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteRoleAdminChanged)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseRoleAdminChanged(log types.Log) (*BridgeFeeQuoteRoleAdminChanged, error) {
	event := new(BridgeFeeQuoteRoleAdminChanged)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleGrantedIterator struct {
	Event *BridgeFeeQuoteRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteRoleGranted represents a RoleGranted event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeFeeQuoteRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteRoleGrantedIterator{contract: _BridgeFeeQuote.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteRoleGranted)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseRoleGranted(log types.Log) (*BridgeFeeQuoteRoleGranted, error) {
	event := new(BridgeFeeQuoteRoleGranted)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleRevokedIterator struct {
	Event *BridgeFeeQuoteRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteRoleRevoked represents a RoleRevoked event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeFeeQuoteRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteRoleRevokedIterator{contract: _BridgeFeeQuote.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteRoleRevoked)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseRoleRevoked(log types.Log) (*BridgeFeeQuoteRoleRevoked, error) {
	event := new(BridgeFeeQuoteRoleRevoked)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteUpgradedIterator struct {
	Event *BridgeFeeQuoteUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteUpgraded represents a Upgraded event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*BridgeFeeQuoteUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteUpgradedIterator{contract: _BridgeFeeQuote.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteUpgraded)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseUpgraded(log types.Log) (*BridgeFeeQuoteUpgraded, error) {
	event := new(BridgeFeeQuoteUpgraded)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
