// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IBridgeFeeQuoteAsset is an auto generated low-level Go binding around an user-defined struct.
type IBridgeFeeQuoteAsset struct {
	IsActive   bool
	TokenNames []string
}

// IBridgeFeeQuoteQuoteInfo is an auto generated low-level Go binding around an user-defined struct.
type IBridgeFeeQuoteQuoteInfo struct {
	Id        *big.Int
	ChainName string
	TokenName string
	Oracle    common.Address
	Fee       *big.Int
	GasLimit  *big.Int
	Expiry    *big.Int
}

// IBridgeFeeQuoteQuoteInput is an auto generated low-level Go binding around an user-defined struct.
type IBridgeFeeQuoteQuoteInput struct {
	ChainName  string
	TokenName  string
	Oracle     common.Address
	QuoteIndex *big.Int
	Fee        *big.Int
	GasLimit   *big.Int
	Expiry     *big.Int
	Signature  []byte
}

// BridgeFeeQuoteMetaData contains all meta data concerning the BridgeFeeQuote contract.
var BridgeFeeQuoteMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ChainNameAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainNameInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteIndexInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNameAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNameInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"VerifySignatureFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"chainName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"NewQuote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"}],\"name\":\"activeTokenNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getQuote\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getQuoteById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo\",\"name\":\"q\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"}],\"name\":\"getQuoteList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"getQuotesByToken\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"chainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxQuoteIndex\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"}],\"name\":\"isActiveTokenName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"}],\"name\":\"makeMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxQuoteIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"chainName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quoteIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"structIBridgeFeeQuote.QuoteInput[]\",\"name\":\"_inputs\",\"type\":\"tuple[]\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_tokenNames\",\"type\":\"string[]\"}],\"name\":\"registerChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_tokenNames\",\"type\":\"string[]\"}],\"name\":\"registerTokenName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_chainName\",\"type\":\"string\"}],\"name\":\"supportAssets\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"structIBridgeFeeQuote.Asset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportChainNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxQuoteIndex\",\"type\":\"uint256\"}],\"name\":\"updateMaxQuoteIndex\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleContract\",\"type\":\"address\"}],\"name\":\"updateOracleContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "",
}

// BridgeFeeQuoteABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeFeeQuoteMetaData.ABI instead.
var BridgeFeeQuoteABI = BridgeFeeQuoteMetaData.ABI

// BridgeFeeQuoteBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeFeeQuoteMetaData.Bin instead.
var BridgeFeeQuoteBin = BridgeFeeQuoteMetaData.Bin

// DeployBridgeFeeQuote deploys a new Ethereum contract, binding an instance of BridgeFeeQuote to it.
func DeployBridgeFeeQuote(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BridgeFeeQuote, error) {
	parsed, err := BridgeFeeQuoteMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeFeeQuoteBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BridgeFeeQuote{BridgeFeeQuoteCaller: BridgeFeeQuoteCaller{contract: contract}, BridgeFeeQuoteTransactor: BridgeFeeQuoteTransactor{contract: contract}, BridgeFeeQuoteFilterer: BridgeFeeQuoteFilterer{contract: contract}}, nil
}

// BridgeFeeQuote is an auto generated Go binding around an Ethereum contract.
type BridgeFeeQuote struct {
	BridgeFeeQuoteCaller     // Read-only binding to the contract
	BridgeFeeQuoteTransactor // Write-only binding to the contract
	BridgeFeeQuoteFilterer   // Log filterer for contract events
}

// BridgeFeeQuoteCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeFeeQuoteCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFeeQuoteTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeFeeQuoteTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFeeQuoteFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFeeQuoteFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFeeQuoteSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeFeeQuoteSession struct {
	Contract     *BridgeFeeQuote   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeFeeQuoteCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeFeeQuoteCallerSession struct {
	Contract *BridgeFeeQuoteCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BridgeFeeQuoteTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeFeeQuoteTransactorSession struct {
	Contract     *BridgeFeeQuoteTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BridgeFeeQuoteRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeFeeQuoteRaw struct {
	Contract *BridgeFeeQuote // Generic contract binding to access the raw methods on
}

// BridgeFeeQuoteCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeFeeQuoteCallerRaw struct {
	Contract *BridgeFeeQuoteCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeFeeQuoteTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeFeeQuoteTransactorRaw struct {
	Contract *BridgeFeeQuoteTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridgeFeeQuote creates a new instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuote(address common.Address, backend bind.ContractBackend) (*BridgeFeeQuote, error) {
	contract, err := bindBridgeFeeQuote(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuote{BridgeFeeQuoteCaller: BridgeFeeQuoteCaller{contract: contract}, BridgeFeeQuoteTransactor: BridgeFeeQuoteTransactor{contract: contract}, BridgeFeeQuoteFilterer: BridgeFeeQuoteFilterer{contract: contract}}, nil
}

// NewBridgeFeeQuoteCaller creates a new read-only instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuoteCaller(address common.Address, caller bind.ContractCaller) (*BridgeFeeQuoteCaller, error) {
	contract, err := bindBridgeFeeQuote(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteCaller{contract: contract}, nil
}

// NewBridgeFeeQuoteTransactor creates a new write-only instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuoteTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeFeeQuoteTransactor, error) {
	contract, err := bindBridgeFeeQuote(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteTransactor{contract: contract}, nil
}

// NewBridgeFeeQuoteFilterer creates a new log filterer instance of BridgeFeeQuote, bound to a specific deployed contract.
func NewBridgeFeeQuoteFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFeeQuoteFilterer, error) {
	contract, err := bindBridgeFeeQuote(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteFilterer{contract: contract}, nil
}

// bindBridgeFeeQuote binds a generic wrapper to an already deployed contract.
func bindBridgeFeeQuote(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BridgeFeeQuoteMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeFeeQuote *BridgeFeeQuoteRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeFeeQuote.Contract.BridgeFeeQuoteCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeFeeQuote *BridgeFeeQuoteRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.BridgeFeeQuoteTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeFeeQuote *BridgeFeeQuoteRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.BridgeFeeQuoteTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BridgeFeeQuote *BridgeFeeQuoteCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BridgeFeeQuote.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.DEFAULTADMINROLE(&_BridgeFeeQuote.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.DEFAULTADMINROLE(&_BridgeFeeQuote.CallOpts)
}

// OWNERROLE is a free data retrieval call binding the contract method 0xe58378bb.
//
// Solidity: function OWNER_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) OWNERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "OWNER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OWNERROLE is a free data retrieval call binding the contract method 0xe58378bb.
//
// Solidity: function OWNER_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) OWNERROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.OWNERROLE(&_BridgeFeeQuote.CallOpts)
}

// OWNERROLE is a free data retrieval call binding the contract method 0xe58378bb.
//
// Solidity: function OWNER_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) OWNERROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.OWNERROLE(&_BridgeFeeQuote.CallOpts)
}

// UPGRADEROLE is a free data retrieval call binding the contract method 0xb908afa8.
//
// Solidity: function UPGRADE_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) UPGRADEROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "UPGRADE_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// UPGRADEROLE is a free data retrieval call binding the contract method 0xb908afa8.
//
// Solidity: function UPGRADE_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) UPGRADEROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.UPGRADEROLE(&_BridgeFeeQuote.CallOpts)
}

// UPGRADEROLE is a free data retrieval call binding the contract method 0xb908afa8.
//
// Solidity: function UPGRADE_ROLE() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) UPGRADEROLE() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.UPGRADEROLE(&_BridgeFeeQuote.CallOpts)
}

// ActiveTokenNames is a free data retrieval call binding the contract method 0x8b2b25e0.
//
// Solidity: function activeTokenNames(string _chainName) view returns(string[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) ActiveTokenNames(opts *bind.CallOpts, _chainName string) ([]string, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "activeTokenNames", _chainName)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// ActiveTokenNames is a free data retrieval call binding the contract method 0x8b2b25e0.
//
// Solidity: function activeTokenNames(string _chainName) view returns(string[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) ActiveTokenNames(_chainName string) ([]string, error) {
	return _BridgeFeeQuote.Contract.ActiveTokenNames(&_BridgeFeeQuote.CallOpts, _chainName)
}

// ActiveTokenNames is a free data retrieval call binding the contract method 0x8b2b25e0.
//
// Solidity: function activeTokenNames(string _chainName) view returns(string[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) ActiveTokenNames(_chainName string) ([]string, error) {
	return _BridgeFeeQuote.Contract.ActiveTokenNames(&_BridgeFeeQuote.CallOpts, _chainName)
}

// Assets is a free data retrieval call binding the contract method 0x85936228.
//
// Solidity: function assets(string ) view returns(bool isActive)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) Assets(opts *bind.CallOpts, arg0 string) (bool, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "assets", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Assets is a free data retrieval call binding the contract method 0x85936228.
//
// Solidity: function assets(string ) view returns(bool isActive)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) Assets(arg0 string) (bool, error) {
	return _BridgeFeeQuote.Contract.Assets(&_BridgeFeeQuote.CallOpts, arg0)
}

// Assets is a free data retrieval call binding the contract method 0x85936228.
//
// Solidity: function assets(string ) view returns(bool isActive)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) Assets(arg0 string) (bool, error) {
	return _BridgeFeeQuote.Contract.Assets(&_BridgeFeeQuote.CallOpts, arg0)
}

// ChainNames is a free data retrieval call binding the contract method 0x7223c6ba.
//
// Solidity: function chainNames(uint256 ) view returns(string)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) ChainNames(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "chainNames", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// ChainNames is a free data retrieval call binding the contract method 0x7223c6ba.
//
// Solidity: function chainNames(uint256 ) view returns(string)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) ChainNames(arg0 *big.Int) (string, error) {
	return _BridgeFeeQuote.Contract.ChainNames(&_BridgeFeeQuote.CallOpts, arg0)
}

// ChainNames is a free data retrieval call binding the contract method 0x7223c6ba.
//
// Solidity: function chainNames(uint256 ) view returns(string)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) ChainNames(arg0 *big.Int) (string, error) {
	return _BridgeFeeQuote.Contract.ChainNames(&_BridgeFeeQuote.CallOpts, arg0)
}

// GetQuote is a free data retrieval call binding the contract method 0xdb223194.
//
// Solidity: function getQuote(string _chainName, string _tokenName, address _oracle, uint256 _index) view returns((uint256,string,string,address,uint256,uint256,uint256))
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetQuote(opts *bind.CallOpts, _chainName string, _tokenName string, _oracle common.Address, _index *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getQuote", _chainName, _tokenName, _oracle, _index)

	if err != nil {
		return *new(IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IBridgeFeeQuoteQuoteInfo)).(*IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetQuote is a free data retrieval call binding the contract method 0xdb223194.
//
// Solidity: function getQuote(string _chainName, string _tokenName, address _oracle, uint256 _index) view returns((uint256,string,string,address,uint256,uint256,uint256))
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetQuote(_chainName string, _tokenName string, _oracle common.Address, _index *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuote(&_BridgeFeeQuote.CallOpts, _chainName, _tokenName, _oracle, _index)
}

// GetQuote is a free data retrieval call binding the contract method 0xdb223194.
//
// Solidity: function getQuote(string _chainName, string _tokenName, address _oracle, uint256 _index) view returns((uint256,string,string,address,uint256,uint256,uint256))
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetQuote(_chainName string, _tokenName string, _oracle common.Address, _index *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuote(&_BridgeFeeQuote.CallOpts, _chainName, _tokenName, _oracle, _index)
}

// GetQuoteById is a free data retrieval call binding the contract method 0xa8541c17.
//
// Solidity: function getQuoteById(uint256 _id) view returns((uint256,string,string,address,uint256,uint256,uint256) q)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetQuoteById(opts *bind.CallOpts, _id *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getQuoteById", _id)

	if err != nil {
		return *new(IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IBridgeFeeQuoteQuoteInfo)).(*IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetQuoteById is a free data retrieval call binding the contract method 0xa8541c17.
//
// Solidity: function getQuoteById(uint256 _id) view returns((uint256,string,string,address,uint256,uint256,uint256) q)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetQuoteById(_id *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteById(&_BridgeFeeQuote.CallOpts, _id)
}

// GetQuoteById is a free data retrieval call binding the contract method 0xa8541c17.
//
// Solidity: function getQuoteById(uint256 _id) view returns((uint256,string,string,address,uint256,uint256,uint256) q)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetQuoteById(_id *big.Int) (IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteById(&_BridgeFeeQuote.CallOpts, _id)
}

// GetQuoteList is a free data retrieval call binding the contract method 0x398a0e6b.
//
// Solidity: function getQuoteList(string _chainName) view returns((uint256,string,string,address,uint256,uint256,uint256)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetQuoteList(opts *bind.CallOpts, _chainName string) ([]IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getQuoteList", _chainName)

	if err != nil {
		return *new([]IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IBridgeFeeQuoteQuoteInfo)).(*[]IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetQuoteList is a free data retrieval call binding the contract method 0x398a0e6b.
//
// Solidity: function getQuoteList(string _chainName) view returns((uint256,string,string,address,uint256,uint256,uint256)[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetQuoteList(_chainName string) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteList(&_BridgeFeeQuote.CallOpts, _chainName)
}

// GetQuoteList is a free data retrieval call binding the contract method 0x398a0e6b.
//
// Solidity: function getQuoteList(string _chainName) view returns((uint256,string,string,address,uint256,uint256,uint256)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetQuoteList(_chainName string) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuoteList(&_BridgeFeeQuote.CallOpts, _chainName)
}

// GetQuotesByToken is a free data retrieval call binding the contract method 0x3dd7c98c.
//
// Solidity: function getQuotesByToken(string _chainName, string _tokenName) view returns((uint256,string,string,address,uint256,uint256,uint256)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetQuotesByToken(opts *bind.CallOpts, _chainName string, _tokenName string) ([]IBridgeFeeQuoteQuoteInfo, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getQuotesByToken", _chainName, _tokenName)

	if err != nil {
		return *new([]IBridgeFeeQuoteQuoteInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IBridgeFeeQuoteQuoteInfo)).(*[]IBridgeFeeQuoteQuoteInfo)

	return out0, err

}

// GetQuotesByToken is a free data retrieval call binding the contract method 0x3dd7c98c.
//
// Solidity: function getQuotesByToken(string _chainName, string _tokenName) view returns((uint256,string,string,address,uint256,uint256,uint256)[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetQuotesByToken(_chainName string, _tokenName string) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuotesByToken(&_BridgeFeeQuote.CallOpts, _chainName, _tokenName)
}

// GetQuotesByToken is a free data retrieval call binding the contract method 0x3dd7c98c.
//
// Solidity: function getQuotesByToken(string _chainName, string _tokenName) view returns((uint256,string,string,address,uint256,uint256,uint256)[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetQuotesByToken(_chainName string, _tokenName string) ([]IBridgeFeeQuoteQuoteInfo, error) {
	return _BridgeFeeQuote.Contract.GetQuotesByToken(&_BridgeFeeQuote.CallOpts, _chainName, _tokenName)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _BridgeFeeQuote.Contract.GetRoleAdmin(&_BridgeFeeQuote.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _BridgeFeeQuote.Contract.GetRoleAdmin(&_BridgeFeeQuote.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _BridgeFeeQuote.Contract.HasRole(&_BridgeFeeQuote.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _BridgeFeeQuote.Contract.HasRole(&_BridgeFeeQuote.CallOpts, role, account)
}

// IsActiveTokenName is a free data retrieval call binding the contract method 0xd4b8c24f.
//
// Solidity: function isActiveTokenName(string _chainName, string _tokenName) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) IsActiveTokenName(opts *bind.CallOpts, _chainName string, _tokenName string) (bool, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "isActiveTokenName", _chainName, _tokenName)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsActiveTokenName is a free data retrieval call binding the contract method 0xd4b8c24f.
//
// Solidity: function isActiveTokenName(string _chainName, string _tokenName) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) IsActiveTokenName(_chainName string, _tokenName string) (bool, error) {
	return _BridgeFeeQuote.Contract.IsActiveTokenName(&_BridgeFeeQuote.CallOpts, _chainName, _tokenName)
}

// IsActiveTokenName is a free data retrieval call binding the contract method 0xd4b8c24f.
//
// Solidity: function isActiveTokenName(string _chainName, string _tokenName) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) IsActiveTokenName(_chainName string, _tokenName string) (bool, error) {
	return _BridgeFeeQuote.Contract.IsActiveTokenName(&_BridgeFeeQuote.CallOpts, _chainName, _tokenName)
}

// MakeMessageHash is a free data retrieval call binding the contract method 0x3fc57c3d.
//
// Solidity: function makeMessageHash(string _chainName, string _tokenName, uint256 _fee, uint256 _gasLimit, uint256 _expiry) pure returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) MakeMessageHash(opts *bind.CallOpts, _chainName string, _tokenName string, _fee *big.Int, _gasLimit *big.Int, _expiry *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "makeMessageHash", _chainName, _tokenName, _fee, _gasLimit, _expiry)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MakeMessageHash is a free data retrieval call binding the contract method 0x3fc57c3d.
//
// Solidity: function makeMessageHash(string _chainName, string _tokenName, uint256 _fee, uint256 _gasLimit, uint256 _expiry) pure returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) MakeMessageHash(_chainName string, _tokenName string, _fee *big.Int, _gasLimit *big.Int, _expiry *big.Int) ([32]byte, error) {
	return _BridgeFeeQuote.Contract.MakeMessageHash(&_BridgeFeeQuote.CallOpts, _chainName, _tokenName, _fee, _gasLimit, _expiry)
}

// MakeMessageHash is a free data retrieval call binding the contract method 0x3fc57c3d.
//
// Solidity: function makeMessageHash(string _chainName, string _tokenName, uint256 _fee, uint256 _gasLimit, uint256 _expiry) pure returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) MakeMessageHash(_chainName string, _tokenName string, _fee *big.Int, _gasLimit *big.Int, _expiry *big.Int) ([32]byte, error) {
	return _BridgeFeeQuote.Contract.MakeMessageHash(&_BridgeFeeQuote.CallOpts, _chainName, _tokenName, _fee, _gasLimit, _expiry)
}

// MaxQuoteIndex is a free data retrieval call binding the contract method 0xec5af586.
//
// Solidity: function maxQuoteIndex() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) MaxQuoteIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "maxQuoteIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MaxQuoteIndex is a free data retrieval call binding the contract method 0xec5af586.
//
// Solidity: function maxQuoteIndex() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) MaxQuoteIndex() (*big.Int, error) {
	return _BridgeFeeQuote.Contract.MaxQuoteIndex(&_BridgeFeeQuote.CallOpts)
}

// MaxQuoteIndex is a free data retrieval call binding the contract method 0xec5af586.
//
// Solidity: function maxQuoteIndex() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) MaxQuoteIndex() (*big.Int, error) {
	return _BridgeFeeQuote.Contract.MaxQuoteIndex(&_BridgeFeeQuote.CallOpts)
}

// OracleContract is a free data retrieval call binding the contract method 0xbece7532.
//
// Solidity: function oracleContract() view returns(address)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) OracleContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "oracleContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OracleContract is a free data retrieval call binding the contract method 0xbece7532.
//
// Solidity: function oracleContract() view returns(address)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) OracleContract() (common.Address, error) {
	return _BridgeFeeQuote.Contract.OracleContract(&_BridgeFeeQuote.CallOpts)
}

// OracleContract is a free data retrieval call binding the contract method 0xbece7532.
//
// Solidity: function oracleContract() view returns(address)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) OracleContract() (common.Address, error) {
	return _BridgeFeeQuote.Contract.OracleContract(&_BridgeFeeQuote.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) ProxiableUUID() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.ProxiableUUID(&_BridgeFeeQuote.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) ProxiableUUID() ([32]byte, error) {
	return _BridgeFeeQuote.Contract.ProxiableUUID(&_BridgeFeeQuote.CallOpts)
}

// QuoteNonce is a free data retrieval call binding the contract method 0x2c189169.
//
// Solidity: function quoteNonce() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) QuoteNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "quoteNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// QuoteNonce is a free data retrieval call binding the contract method 0x2c189169.
//
// Solidity: function quoteNonce() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) QuoteNonce() (*big.Int, error) {
	return _BridgeFeeQuote.Contract.QuoteNonce(&_BridgeFeeQuote.CallOpts)
}

// QuoteNonce is a free data retrieval call binding the contract method 0x2c189169.
//
// Solidity: function quoteNonce() view returns(uint256)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) QuoteNonce() (*big.Int, error) {
	return _BridgeFeeQuote.Contract.QuoteNonce(&_BridgeFeeQuote.CallOpts)
}

// SupportAssets is a free data retrieval call binding the contract method 0x1b826a1b.
//
// Solidity: function supportAssets(string _chainName) view returns((bool,string[]))
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) SupportAssets(opts *bind.CallOpts, _chainName string) (IBridgeFeeQuoteAsset, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "supportAssets", _chainName)

	if err != nil {
		return *new(IBridgeFeeQuoteAsset), err
	}

	out0 := *abi.ConvertType(out[0], new(IBridgeFeeQuoteAsset)).(*IBridgeFeeQuoteAsset)

	return out0, err

}

// SupportAssets is a free data retrieval call binding the contract method 0x1b826a1b.
//
// Solidity: function supportAssets(string _chainName) view returns((bool,string[]))
func (_BridgeFeeQuote *BridgeFeeQuoteSession) SupportAssets(_chainName string) (IBridgeFeeQuoteAsset, error) {
	return _BridgeFeeQuote.Contract.SupportAssets(&_BridgeFeeQuote.CallOpts, _chainName)
}

// SupportAssets is a free data retrieval call binding the contract method 0x1b826a1b.
//
// Solidity: function supportAssets(string _chainName) view returns((bool,string[]))
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) SupportAssets(_chainName string) (IBridgeFeeQuoteAsset, error) {
	return _BridgeFeeQuote.Contract.SupportAssets(&_BridgeFeeQuote.CallOpts, _chainName)
}

// SupportChainNames is a free data retrieval call binding the contract method 0x0a1d133c.
//
// Solidity: function supportChainNames() view returns(string[])
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) SupportChainNames(opts *bind.CallOpts) ([]string, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "supportChainNames")

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// SupportChainNames is a free data retrieval call binding the contract method 0x0a1d133c.
//
// Solidity: function supportChainNames() view returns(string[])
func (_BridgeFeeQuote *BridgeFeeQuoteSession) SupportChainNames() ([]string, error) {
	return _BridgeFeeQuote.Contract.SupportChainNames(&_BridgeFeeQuote.CallOpts)
}

// SupportChainNames is a free data retrieval call binding the contract method 0x0a1d133c.
//
// Solidity: function supportChainNames() view returns(string[])
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) SupportChainNames() ([]string, error) {
	return _BridgeFeeQuote.Contract.SupportChainNames(&_BridgeFeeQuote.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _BridgeFeeQuote.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BridgeFeeQuote.Contract.SupportsInterface(&_BridgeFeeQuote.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BridgeFeeQuote.Contract.SupportsInterface(&_BridgeFeeQuote.CallOpts, interfaceId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.GrantRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.GrantRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// Initialize is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _oracleContract, uint256 _maxQuoteIndex) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) Initialize(opts *bind.TransactOpts, _oracleContract common.Address, _maxQuoteIndex *big.Int) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "initialize", _oracleContract, _maxQuoteIndex)
}

// Initialize is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _oracleContract, uint256 _maxQuoteIndex) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) Initialize(_oracleContract common.Address, _maxQuoteIndex *big.Int) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Initialize(&_BridgeFeeQuote.TransactOpts, _oracleContract, _maxQuoteIndex)
}

// Initialize is a paid mutator transaction binding the contract method 0xcd6dc687.
//
// Solidity: function initialize(address _oracleContract, uint256 _maxQuoteIndex) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) Initialize(_oracleContract common.Address, _maxQuoteIndex *big.Int) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Initialize(&_BridgeFeeQuote.TransactOpts, _oracleContract, _maxQuoteIndex)
}

// Quote is a paid mutator transaction binding the contract method 0xc994e71a.
//
// Solidity: function quote((string,string,address,uint256,uint256,uint256,uint256,bytes)[] _inputs) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) Quote(opts *bind.TransactOpts, _inputs []IBridgeFeeQuoteQuoteInput) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "quote", _inputs)
}

// Quote is a paid mutator transaction binding the contract method 0xc994e71a.
//
// Solidity: function quote((string,string,address,uint256,uint256,uint256,uint256,bytes)[] _inputs) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) Quote(_inputs []IBridgeFeeQuoteQuoteInput) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Quote(&_BridgeFeeQuote.TransactOpts, _inputs)
}

// Quote is a paid mutator transaction binding the contract method 0xc994e71a.
//
// Solidity: function quote((string,string,address,uint256,uint256,uint256,uint256,bytes)[] _inputs) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) Quote(_inputs []IBridgeFeeQuoteQuoteInput) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Quote(&_BridgeFeeQuote.TransactOpts, _inputs)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xa59f39c7.
//
// Solidity: function registerChain(string _chainName, string[] _tokenNames) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RegisterChain(opts *bind.TransactOpts, _chainName string, _tokenNames []string) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "registerChain", _chainName, _tokenNames)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xa59f39c7.
//
// Solidity: function registerChain(string _chainName, string[] _tokenNames) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RegisterChain(_chainName string, _tokenNames []string) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RegisterChain(&_BridgeFeeQuote.TransactOpts, _chainName, _tokenNames)
}

// RegisterChain is a paid mutator transaction binding the contract method 0xa59f39c7.
//
// Solidity: function registerChain(string _chainName, string[] _tokenNames) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RegisterChain(_chainName string, _tokenNames []string) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RegisterChain(&_BridgeFeeQuote.TransactOpts, _chainName, _tokenNames)
}

// RegisterTokenName is a paid mutator transaction binding the contract method 0xd43e62c0.
//
// Solidity: function registerTokenName(string _chainName, string[] _tokenNames) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RegisterTokenName(opts *bind.TransactOpts, _chainName string, _tokenNames []string) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "registerTokenName", _chainName, _tokenNames)
}

// RegisterTokenName is a paid mutator transaction binding the contract method 0xd43e62c0.
//
// Solidity: function registerTokenName(string _chainName, string[] _tokenNames) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RegisterTokenName(_chainName string, _tokenNames []string) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RegisterTokenName(&_BridgeFeeQuote.TransactOpts, _chainName, _tokenNames)
}

// RegisterTokenName is a paid mutator transaction binding the contract method 0xd43e62c0.
//
// Solidity: function registerTokenName(string _chainName, string[] _tokenNames) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RegisterTokenName(_chainName string, _tokenNames []string) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RegisterTokenName(&_BridgeFeeQuote.TransactOpts, _chainName, _tokenNames)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RenounceRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RenounceRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RevokeRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.RevokeRole(&_BridgeFeeQuote.TransactOpts, role, account)
}

// UpdateMaxQuoteIndex is a paid mutator transaction binding the contract method 0x976646b9.
//
// Solidity: function updateMaxQuoteIndex(uint256 _maxQuoteIndex) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) UpdateMaxQuoteIndex(opts *bind.TransactOpts, _maxQuoteIndex *big.Int) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "updateMaxQuoteIndex", _maxQuoteIndex)
}

// UpdateMaxQuoteIndex is a paid mutator transaction binding the contract method 0x976646b9.
//
// Solidity: function updateMaxQuoteIndex(uint256 _maxQuoteIndex) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) UpdateMaxQuoteIndex(_maxQuoteIndex *big.Int) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpdateMaxQuoteIndex(&_BridgeFeeQuote.TransactOpts, _maxQuoteIndex)
}

// UpdateMaxQuoteIndex is a paid mutator transaction binding the contract method 0x976646b9.
//
// Solidity: function updateMaxQuoteIndex(uint256 _maxQuoteIndex) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) UpdateMaxQuoteIndex(_maxQuoteIndex *big.Int) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpdateMaxQuoteIndex(&_BridgeFeeQuote.TransactOpts, _maxQuoteIndex)
}

// UpdateOracleContract is a paid mutator transaction binding the contract method 0xd3bab58f.
//
// Solidity: function updateOracleContract(address _oracleContract) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) UpdateOracleContract(opts *bind.TransactOpts, _oracleContract common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "updateOracleContract", _oracleContract)
}

// UpdateOracleContract is a paid mutator transaction binding the contract method 0xd3bab58f.
//
// Solidity: function updateOracleContract(address _oracleContract) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteSession) UpdateOracleContract(_oracleContract common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpdateOracleContract(&_BridgeFeeQuote.TransactOpts, _oracleContract)
}

// UpdateOracleContract is a paid mutator transaction binding the contract method 0xd3bab58f.
//
// Solidity: function updateOracleContract(address _oracleContract) returns(bool)
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) UpdateOracleContract(_oracleContract common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpdateOracleContract(&_BridgeFeeQuote.TransactOpts, _oracleContract)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeTo(&_BridgeFeeQuote.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeTo(&_BridgeFeeQuote.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeToAndCall(&_BridgeFeeQuote.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.UpgradeToAndCall(&_BridgeFeeQuote.TransactOpts, newImplementation, data)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BridgeFeeQuote.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteSession) Receive() (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Receive(&_BridgeFeeQuote.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BridgeFeeQuote *BridgeFeeQuoteTransactorSession) Receive() (*types.Transaction, error) {
	return _BridgeFeeQuote.Contract.Receive(&_BridgeFeeQuote.TransactOpts)
}

// BridgeFeeQuoteAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteAdminChangedIterator struct {
	Event *BridgeFeeQuoteAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteAdminChanged represents a AdminChanged event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*BridgeFeeQuoteAdminChangedIterator, error) {

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteAdminChangedIterator{contract: _BridgeFeeQuote.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteAdminChanged) (event.Subscription, error) {

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteAdminChanged)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseAdminChanged(log types.Log) (*BridgeFeeQuoteAdminChanged, error) {
	event := new(BridgeFeeQuoteAdminChanged)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteBeaconUpgradedIterator struct {
	Event *BridgeFeeQuoteBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteBeaconUpgraded represents a BeaconUpgraded event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*BridgeFeeQuoteBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteBeaconUpgradedIterator{contract: _BridgeFeeQuote.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteBeaconUpgraded)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseBeaconUpgraded(log types.Log) (*BridgeFeeQuoteBeaconUpgraded, error) {
	event := new(BridgeFeeQuoteBeaconUpgraded)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteInitializedIterator struct {
	Event *BridgeFeeQuoteInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteInitialized represents a Initialized event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterInitialized(opts *bind.FilterOpts) (*BridgeFeeQuoteInitializedIterator, error) {

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteInitializedIterator{contract: _BridgeFeeQuote.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteInitialized) (event.Subscription, error) {

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteInitialized)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseInitialized(log types.Log) (*BridgeFeeQuoteInitialized, error) {
	event := new(BridgeFeeQuoteInitialized)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteNewQuoteIterator is returned from FilterNewQuote and is used to iterate over the raw logs and unpacked data for NewQuote events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteNewQuoteIterator struct {
	Event *BridgeFeeQuoteNewQuote // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteNewQuoteIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteNewQuote)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteNewQuote)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteNewQuoteIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteNewQuoteIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteNewQuote represents a NewQuote event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteNewQuote struct {
	Id        *big.Int
	Oracle    common.Address
	ChainName common.Hash
	TokenName string
	Fee       *big.Int
	GasLimit  *big.Int
	Expiry    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterNewQuote is a free log retrieval operation binding the contract event 0x0b48a34dfbe17b8e2330b80c7d240dd45b1cdb6aee27ebaaee4edb666318e4d6.
//
// Solidity: event NewQuote(uint256 indexed id, address indexed oracle, string indexed chainName, string tokenName, uint256 fee, uint256 gasLimit, uint256 expiry)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterNewQuote(opts *bind.FilterOpts, id []*big.Int, oracle []common.Address, chainName []string) (*BridgeFeeQuoteNewQuoteIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}
	var chainNameRule []interface{}
	for _, chainNameItem := range chainName {
		chainNameRule = append(chainNameRule, chainNameItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "NewQuote", idRule, oracleRule, chainNameRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteNewQuoteIterator{contract: _BridgeFeeQuote.contract, event: "NewQuote", logs: logs, sub: sub}, nil
}

// WatchNewQuote is a free log subscription operation binding the contract event 0x0b48a34dfbe17b8e2330b80c7d240dd45b1cdb6aee27ebaaee4edb666318e4d6.
//
// Solidity: event NewQuote(uint256 indexed id, address indexed oracle, string indexed chainName, string tokenName, uint256 fee, uint256 gasLimit, uint256 expiry)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchNewQuote(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteNewQuote, id []*big.Int, oracle []common.Address, chainName []string) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var oracleRule []interface{}
	for _, oracleItem := range oracle {
		oracleRule = append(oracleRule, oracleItem)
	}
	var chainNameRule []interface{}
	for _, chainNameItem := range chainName {
		chainNameRule = append(chainNameRule, chainNameItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "NewQuote", idRule, oracleRule, chainNameRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteNewQuote)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "NewQuote", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewQuote is a log parse operation binding the contract event 0x0b48a34dfbe17b8e2330b80c7d240dd45b1cdb6aee27ebaaee4edb666318e4d6.
//
// Solidity: event NewQuote(uint256 indexed id, address indexed oracle, string indexed chainName, string tokenName, uint256 fee, uint256 gasLimit, uint256 expiry)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseNewQuote(log types.Log) (*BridgeFeeQuoteNewQuote, error) {
	event := new(BridgeFeeQuoteNewQuote)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "NewQuote", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleAdminChangedIterator struct {
	Event *BridgeFeeQuoteRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteRoleAdminChanged represents a RoleAdminChanged event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*BridgeFeeQuoteRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteRoleAdminChangedIterator{contract: _BridgeFeeQuote.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteRoleAdminChanged)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseRoleAdminChanged(log types.Log) (*BridgeFeeQuoteRoleAdminChanged, error) {
	event := new(BridgeFeeQuoteRoleAdminChanged)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleGrantedIterator struct {
	Event *BridgeFeeQuoteRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteRoleGranted represents a RoleGranted event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeFeeQuoteRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteRoleGrantedIterator{contract: _BridgeFeeQuote.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteRoleGranted)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseRoleGranted(log types.Log) (*BridgeFeeQuoteRoleGranted, error) {
	event := new(BridgeFeeQuoteRoleGranted)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleRevokedIterator struct {
	Event *BridgeFeeQuoteRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteRoleRevoked represents a RoleRevoked event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*BridgeFeeQuoteRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteRoleRevokedIterator{contract: _BridgeFeeQuote.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteRoleRevoked)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseRoleRevoked(log types.Log) (*BridgeFeeQuoteRoleRevoked, error) {
	event := new(BridgeFeeQuoteRoleRevoked)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeFeeQuoteUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteUpgradedIterator struct {
	Event *BridgeFeeQuoteUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeFeeQuoteUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeFeeQuoteUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeFeeQuoteUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeFeeQuoteUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeFeeQuoteUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeFeeQuoteUpgraded represents a Upgraded event raised by the BridgeFeeQuote contract.
type BridgeFeeQuoteUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*BridgeFeeQuoteUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &BridgeFeeQuoteUpgradedIterator{contract: _BridgeFeeQuote.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *BridgeFeeQuoteUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _BridgeFeeQuote.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeFeeQuoteUpgraded)
				if err := _BridgeFeeQuote.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_BridgeFeeQuote *BridgeFeeQuoteFilterer) ParseUpgraded(log types.Log) (*BridgeFeeQuoteUpgraded, error) {
	event := new(BridgeFeeQuoteUpgraded)
	if err := _BridgeFeeQuote.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
