package contract_test

import (
	"encoding/hex"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/require"

	"github.com/functionx/fx-core/v8/contract"
)

func TestPackBridgeCallback(t *testing.T) {
	type arg struct {
		sender   common.Address
		receiver common.Address
		_tokens  []common.Address
		_amounts []*big.Int
		data     []byte
		memo     []byte
	}
	tests := []struct {
		name     string
		args     arg
		expected string
		err      error
	}{
		{
			name: "ok",
			args: arg{
				sender:   common.HexToAddress("0x0000000000000000000000000000000000000001"),
				receiver: common.HexToAddress("0x0000000000000000000000000000000000000002"),
				_tokens: []common.Address{
					common.HexToAddress("0x0000000000000000000000000000000000000001"),
					common.HexToAddress("0x0000000000000000000000000000000000000002"),
					common.HexToAddress("0x0000000000000000000000000000000000000003"),
				},
				_amounts: []*big.Int{
					big.NewInt(1),
					big.NewInt(2),
					big.NewInt(3),
				},
				// transferFrom(address,address,uint256) 0x0000000000000000000000000000000000000001 0x0000000000000000000000000000000000000002 1000000000000000000
				data: common.Hex2Bytes("23b872dd000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000de0b6b3a7640000"),
				// memo string
				memo: common.Hex2Bytes("6d656d6f00000000000000000000000000000000000000000000000000000000"),
			},
			expected: "139975660000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006423b872dd000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000206d656d6f00000000000000000000000000000000000000000000000000000000",
			err:      nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result, err := contract.PackBridgeCallback(tt.args.sender, tt.args.receiver, tt.args._tokens, tt.args._amounts, tt.args.data, tt.args.memo)
			if tt.err != nil {
				require.Error(t, err)
				require.EqualValues(t, tt.err.Error(), err.Error())
				return
			}

			require.NoError(t, err)
			require.EqualValues(t, tt.expected, hex.EncodeToString(result))
		})
	}
}
