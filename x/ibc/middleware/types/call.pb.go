// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fx/ibc/applications/transfer/v1/call.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IbcCallType int32

const (
	IBC_CALL_TYPE_UNSPECIFIED IbcCallType = 0
	IBC_CALL_TYPE_EVM         IbcCallType = 1
)

var IbcCallType_name = map[int32]string{
	0: "IBC_CALL_TYPE_UNSPECIFIED",
	1: "IBC_CALL_TYPE_EVM",
}

var IbcCallType_value = map[string]int32{
	"IBC_CALL_TYPE_UNSPECIFIED": 0,
	"IBC_CALL_TYPE_EVM":         1,
}

func (x IbcCallType) String() string {
	return proto.EnumName(IbcCallType_name, int32(x))
}

func (IbcCallType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_16a7c2ba00f678ac, []int{0}
}

type IbcCallEvmPacket struct {
	To    string                `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Data  string                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Value cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=value,proto3,customtype=cosmossdk.io/math.Int" json:"value"`
}

func (m *IbcCallEvmPacket) Reset()         { *m = IbcCallEvmPacket{} }
func (m *IbcCallEvmPacket) String() string { return proto.CompactTextString(m) }
func (*IbcCallEvmPacket) ProtoMessage()    {}
func (*IbcCallEvmPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a7c2ba00f678ac, []int{0}
}
func (m *IbcCallEvmPacket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IbcCallEvmPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IbcCallEvmPacket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IbcCallEvmPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IbcCallEvmPacket.Merge(m, src)
}
func (m *IbcCallEvmPacket) XXX_Size() int {
	return m.Size()
}
func (m *IbcCallEvmPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_IbcCallEvmPacket.DiscardUnknown(m)
}

var xxx_messageInfo_IbcCallEvmPacket proto.InternalMessageInfo

func (m *IbcCallEvmPacket) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *IbcCallEvmPacket) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterEnum("fx.ibc.applications.transfer.v1.IbcCallType", IbcCallType_name, IbcCallType_value)
	proto.RegisterType((*IbcCallEvmPacket)(nil), "fx.ibc.applications.transfer.v1.IbcCallEvmPacket")
}

func init() {
	proto.RegisterFile("fx/ibc/applications/transfer/v1/call.proto", fileDescriptor_16a7c2ba00f678ac)
}

var fileDescriptor_16a7c2ba00f678ac = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x50, 0xcd, 0x4a, 0xeb, 0x40,
	0x18, 0x4d, 0x7a, 0x7b, 0x2f, 0xdc, 0xb9, 0x70, 0xa9, 0xc1, 0x42, 0x5b, 0x30, 0x15, 0x57, 0x52,
	0xe9, 0x0c, 0x45, 0x17, 0x6e, 0xdb, 0x18, 0x21, 0x50, 0x4b, 0xa9, 0x55, 0xd0, 0x4d, 0x98, 0x4c,
	0x26, 0xed, 0xd0, 0x49, 0x26, 0x24, 0xd3, 0xd8, 0xbe, 0x81, 0x4b, 0xdf, 0xc1, 0x57, 0xf0, 0x21,
	0xba, 0x2c, 0xae, 0xc4, 0x45, 0x91, 0xf6, 0x45, 0xa4, 0x99, 0x0a, 0xba, 0x3b, 0xdf, 0xf9, 0xf9,
	0x0e, 0x1c, 0xd0, 0x08, 0x66, 0x88, 0x79, 0x04, 0xe1, 0x38, 0xe6, 0x8c, 0x60, 0xc9, 0x44, 0x94,
	0x22, 0x99, 0xe0, 0x28, 0x0d, 0x68, 0x82, 0xb2, 0x16, 0x22, 0x98, 0x73, 0x18, 0x27, 0x42, 0x0a,
	0xa3, 0x1e, 0xcc, 0x20, 0xf3, 0x08, 0xfc, 0xee, 0x85, 0x5f, 0x5e, 0x98, 0xb5, 0x6a, 0xfb, 0x23,
	0x31, 0x12, 0xb9, 0x17, 0x6d, 0x91, 0x8a, 0xd5, 0xaa, 0x44, 0xa4, 0xa1, 0x48, 0x5d, 0x25, 0xa8,
	0x43, 0x49, 0x47, 0x73, 0x50, 0x72, 0x3c, 0x62, 0x61, 0xce, 0xed, 0x2c, 0xec, 0x63, 0x32, 0xa1,
	0xd2, 0xf8, 0x0f, 0x0a, 0x52, 0x54, 0xf4, 0x43, 0xfd, 0xf8, 0xef, 0xa0, 0x20, 0x85, 0x61, 0x80,
	0xa2, 0x8f, 0x25, 0xae, 0x14, 0x72, 0x26, 0xc7, 0x46, 0x1b, 0xfc, 0xce, 0x30, 0x9f, 0xd2, 0xca,
	0xaf, 0x2d, 0xd9, 0x39, 0x59, 0xac, 0xea, 0xda, 0xfb, 0xaa, 0x5e, 0x56, 0xcf, 0x53, 0x7f, 0x02,
	0x99, 0x40, 0x21, 0x96, 0x63, 0xe8, 0x44, 0xf2, 0xf5, 0xa5, 0x09, 0x76, 0xad, 0x4e, 0x24, 0x07,
	0x2a, 0xd9, 0x70, 0xc0, 0xbf, 0x5d, 0xf5, 0x70, 0x1e, 0x53, 0xe3, 0x00, 0x54, 0x9d, 0x8e, 0xe5,
	0x5a, 0xed, 0x6e, 0xd7, 0x1d, 0xde, 0xf5, 0x6d, 0xf7, 0xa6, 0x77, 0xdd, 0xb7, 0x2d, 0xe7, 0xd2,
	0xb1, 0x2f, 0x4a, 0x9a, 0x51, 0x06, 0x7b, 0x3f, 0x65, 0xfb, 0xf6, 0xaa, 0xa4, 0xd7, 0x8a, 0x8f,
	0xcf, 0xa6, 0xd6, 0xe9, 0x2d, 0xd6, 0xa6, 0xbe, 0x5c, 0x9b, 0xfa, 0xc7, 0xda, 0xd4, 0x9f, 0x36,
	0xa6, 0xb6, 0xdc, 0x98, 0xda, 0xdb, 0xc6, 0xd4, 0xee, 0xcf, 0x46, 0x4c, 0x8e, 0xa7, 0x1e, 0x24,
	0x22, 0x44, 0xf1, 0x34, 0xf2, 0x19, 0x66, 0x28, 0x98, 0x35, 0x89, 0x48, 0x28, 0xca, 0xce, 0x91,
	0x9a, 0x3e, 0x64, 0xbe, 0xcf, 0xe9, 0x03, 0x4e, 0x28, 0x92, 0xf3, 0x98, 0xa6, 0xde, 0x9f, 0x7c,
	0x9c, 0xd3, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x50, 0x16, 0xfb, 0xe8, 0x9c, 0x01, 0x00, 0x00,
}

func (m *IbcCallEvmPacket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IbcCallEvmPacket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IbcCallEvmPacket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Value.Size()
		i -= size
		if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCall(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintCall(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintCall(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCall(dAtA []byte, offset int, v uint64) int {
	offset -= sovCall(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IbcCallEvmPacket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovCall(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCall(uint64(l))
	}
	l = m.Value.Size()
	n += 1 + l + sovCall(uint64(l))
	return n
}

func sovCall(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCall(x uint64) (n int) {
	return sovCall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IbcCallEvmPacket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IbcCallEvmPacket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IbcCallEvmPacket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCall
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCall
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCall
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCall        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCall          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCall = fmt.Errorf("proto: unexpected end of group")
)
