// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fx/gravity/crosschain/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

func (m *QueryParamsRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryCurrentOracleSetRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *QueryCurrentOracleSetRequest) Reset()         { *m = QueryCurrentOracleSetRequest{} }
func (m *QueryCurrentOracleSetRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentOracleSetRequest) ProtoMessage()    {}
func (*QueryCurrentOracleSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{2}
}
func (m *QueryCurrentOracleSetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentOracleSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentOracleSetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentOracleSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentOracleSetRequest.Merge(m, src)
}
func (m *QueryCurrentOracleSetRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentOracleSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentOracleSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentOracleSetRequest proto.InternalMessageInfo

func (m *QueryCurrentOracleSetRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type QueryCurrentOracleSetResponse struct {
	OracleSet *OracleSet `protobuf:"bytes,1,opt,name=oracle_set,json=oracleSet,proto3" json:"oracle_set,omitempty"`
}

func (m *QueryCurrentOracleSetResponse) Reset()         { *m = QueryCurrentOracleSetResponse{} }
func (m *QueryCurrentOracleSetResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentOracleSetResponse) ProtoMessage()    {}
func (*QueryCurrentOracleSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{3}
}
func (m *QueryCurrentOracleSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentOracleSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentOracleSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentOracleSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentOracleSetResponse.Merge(m, src)
}
func (m *QueryCurrentOracleSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentOracleSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentOracleSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentOracleSetResponse proto.InternalMessageInfo

func (m *QueryCurrentOracleSetResponse) GetOracleSet() *OracleSet {
	if m != nil {
		return m.OracleSet
	}
	return nil
}

type QueryOracleSetRequestRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	Nonce     uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryOracleSetRequestRequest) Reset()         { *m = QueryOracleSetRequestRequest{} }
func (m *QueryOracleSetRequestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleSetRequestRequest) ProtoMessage()    {}
func (*QueryOracleSetRequestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{4}
}
func (m *QueryOracleSetRequestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleSetRequestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleSetRequestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleSetRequestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleSetRequestRequest.Merge(m, src)
}
func (m *QueryOracleSetRequestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleSetRequestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleSetRequestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleSetRequestRequest proto.InternalMessageInfo

func (m *QueryOracleSetRequestRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryOracleSetRequestRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryOracleSetRequestResponse struct {
	OracleSet *OracleSet `protobuf:"bytes,1,opt,name=oracle_set,json=oracleSet,proto3" json:"oracle_set,omitempty"`
}

func (m *QueryOracleSetRequestResponse) Reset()         { *m = QueryOracleSetRequestResponse{} }
func (m *QueryOracleSetRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleSetRequestResponse) ProtoMessage()    {}
func (*QueryOracleSetRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{5}
}
func (m *QueryOracleSetRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleSetRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleSetRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleSetRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleSetRequestResponse.Merge(m, src)
}
func (m *QueryOracleSetRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleSetRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleSetRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleSetRequestResponse proto.InternalMessageInfo

func (m *QueryOracleSetRequestResponse) GetOracleSet() *OracleSet {
	if m != nil {
		return m.OracleSet
	}
	return nil
}

type QueryOracleSetConfirmRequest struct {
	ChainName      string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	BridgerAddress string `protobuf:"bytes,2,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
	Nonce          uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryOracleSetConfirmRequest) Reset()         { *m = QueryOracleSetConfirmRequest{} }
func (m *QueryOracleSetConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleSetConfirmRequest) ProtoMessage()    {}
func (*QueryOracleSetConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{6}
}
func (m *QueryOracleSetConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleSetConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleSetConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleSetConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleSetConfirmRequest.Merge(m, src)
}
func (m *QueryOracleSetConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleSetConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleSetConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleSetConfirmRequest proto.InternalMessageInfo

func (m *QueryOracleSetConfirmRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryOracleSetConfirmRequest) GetBridgerAddress() string {
	if m != nil {
		return m.BridgerAddress
	}
	return ""
}

func (m *QueryOracleSetConfirmRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryOracleSetConfirmResponse struct {
	Confirm *MsgOracleSetConfirm `protobuf:"bytes,1,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (m *QueryOracleSetConfirmResponse) Reset()         { *m = QueryOracleSetConfirmResponse{} }
func (m *QueryOracleSetConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleSetConfirmResponse) ProtoMessage()    {}
func (*QueryOracleSetConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{7}
}
func (m *QueryOracleSetConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleSetConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleSetConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleSetConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleSetConfirmResponse.Merge(m, src)
}
func (m *QueryOracleSetConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleSetConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleSetConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleSetConfirmResponse proto.InternalMessageInfo

func (m *QueryOracleSetConfirmResponse) GetConfirm() *MsgOracleSetConfirm {
	if m != nil {
		return m.Confirm
	}
	return nil
}

type QueryOracleSetConfirmsByNonceRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	Nonce     uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryOracleSetConfirmsByNonceRequest) Reset()         { *m = QueryOracleSetConfirmsByNonceRequest{} }
func (m *QueryOracleSetConfirmsByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleSetConfirmsByNonceRequest) ProtoMessage()    {}
func (*QueryOracleSetConfirmsByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{8}
}
func (m *QueryOracleSetConfirmsByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleSetConfirmsByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleSetConfirmsByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleSetConfirmsByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleSetConfirmsByNonceRequest.Merge(m, src)
}
func (m *QueryOracleSetConfirmsByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleSetConfirmsByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleSetConfirmsByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleSetConfirmsByNonceRequest proto.InternalMessageInfo

func (m *QueryOracleSetConfirmsByNonceRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryOracleSetConfirmsByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryOracleSetConfirmsByNonceResponse struct {
	Confirms []*MsgOracleSetConfirm `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms,omitempty"`
}

func (m *QueryOracleSetConfirmsByNonceResponse) Reset()         { *m = QueryOracleSetConfirmsByNonceResponse{} }
func (m *QueryOracleSetConfirmsByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleSetConfirmsByNonceResponse) ProtoMessage()    {}
func (*QueryOracleSetConfirmsByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{9}
}
func (m *QueryOracleSetConfirmsByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleSetConfirmsByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleSetConfirmsByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleSetConfirmsByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleSetConfirmsByNonceResponse.Merge(m, src)
}
func (m *QueryOracleSetConfirmsByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleSetConfirmsByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleSetConfirmsByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleSetConfirmsByNonceResponse proto.InternalMessageInfo

func (m *QueryOracleSetConfirmsByNonceResponse) GetConfirms() []*MsgOracleSetConfirm {
	if m != nil {
		return m.Confirms
	}
	return nil
}

type QueryLastOracleSetRequestsRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *QueryLastOracleSetRequestsRequest) Reset()         { *m = QueryLastOracleSetRequestsRequest{} }
func (m *QueryLastOracleSetRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastOracleSetRequestsRequest) ProtoMessage()    {}
func (*QueryLastOracleSetRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{10}
}
func (m *QueryLastOracleSetRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastOracleSetRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastOracleSetRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastOracleSetRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastOracleSetRequestsRequest.Merge(m, src)
}
func (m *QueryLastOracleSetRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastOracleSetRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastOracleSetRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastOracleSetRequestsRequest proto.InternalMessageInfo

func (m *QueryLastOracleSetRequestsRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type QueryLastOracleSetRequestsResponse struct {
	OracleSets []*OracleSet `protobuf:"bytes,1,rep,name=oracle_sets,json=oracleSets,proto3" json:"oracle_sets,omitempty"`
}

func (m *QueryLastOracleSetRequestsResponse) Reset()         { *m = QueryLastOracleSetRequestsResponse{} }
func (m *QueryLastOracleSetRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastOracleSetRequestsResponse) ProtoMessage()    {}
func (*QueryLastOracleSetRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{11}
}
func (m *QueryLastOracleSetRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastOracleSetRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastOracleSetRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastOracleSetRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastOracleSetRequestsResponse.Merge(m, src)
}
func (m *QueryLastOracleSetRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastOracleSetRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastOracleSetRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastOracleSetRequestsResponse proto.InternalMessageInfo

func (m *QueryLastOracleSetRequestsResponse) GetOracleSets() []*OracleSet {
	if m != nil {
		return m.OracleSets
	}
	return nil
}

type QueryLastPendingOracleSetRequestByAddrRequest struct {
	ChainName      string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	BridgerAddress string `protobuf:"bytes,2,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
}

func (m *QueryLastPendingOracleSetRequestByAddrRequest) Reset() {
	*m = QueryLastPendingOracleSetRequestByAddrRequest{}
}
func (m *QueryLastPendingOracleSetRequestByAddrRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingOracleSetRequestByAddrRequest) ProtoMessage() {}
func (*QueryLastPendingOracleSetRequestByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{12}
}
func (m *QueryLastPendingOracleSetRequestByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingOracleSetRequestByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingOracleSetRequestByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingOracleSetRequestByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingOracleSetRequestByAddrRequest.Merge(m, src)
}
func (m *QueryLastPendingOracleSetRequestByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingOracleSetRequestByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingOracleSetRequestByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingOracleSetRequestByAddrRequest proto.InternalMessageInfo

func (m *QueryLastPendingOracleSetRequestByAddrRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryLastPendingOracleSetRequestByAddrRequest) GetBridgerAddress() string {
	if m != nil {
		return m.BridgerAddress
	}
	return ""
}

type QueryLastPendingOracleSetRequestByAddrResponse struct {
	OracleSets []*OracleSet `protobuf:"bytes,1,rep,name=oracle_sets,json=oracleSets,proto3" json:"oracle_sets,omitempty"`
}

func (m *QueryLastPendingOracleSetRequestByAddrResponse) Reset() {
	*m = QueryLastPendingOracleSetRequestByAddrResponse{}
}
func (m *QueryLastPendingOracleSetRequestByAddrResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingOracleSetRequestByAddrResponse) ProtoMessage() {}
func (*QueryLastPendingOracleSetRequestByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{13}
}
func (m *QueryLastPendingOracleSetRequestByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingOracleSetRequestByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingOracleSetRequestByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingOracleSetRequestByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingOracleSetRequestByAddrResponse.Merge(m, src)
}
func (m *QueryLastPendingOracleSetRequestByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingOracleSetRequestByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingOracleSetRequestByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingOracleSetRequestByAddrResponse proto.InternalMessageInfo

func (m *QueryLastPendingOracleSetRequestByAddrResponse) GetOracleSets() []*OracleSet {
	if m != nil {
		return m.OracleSets
	}
	return nil
}

type QueryBatchFeeRequest struct {
	ChainName    string        `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	MinBatchFees []MinBatchFee `protobuf:"bytes,2,rep,name=min_batch_fees,json=minBatchFees,proto3" json:"min_batch_fees"`
}

func (m *QueryBatchFeeRequest) Reset()         { *m = QueryBatchFeeRequest{} }
func (m *QueryBatchFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchFeeRequest) ProtoMessage()    {}
func (*QueryBatchFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{14}
}
func (m *QueryBatchFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchFeeRequest.Merge(m, src)
}
func (m *QueryBatchFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchFeeRequest proto.InternalMessageInfo

func (m *QueryBatchFeeRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryBatchFeeRequest) GetMinBatchFees() []MinBatchFee {
	if m != nil {
		return m.MinBatchFees
	}
	return nil
}

type QueryBatchFeeResponse struct {
	BatchFees []*BatchFees `protobuf:"bytes,1,rep,name=batch_fees,json=batchFees,proto3" json:"batch_fees,omitempty"`
}

func (m *QueryBatchFeeResponse) Reset()         { *m = QueryBatchFeeResponse{} }
func (m *QueryBatchFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchFeeResponse) ProtoMessage()    {}
func (*QueryBatchFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{15}
}
func (m *QueryBatchFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchFeeResponse.Merge(m, src)
}
func (m *QueryBatchFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchFeeResponse proto.InternalMessageInfo

func (m *QueryBatchFeeResponse) GetBatchFees() []*BatchFees {
	if m != nil {
		return m.BatchFees
	}
	return nil
}

type QueryLastPendingBatchRequestByAddrRequest struct {
	ChainName      string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	BridgerAddress string `protobuf:"bytes,2,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
}

func (m *QueryLastPendingBatchRequestByAddrRequest) Reset() {
	*m = QueryLastPendingBatchRequestByAddrRequest{}
}
func (m *QueryLastPendingBatchRequestByAddrRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingBatchRequestByAddrRequest) ProtoMessage() {}
func (*QueryLastPendingBatchRequestByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{16}
}
func (m *QueryLastPendingBatchRequestByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingBatchRequestByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingBatchRequestByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingBatchRequestByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingBatchRequestByAddrRequest.Merge(m, src)
}
func (m *QueryLastPendingBatchRequestByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingBatchRequestByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingBatchRequestByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingBatchRequestByAddrRequest proto.InternalMessageInfo

func (m *QueryLastPendingBatchRequestByAddrRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryLastPendingBatchRequestByAddrRequest) GetBridgerAddress() string {
	if m != nil {
		return m.BridgerAddress
	}
	return ""
}

type QueryLastPendingBatchRequestByAddrResponse struct {
	Batch *OutgoingTxBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (m *QueryLastPendingBatchRequestByAddrResponse) Reset() {
	*m = QueryLastPendingBatchRequestByAddrResponse{}
}
func (m *QueryLastPendingBatchRequestByAddrResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryLastPendingBatchRequestByAddrResponse) ProtoMessage() {}
func (*QueryLastPendingBatchRequestByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{17}
}
func (m *QueryLastPendingBatchRequestByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingBatchRequestByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingBatchRequestByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingBatchRequestByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingBatchRequestByAddrResponse.Merge(m, src)
}
func (m *QueryLastPendingBatchRequestByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingBatchRequestByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingBatchRequestByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingBatchRequestByAddrResponse proto.InternalMessageInfo

func (m *QueryLastPendingBatchRequestByAddrResponse) GetBatch() *OutgoingTxBatch {
	if m != nil {
		return m.Batch
	}
	return nil
}

type QueryOutgoingTxBatchesRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *QueryOutgoingTxBatchesRequest) Reset()         { *m = QueryOutgoingTxBatchesRequest{} }
func (m *QueryOutgoingTxBatchesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingTxBatchesRequest) ProtoMessage()    {}
func (*QueryOutgoingTxBatchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{18}
}
func (m *QueryOutgoingTxBatchesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchesRequest.Merge(m, src)
}
func (m *QueryOutgoingTxBatchesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchesRequest proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchesRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type QueryOutgoingTxBatchesResponse struct {
	Batches []*OutgoingTxBatch `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
}

func (m *QueryOutgoingTxBatchesResponse) Reset()         { *m = QueryOutgoingTxBatchesResponse{} }
func (m *QueryOutgoingTxBatchesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingTxBatchesResponse) ProtoMessage()    {}
func (*QueryOutgoingTxBatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{19}
}
func (m *QueryOutgoingTxBatchesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchesResponse.Merge(m, src)
}
func (m *QueryOutgoingTxBatchesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchesResponse proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchesResponse) GetBatches() []*OutgoingTxBatch {
	if m != nil {
		return m.Batches
	}
	return nil
}

type QueryOutgoingTxBatchRequest struct {
	ChainName     string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	TokenContract string `protobuf:"bytes,2,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Nonce         uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryOutgoingTxBatchRequest) Reset()         { *m = QueryOutgoingTxBatchRequest{} }
func (m *QueryOutgoingTxBatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingTxBatchRequest) ProtoMessage()    {}
func (*QueryOutgoingTxBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{20}
}
func (m *QueryOutgoingTxBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchRequest.Merge(m, src)
}
func (m *QueryOutgoingTxBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchRequest proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryOutgoingTxBatchRequest) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *QueryOutgoingTxBatchRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryOutgoingTxBatchResponse struct {
	Batch *OutgoingTxBatch `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (m *QueryOutgoingTxBatchResponse) Reset()         { *m = QueryOutgoingTxBatchResponse{} }
func (m *QueryOutgoingTxBatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutgoingTxBatchResponse) ProtoMessage()    {}
func (*QueryOutgoingTxBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{21}
}
func (m *QueryOutgoingTxBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutgoingTxBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutgoingTxBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutgoingTxBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutgoingTxBatchResponse.Merge(m, src)
}
func (m *QueryOutgoingTxBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutgoingTxBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutgoingTxBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutgoingTxBatchResponse proto.InternalMessageInfo

func (m *QueryOutgoingTxBatchResponse) GetBatch() *OutgoingTxBatch {
	if m != nil {
		return m.Batch
	}
	return nil
}

type QueryBatchConfirmRequest struct {
	ChainName      string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	TokenContract  string `protobuf:"bytes,2,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	BridgerAddress string `protobuf:"bytes,3,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
	Nonce          uint64 `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryBatchConfirmRequest) Reset()         { *m = QueryBatchConfirmRequest{} }
func (m *QueryBatchConfirmRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchConfirmRequest) ProtoMessage()    {}
func (*QueryBatchConfirmRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{22}
}
func (m *QueryBatchConfirmRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchConfirmRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchConfirmRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchConfirmRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchConfirmRequest.Merge(m, src)
}
func (m *QueryBatchConfirmRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchConfirmRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchConfirmRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchConfirmRequest proto.InternalMessageInfo

func (m *QueryBatchConfirmRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryBatchConfirmRequest) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *QueryBatchConfirmRequest) GetBridgerAddress() string {
	if m != nil {
		return m.BridgerAddress
	}
	return ""
}

func (m *QueryBatchConfirmRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryBatchConfirmResponse struct {
	Confirm *MsgConfirmBatch `protobuf:"bytes,1,opt,name=confirm,proto3" json:"confirm,omitempty"`
}

func (m *QueryBatchConfirmResponse) Reset()         { *m = QueryBatchConfirmResponse{} }
func (m *QueryBatchConfirmResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchConfirmResponse) ProtoMessage()    {}
func (*QueryBatchConfirmResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{23}
}
func (m *QueryBatchConfirmResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchConfirmResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchConfirmResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchConfirmResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchConfirmResponse.Merge(m, src)
}
func (m *QueryBatchConfirmResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchConfirmResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchConfirmResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchConfirmResponse proto.InternalMessageInfo

func (m *QueryBatchConfirmResponse) GetConfirm() *MsgConfirmBatch {
	if m != nil {
		return m.Confirm
	}
	return nil
}

type QueryBatchConfirmsRequest struct {
	ChainName     string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	TokenContract string `protobuf:"bytes,2,opt,name=token_contract,json=tokenContract,proto3" json:"token_contract,omitempty"`
	Nonce         uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryBatchConfirmsRequest) Reset()         { *m = QueryBatchConfirmsRequest{} }
func (m *QueryBatchConfirmsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBatchConfirmsRequest) ProtoMessage()    {}
func (*QueryBatchConfirmsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{24}
}
func (m *QueryBatchConfirmsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchConfirmsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchConfirmsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchConfirmsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchConfirmsRequest.Merge(m, src)
}
func (m *QueryBatchConfirmsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchConfirmsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchConfirmsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchConfirmsRequest proto.InternalMessageInfo

func (m *QueryBatchConfirmsRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryBatchConfirmsRequest) GetTokenContract() string {
	if m != nil {
		return m.TokenContract
	}
	return ""
}

func (m *QueryBatchConfirmsRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryBatchConfirmsResponse struct {
	Confirms []*MsgConfirmBatch `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms,omitempty"`
}

func (m *QueryBatchConfirmsResponse) Reset()         { *m = QueryBatchConfirmsResponse{} }
func (m *QueryBatchConfirmsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBatchConfirmsResponse) ProtoMessage()    {}
func (*QueryBatchConfirmsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{25}
}
func (m *QueryBatchConfirmsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBatchConfirmsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBatchConfirmsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBatchConfirmsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBatchConfirmsResponse.Merge(m, src)
}
func (m *QueryBatchConfirmsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBatchConfirmsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBatchConfirmsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBatchConfirmsResponse proto.InternalMessageInfo

func (m *QueryBatchConfirmsResponse) GetConfirms() []*MsgConfirmBatch {
	if m != nil {
		return m.Confirms
	}
	return nil
}

type QueryLastEventNonceByAddrRequest struct {
	ChainName      string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	BridgerAddress string `protobuf:"bytes,2,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
}

func (m *QueryLastEventNonceByAddrRequest) Reset()         { *m = QueryLastEventNonceByAddrRequest{} }
func (m *QueryLastEventNonceByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastEventNonceByAddrRequest) ProtoMessage()    {}
func (*QueryLastEventNonceByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{26}
}
func (m *QueryLastEventNonceByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastEventNonceByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastEventNonceByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastEventNonceByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastEventNonceByAddrRequest.Merge(m, src)
}
func (m *QueryLastEventNonceByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastEventNonceByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastEventNonceByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastEventNonceByAddrRequest proto.InternalMessageInfo

func (m *QueryLastEventNonceByAddrRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryLastEventNonceByAddrRequest) GetBridgerAddress() string {
	if m != nil {
		return m.BridgerAddress
	}
	return ""
}

type QueryLastEventNonceByAddrResponse struct {
	EventNonce uint64 `protobuf:"varint,1,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
}

func (m *QueryLastEventNonceByAddrResponse) Reset()         { *m = QueryLastEventNonceByAddrResponse{} }
func (m *QueryLastEventNonceByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastEventNonceByAddrResponse) ProtoMessage()    {}
func (*QueryLastEventNonceByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{27}
}
func (m *QueryLastEventNonceByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastEventNonceByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastEventNonceByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastEventNonceByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastEventNonceByAddrResponse.Merge(m, src)
}
func (m *QueryLastEventNonceByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastEventNonceByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastEventNonceByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastEventNonceByAddrResponse proto.InternalMessageInfo

func (m *QueryLastEventNonceByAddrResponse) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

type QueryTokenToDenomRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *QueryTokenToDenomRequest) Reset()         { *m = QueryTokenToDenomRequest{} }
func (m *QueryTokenToDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenToDenomRequest) ProtoMessage()    {}
func (*QueryTokenToDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{28}
}
func (m *QueryTokenToDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenToDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenToDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenToDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenToDenomRequest.Merge(m, src)
}
func (m *QueryTokenToDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenToDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenToDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenToDenomRequest proto.InternalMessageInfo

func (m *QueryTokenToDenomRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryTokenToDenomRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type QueryTokenToDenomResponse struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryTokenToDenomResponse) Reset()         { *m = QueryTokenToDenomResponse{} }
func (m *QueryTokenToDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenToDenomResponse) ProtoMessage()    {}
func (*QueryTokenToDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{29}
}
func (m *QueryTokenToDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenToDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenToDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenToDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenToDenomResponse.Merge(m, src)
}
func (m *QueryTokenToDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenToDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenToDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenToDenomResponse proto.InternalMessageInfo

func (m *QueryTokenToDenomResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryDenomToTokenRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	Denom     string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryDenomToTokenRequest) Reset()         { *m = QueryDenomToTokenRequest{} }
func (m *QueryDenomToTokenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDenomToTokenRequest) ProtoMessage()    {}
func (*QueryDenomToTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{30}
}
func (m *QueryDenomToTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomToTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomToTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomToTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomToTokenRequest.Merge(m, src)
}
func (m *QueryDenomToTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomToTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomToTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomToTokenRequest proto.InternalMessageInfo

func (m *QueryDenomToTokenRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryDenomToTokenRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryDenomToTokenResponse struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *QueryDenomToTokenResponse) Reset()         { *m = QueryDenomToTokenResponse{} }
func (m *QueryDenomToTokenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDenomToTokenResponse) ProtoMessage()    {}
func (*QueryDenomToTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{31}
}
func (m *QueryDenomToTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDenomToTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDenomToTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDenomToTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDenomToTokenResponse.Merge(m, src)
}
func (m *QueryDenomToTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDenomToTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDenomToTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDenomToTokenResponse proto.InternalMessageInfo

func (m *QueryDenomToTokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type QueryOracleByAddrRequest struct {
	ChainName     string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	OracleAddress string `protobuf:"bytes,2,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
}

func (m *QueryOracleByAddrRequest) Reset()         { *m = QueryOracleByAddrRequest{} }
func (m *QueryOracleByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleByAddrRequest) ProtoMessage()    {}
func (*QueryOracleByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{32}
}
func (m *QueryOracleByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleByAddrRequest.Merge(m, src)
}
func (m *QueryOracleByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleByAddrRequest proto.InternalMessageInfo

func (m *QueryOracleByAddrRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryOracleByAddrRequest) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

type QueryOracleResponse struct {
	Oracle *Oracle `protobuf:"bytes,1,opt,name=oracle,proto3" json:"oracle,omitempty"`
}

func (m *QueryOracleResponse) Reset()         { *m = QueryOracleResponse{} }
func (m *QueryOracleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleResponse) ProtoMessage()    {}
func (*QueryOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{33}
}
func (m *QueryOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleResponse.Merge(m, src)
}
func (m *QueryOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleResponse proto.InternalMessageInfo

func (m *QueryOracleResponse) GetOracle() *Oracle {
	if m != nil {
		return m.Oracle
	}
	return nil
}

type QueryOracleByExternalAddrRequest struct {
	ChainName       string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	ExternalAddress string `protobuf:"bytes,2,opt,name=external_address,json=externalAddress,proto3" json:"external_address,omitempty"`
}

func (m *QueryOracleByExternalAddrRequest) Reset()         { *m = QueryOracleByExternalAddrRequest{} }
func (m *QueryOracleByExternalAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleByExternalAddrRequest) ProtoMessage()    {}
func (*QueryOracleByExternalAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{34}
}
func (m *QueryOracleByExternalAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleByExternalAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleByExternalAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleByExternalAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleByExternalAddrRequest.Merge(m, src)
}
func (m *QueryOracleByExternalAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleByExternalAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleByExternalAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleByExternalAddrRequest proto.InternalMessageInfo

func (m *QueryOracleByExternalAddrRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryOracleByExternalAddrRequest) GetExternalAddress() string {
	if m != nil {
		return m.ExternalAddress
	}
	return ""
}

type QueryOracleByBridgerAddrRequest struct {
	ChainName      string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	BridgerAddress string `protobuf:"bytes,2,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
}

func (m *QueryOracleByBridgerAddrRequest) Reset()         { *m = QueryOracleByBridgerAddrRequest{} }
func (m *QueryOracleByBridgerAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleByBridgerAddrRequest) ProtoMessage()    {}
func (*QueryOracleByBridgerAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{35}
}
func (m *QueryOracleByBridgerAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleByBridgerAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleByBridgerAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleByBridgerAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleByBridgerAddrRequest.Merge(m, src)
}
func (m *QueryOracleByBridgerAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleByBridgerAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleByBridgerAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleByBridgerAddrRequest proto.InternalMessageInfo

func (m *QueryOracleByBridgerAddrRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryOracleByBridgerAddrRequest) GetBridgerAddress() string {
	if m != nil {
		return m.BridgerAddress
	}
	return ""
}

type QueryPendingSendToExternalRequest struct {
	ChainName     string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	SenderAddress string `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
}

func (m *QueryPendingSendToExternalRequest) Reset()         { *m = QueryPendingSendToExternalRequest{} }
func (m *QueryPendingSendToExternalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSendToExternalRequest) ProtoMessage()    {}
func (*QueryPendingSendToExternalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{36}
}
func (m *QueryPendingSendToExternalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSendToExternalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSendToExternalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSendToExternalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSendToExternalRequest.Merge(m, src)
}
func (m *QueryPendingSendToExternalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSendToExternalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSendToExternalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSendToExternalRequest proto.InternalMessageInfo

func (m *QueryPendingSendToExternalRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryPendingSendToExternalRequest) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

type QueryPendingSendToExternalResponse struct {
	TransfersInBatches []*OutgoingTransferTx `protobuf:"bytes,1,rep,name=transfers_in_batches,json=transfersInBatches,proto3" json:"transfers_in_batches,omitempty"`
	UnbatchedTransfers []*OutgoingTransferTx `protobuf:"bytes,2,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers,omitempty"`
}

func (m *QueryPendingSendToExternalResponse) Reset()         { *m = QueryPendingSendToExternalResponse{} }
func (m *QueryPendingSendToExternalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSendToExternalResponse) ProtoMessage()    {}
func (*QueryPendingSendToExternalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{37}
}
func (m *QueryPendingSendToExternalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSendToExternalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSendToExternalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSendToExternalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSendToExternalResponse.Merge(m, src)
}
func (m *QueryPendingSendToExternalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSendToExternalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSendToExternalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSendToExternalResponse proto.InternalMessageInfo

func (m *QueryPendingSendToExternalResponse) GetTransfersInBatches() []*OutgoingTransferTx {
	if m != nil {
		return m.TransfersInBatches
	}
	return nil
}

func (m *QueryPendingSendToExternalResponse) GetUnbatchedTransfers() []*OutgoingTransferTx {
	if m != nil {
		return m.UnbatchedTransfers
	}
	return nil
}

type QueryLastObservedBlockHeightRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *QueryLastObservedBlockHeightRequest) Reset()         { *m = QueryLastObservedBlockHeightRequest{} }
func (m *QueryLastObservedBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastObservedBlockHeightRequest) ProtoMessage()    {}
func (*QueryLastObservedBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{38}
}
func (m *QueryLastObservedBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastObservedBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastObservedBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastObservedBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastObservedBlockHeightRequest.Merge(m, src)
}
func (m *QueryLastObservedBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastObservedBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastObservedBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastObservedBlockHeightRequest proto.InternalMessageInfo

func (m *QueryLastObservedBlockHeightRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type QueryLastObservedBlockHeightResponse struct {
	ExternalBlockHeight uint64 `protobuf:"varint,1,opt,name=external_block_height,json=externalBlockHeight,proto3" json:"external_block_height,omitempty"`
	BlockHeight         uint64 `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryLastObservedBlockHeightResponse) Reset()         { *m = QueryLastObservedBlockHeightResponse{} }
func (m *QueryLastObservedBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastObservedBlockHeightResponse) ProtoMessage()    {}
func (*QueryLastObservedBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{39}
}
func (m *QueryLastObservedBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastObservedBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastObservedBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastObservedBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastObservedBlockHeightResponse.Merge(m, src)
}
func (m *QueryLastObservedBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastObservedBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastObservedBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastObservedBlockHeightResponse proto.InternalMessageInfo

func (m *QueryLastObservedBlockHeightResponse) GetExternalBlockHeight() uint64 {
	if m != nil {
		return m.ExternalBlockHeight
	}
	return 0
}

func (m *QueryLastObservedBlockHeightResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryLastEventBlockHeightByAddrRequest struct {
	ChainName      string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	BridgerAddress string `protobuf:"bytes,2,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
}

func (m *QueryLastEventBlockHeightByAddrRequest) Reset() {
	*m = QueryLastEventBlockHeightByAddrRequest{}
}
func (m *QueryLastEventBlockHeightByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastEventBlockHeightByAddrRequest) ProtoMessage()    {}
func (*QueryLastEventBlockHeightByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{40}
}
func (m *QueryLastEventBlockHeightByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastEventBlockHeightByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastEventBlockHeightByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastEventBlockHeightByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastEventBlockHeightByAddrRequest.Merge(m, src)
}
func (m *QueryLastEventBlockHeightByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastEventBlockHeightByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastEventBlockHeightByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastEventBlockHeightByAddrRequest proto.InternalMessageInfo

func (m *QueryLastEventBlockHeightByAddrRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryLastEventBlockHeightByAddrRequest) GetBridgerAddress() string {
	if m != nil {
		return m.BridgerAddress
	}
	return ""
}

type QueryLastEventBlockHeightByAddrResponse struct {
	BlockHeight uint64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *QueryLastEventBlockHeightByAddrResponse) Reset() {
	*m = QueryLastEventBlockHeightByAddrResponse{}
}
func (m *QueryLastEventBlockHeightByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastEventBlockHeightByAddrResponse) ProtoMessage()    {}
func (*QueryLastEventBlockHeightByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{41}
}
func (m *QueryLastEventBlockHeightByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastEventBlockHeightByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastEventBlockHeightByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastEventBlockHeightByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastEventBlockHeightByAddrResponse.Merge(m, src)
}
func (m *QueryLastEventBlockHeightByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastEventBlockHeightByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastEventBlockHeightByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastEventBlockHeightByAddrResponse proto.InternalMessageInfo

func (m *QueryLastEventBlockHeightByAddrResponse) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type QueryOraclesRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *QueryOraclesRequest) Reset()         { *m = QueryOraclesRequest{} }
func (m *QueryOraclesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOraclesRequest) ProtoMessage()    {}
func (*QueryOraclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{42}
}
func (m *QueryOraclesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOraclesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOraclesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOraclesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOraclesRequest.Merge(m, src)
}
func (m *QueryOraclesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOraclesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOraclesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOraclesRequest proto.InternalMessageInfo

func (m *QueryOraclesRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type QueryOraclesResponse struct {
	// oracles contains all the queried oracles.
	Oracles []Oracle `protobuf:"bytes,1,rep,name=oracles,proto3" json:"oracles"`
}

func (m *QueryOraclesResponse) Reset()         { *m = QueryOraclesResponse{} }
func (m *QueryOraclesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOraclesResponse) ProtoMessage()    {}
func (*QueryOraclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{43}
}
func (m *QueryOraclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOraclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOraclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOraclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOraclesResponse.Merge(m, src)
}
func (m *QueryOraclesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOraclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOraclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOraclesResponse proto.InternalMessageInfo

func (m *QueryOraclesResponse) GetOracles() []Oracle {
	if m != nil {
		return m.Oracles
	}
	return nil
}

type QueryProjectedBatchTimeoutHeightRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *QueryProjectedBatchTimeoutHeightRequest) Reset() {
	*m = QueryProjectedBatchTimeoutHeightRequest{}
}
func (m *QueryProjectedBatchTimeoutHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProjectedBatchTimeoutHeightRequest) ProtoMessage()    {}
func (*QueryProjectedBatchTimeoutHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{44}
}
func (m *QueryProjectedBatchTimeoutHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectedBatchTimeoutHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectedBatchTimeoutHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectedBatchTimeoutHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectedBatchTimeoutHeightRequest.Merge(m, src)
}
func (m *QueryProjectedBatchTimeoutHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectedBatchTimeoutHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectedBatchTimeoutHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectedBatchTimeoutHeightRequest proto.InternalMessageInfo

func (m *QueryProjectedBatchTimeoutHeightRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type QueryProjectedBatchTimeoutHeightResponse struct {
	TimeoutHeight uint64 `protobuf:"varint,1,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty"`
}

func (m *QueryProjectedBatchTimeoutHeightResponse) Reset() {
	*m = QueryProjectedBatchTimeoutHeightResponse{}
}
func (m *QueryProjectedBatchTimeoutHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProjectedBatchTimeoutHeightResponse) ProtoMessage()    {}
func (*QueryProjectedBatchTimeoutHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{45}
}
func (m *QueryProjectedBatchTimeoutHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProjectedBatchTimeoutHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProjectedBatchTimeoutHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProjectedBatchTimeoutHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProjectedBatchTimeoutHeightResponse.Merge(m, src)
}
func (m *QueryProjectedBatchTimeoutHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProjectedBatchTimeoutHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProjectedBatchTimeoutHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProjectedBatchTimeoutHeightResponse proto.InternalMessageInfo

func (m *QueryProjectedBatchTimeoutHeightResponse) GetTimeoutHeight() uint64 {
	if m != nil {
		return m.TimeoutHeight
	}
	return 0
}

type QueryBridgeTokensRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *QueryBridgeTokensRequest) Reset()         { *m = QueryBridgeTokensRequest{} }
func (m *QueryBridgeTokensRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeTokensRequest) ProtoMessage()    {}
func (*QueryBridgeTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{46}
}
func (m *QueryBridgeTokensRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeTokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeTokensRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeTokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeTokensRequest.Merge(m, src)
}
func (m *QueryBridgeTokensRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeTokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeTokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeTokensRequest proto.InternalMessageInfo

func (m *QueryBridgeTokensRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

type QueryBridgeTokensResponse struct {
	BridgeTokens []*BridgeToken `protobuf:"bytes,1,rep,name=bridge_tokens,json=bridgeTokens,proto3" json:"bridge_tokens,omitempty"`
}

func (m *QueryBridgeTokensResponse) Reset()         { *m = QueryBridgeTokensResponse{} }
func (m *QueryBridgeTokensResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeTokensResponse) ProtoMessage()    {}
func (*QueryBridgeTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{47}
}
func (m *QueryBridgeTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeTokensResponse.Merge(m, src)
}
func (m *QueryBridgeTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeTokensResponse proto.InternalMessageInfo

func (m *QueryBridgeTokensResponse) GetBridgeTokens() []*BridgeToken {
	if m != nil {
		return m.BridgeTokens
	}
	return nil
}

type QueryBridgeCoinByDenomRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	Denom     string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryBridgeCoinByDenomRequest) Reset()         { *m = QueryBridgeCoinByDenomRequest{} }
func (m *QueryBridgeCoinByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeCoinByDenomRequest) ProtoMessage()    {}
func (*QueryBridgeCoinByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{48}
}
func (m *QueryBridgeCoinByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeCoinByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeCoinByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeCoinByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeCoinByDenomRequest.Merge(m, src)
}
func (m *QueryBridgeCoinByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeCoinByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeCoinByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeCoinByDenomRequest proto.InternalMessageInfo

func (m *QueryBridgeCoinByDenomRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryBridgeCoinByDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryBridgeCoinByDenomResponse struct {
	Coin types.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin"`
}

func (m *QueryBridgeCoinByDenomResponse) Reset()         { *m = QueryBridgeCoinByDenomResponse{} }
func (m *QueryBridgeCoinByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeCoinByDenomResponse) ProtoMessage()    {}
func (*QueryBridgeCoinByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{49}
}
func (m *QueryBridgeCoinByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeCoinByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeCoinByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeCoinByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeCoinByDenomResponse.Merge(m, src)
}
func (m *QueryBridgeCoinByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeCoinByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeCoinByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeCoinByDenomResponse proto.InternalMessageInfo

func (m *QueryBridgeCoinByDenomResponse) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

type QueryBridgeChainListRequest struct {
}

func (m *QueryBridgeChainListRequest) Reset()         { *m = QueryBridgeChainListRequest{} }
func (m *QueryBridgeChainListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeChainListRequest) ProtoMessage()    {}
func (*QueryBridgeChainListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{50}
}
func (m *QueryBridgeChainListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeChainListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeChainListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeChainListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeChainListRequest.Merge(m, src)
}
func (m *QueryBridgeChainListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeChainListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeChainListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeChainListRequest proto.InternalMessageInfo

type QueryBridgeChainListResponse struct {
	ChainNames []string `protobuf:"bytes,1,rep,name=chain_names,json=chainNames,proto3" json:"chain_names,omitempty"`
}

func (m *QueryBridgeChainListResponse) Reset()         { *m = QueryBridgeChainListResponse{} }
func (m *QueryBridgeChainListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeChainListResponse) ProtoMessage()    {}
func (*QueryBridgeChainListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{51}
}
func (m *QueryBridgeChainListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeChainListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeChainListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeChainListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeChainListResponse.Merge(m, src)
}
func (m *QueryBridgeChainListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeChainListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeChainListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeChainListResponse proto.InternalMessageInfo

func (m *QueryBridgeChainListResponse) GetChainNames() []string {
	if m != nil {
		return m.ChainNames
	}
	return nil
}

type QueryBridgeCallsRequest struct {
	ChainName  string             `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBridgeCallsRequest) Reset()         { *m = QueryBridgeCallsRequest{} }
func (m *QueryBridgeCallsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeCallsRequest) ProtoMessage()    {}
func (*QueryBridgeCallsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{52}
}
func (m *QueryBridgeCallsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeCallsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeCallsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeCallsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeCallsRequest.Merge(m, src)
}
func (m *QueryBridgeCallsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeCallsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeCallsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeCallsRequest proto.InternalMessageInfo

func (m *QueryBridgeCallsRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryBridgeCallsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBridgeCallsResponse struct {
	BridgeCalls []*OutgoingBridgeCall `protobuf:"bytes,1,rep,name=bridge_calls,json=bridgeCalls,proto3" json:"bridge_calls,omitempty"`
	Pagination  *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBridgeCallsResponse) Reset()         { *m = QueryBridgeCallsResponse{} }
func (m *QueryBridgeCallsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeCallsResponse) ProtoMessage()    {}
func (*QueryBridgeCallsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{53}
}
func (m *QueryBridgeCallsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeCallsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeCallsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeCallsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeCallsResponse.Merge(m, src)
}
func (m *QueryBridgeCallsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeCallsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeCallsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeCallsResponse proto.InternalMessageInfo

func (m *QueryBridgeCallsResponse) GetBridgeCalls() []*OutgoingBridgeCall {
	if m != nil {
		return m.BridgeCalls
	}
	return nil
}

func (m *QueryBridgeCallsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBridgeCallByNonceRequest struct {
	ChainName string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	Nonce     uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryBridgeCallByNonceRequest) Reset()         { *m = QueryBridgeCallByNonceRequest{} }
func (m *QueryBridgeCallByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeCallByNonceRequest) ProtoMessage()    {}
func (*QueryBridgeCallByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{54}
}
func (m *QueryBridgeCallByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeCallByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeCallByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeCallByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeCallByNonceRequest.Merge(m, src)
}
func (m *QueryBridgeCallByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeCallByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeCallByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeCallByNonceRequest proto.InternalMessageInfo

func (m *QueryBridgeCallByNonceRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryBridgeCallByNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type QueryBridgeCallByNonceResponse struct {
	BridgeCall *OutgoingBridgeCall `protobuf:"bytes,1,opt,name=bridge_call,json=bridgeCall,proto3" json:"bridge_call,omitempty"`
}

func (m *QueryBridgeCallByNonceResponse) Reset()         { *m = QueryBridgeCallByNonceResponse{} }
func (m *QueryBridgeCallByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeCallByNonceResponse) ProtoMessage()    {}
func (*QueryBridgeCallByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{55}
}
func (m *QueryBridgeCallByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeCallByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeCallByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeCallByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeCallByNonceResponse.Merge(m, src)
}
func (m *QueryBridgeCallByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeCallByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeCallByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeCallByNonceResponse proto.InternalMessageInfo

func (m *QueryBridgeCallByNonceResponse) GetBridgeCall() *OutgoingBridgeCall {
	if m != nil {
		return m.BridgeCall
	}
	return nil
}

type QueryBridgeCallBySenderRequest struct {
	ChainName     string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	SenderAddress string `protobuf:"bytes,2,opt,name=sender_address,json=senderAddress,proto3" json:"sender_address,omitempty"`
}

func (m *QueryBridgeCallBySenderRequest) Reset()         { *m = QueryBridgeCallBySenderRequest{} }
func (m *QueryBridgeCallBySenderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeCallBySenderRequest) ProtoMessage()    {}
func (*QueryBridgeCallBySenderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{56}
}
func (m *QueryBridgeCallBySenderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeCallBySenderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeCallBySenderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeCallBySenderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeCallBySenderRequest.Merge(m, src)
}
func (m *QueryBridgeCallBySenderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeCallBySenderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeCallBySenderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeCallBySenderRequest proto.InternalMessageInfo

func (m *QueryBridgeCallBySenderRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryBridgeCallBySenderRequest) GetSenderAddress() string {
	if m != nil {
		return m.SenderAddress
	}
	return ""
}

type QueryBridgeCallBySenderResponse struct {
	BridgeCalls []*OutgoingBridgeCall `protobuf:"bytes,1,rep,name=bridge_calls,json=bridgeCalls,proto3" json:"bridge_calls,omitempty"`
}

func (m *QueryBridgeCallBySenderResponse) Reset()         { *m = QueryBridgeCallBySenderResponse{} }
func (m *QueryBridgeCallBySenderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeCallBySenderResponse) ProtoMessage()    {}
func (*QueryBridgeCallBySenderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{57}
}
func (m *QueryBridgeCallBySenderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeCallBySenderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeCallBySenderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeCallBySenderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeCallBySenderResponse.Merge(m, src)
}
func (m *QueryBridgeCallBySenderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeCallBySenderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeCallBySenderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeCallBySenderResponse proto.InternalMessageInfo

func (m *QueryBridgeCallBySenderResponse) GetBridgeCalls() []*OutgoingBridgeCall {
	if m != nil {
		return m.BridgeCalls
	}
	return nil
}

type QueryBridgeCallConfirmByNonceRequest struct {
	ChainName  string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	EventNonce uint64 `protobuf:"varint,2,opt,name=event_nonce,json=eventNonce,proto3" json:"event_nonce,omitempty"`
}

func (m *QueryBridgeCallConfirmByNonceRequest) Reset()         { *m = QueryBridgeCallConfirmByNonceRequest{} }
func (m *QueryBridgeCallConfirmByNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeCallConfirmByNonceRequest) ProtoMessage()    {}
func (*QueryBridgeCallConfirmByNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{58}
}
func (m *QueryBridgeCallConfirmByNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeCallConfirmByNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeCallConfirmByNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeCallConfirmByNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeCallConfirmByNonceRequest.Merge(m, src)
}
func (m *QueryBridgeCallConfirmByNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeCallConfirmByNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeCallConfirmByNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeCallConfirmByNonceRequest proto.InternalMessageInfo

func (m *QueryBridgeCallConfirmByNonceRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryBridgeCallConfirmByNonceRequest) GetEventNonce() uint64 {
	if m != nil {
		return m.EventNonce
	}
	return 0
}

type QueryBridgeCallConfirmByNonceResponse struct {
	Confirms    []*MsgBridgeCallConfirm `protobuf:"bytes,1,rep,name=confirms,proto3" json:"confirms,omitempty"`
	EnoughPower bool                    `protobuf:"varint,2,opt,name=enough_power,json=enoughPower,proto3" json:"enough_power,omitempty"`
}

func (m *QueryBridgeCallConfirmByNonceResponse) Reset()         { *m = QueryBridgeCallConfirmByNonceResponse{} }
func (m *QueryBridgeCallConfirmByNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeCallConfirmByNonceResponse) ProtoMessage()    {}
func (*QueryBridgeCallConfirmByNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{59}
}
func (m *QueryBridgeCallConfirmByNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeCallConfirmByNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeCallConfirmByNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeCallConfirmByNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeCallConfirmByNonceResponse.Merge(m, src)
}
func (m *QueryBridgeCallConfirmByNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeCallConfirmByNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeCallConfirmByNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeCallConfirmByNonceResponse proto.InternalMessageInfo

func (m *QueryBridgeCallConfirmByNonceResponse) GetConfirms() []*MsgBridgeCallConfirm {
	if m != nil {
		return m.Confirms
	}
	return nil
}

func (m *QueryBridgeCallConfirmByNonceResponse) GetEnoughPower() bool {
	if m != nil {
		return m.EnoughPower
	}
	return false
}

type QueryLastPendingBridgeCallByAddrRequest struct {
	ChainName      string `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	BridgerAddress string `protobuf:"bytes,2,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
}

func (m *QueryLastPendingBridgeCallByAddrRequest) Reset() {
	*m = QueryLastPendingBridgeCallByAddrRequest{}
}
func (m *QueryLastPendingBridgeCallByAddrRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastPendingBridgeCallByAddrRequest) ProtoMessage()    {}
func (*QueryLastPendingBridgeCallByAddrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{60}
}
func (m *QueryLastPendingBridgeCallByAddrRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingBridgeCallByAddrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingBridgeCallByAddrRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingBridgeCallByAddrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingBridgeCallByAddrRequest.Merge(m, src)
}
func (m *QueryLastPendingBridgeCallByAddrRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingBridgeCallByAddrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingBridgeCallByAddrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingBridgeCallByAddrRequest proto.InternalMessageInfo

func (m *QueryLastPendingBridgeCallByAddrRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryLastPendingBridgeCallByAddrRequest) GetBridgerAddress() string {
	if m != nil {
		return m.BridgerAddress
	}
	return ""
}

type QueryLastPendingBridgeCallByAddrResponse struct {
	BridgeCalls []*OutgoingBridgeCall `protobuf:"bytes,1,rep,name=bridge_calls,json=bridgeCalls,proto3" json:"bridge_calls,omitempty"`
}

func (m *QueryLastPendingBridgeCallByAddrResponse) Reset() {
	*m = QueryLastPendingBridgeCallByAddrResponse{}
}
func (m *QueryLastPendingBridgeCallByAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastPendingBridgeCallByAddrResponse) ProtoMessage()    {}
func (*QueryLastPendingBridgeCallByAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{61}
}
func (m *QueryLastPendingBridgeCallByAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPendingBridgeCallByAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPendingBridgeCallByAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPendingBridgeCallByAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPendingBridgeCallByAddrResponse.Merge(m, src)
}
func (m *QueryLastPendingBridgeCallByAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPendingBridgeCallByAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPendingBridgeCallByAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPendingBridgeCallByAddrResponse proto.InternalMessageInfo

func (m *QueryLastPendingBridgeCallByAddrResponse) GetBridgeCalls() []*OutgoingBridgeCall {
	if m != nil {
		return m.BridgeCalls
	}
	return nil
}

type QueryPendingExecuteClaimRequest struct {
	ChainName  string             `protobuf:"bytes,1,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingExecuteClaimRequest) Reset()         { *m = QueryPendingExecuteClaimRequest{} }
func (m *QueryPendingExecuteClaimRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingExecuteClaimRequest) ProtoMessage()    {}
func (*QueryPendingExecuteClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{62}
}
func (m *QueryPendingExecuteClaimRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingExecuteClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingExecuteClaimRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingExecuteClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingExecuteClaimRequest.Merge(m, src)
}
func (m *QueryPendingExecuteClaimRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingExecuteClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingExecuteClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingExecuteClaimRequest proto.InternalMessageInfo

func (m *QueryPendingExecuteClaimRequest) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *QueryPendingExecuteClaimRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPendingExecuteClaimResponse struct {
	Claims     []*types1.Any       `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingExecuteClaimResponse) Reset()         { *m = QueryPendingExecuteClaimResponse{} }
func (m *QueryPendingExecuteClaimResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingExecuteClaimResponse) ProtoMessage()    {}
func (*QueryPendingExecuteClaimResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_210db95ef9589dec, []int{63}
}
func (m *QueryPendingExecuteClaimResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingExecuteClaimResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingExecuteClaimResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingExecuteClaimResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingExecuteClaimResponse.Merge(m, src)
}
func (m *QueryPendingExecuteClaimResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingExecuteClaimResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingExecuteClaimResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingExecuteClaimResponse proto.InternalMessageInfo

func (m *QueryPendingExecuteClaimResponse) GetClaims() []*types1.Any {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *QueryPendingExecuteClaimResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "fx.gravity.crosschain.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "fx.gravity.crosschain.v1.QueryParamsResponse")
	proto.RegisterType((*QueryCurrentOracleSetRequest)(nil), "fx.gravity.crosschain.v1.QueryCurrentOracleSetRequest")
	proto.RegisterType((*QueryCurrentOracleSetResponse)(nil), "fx.gravity.crosschain.v1.QueryCurrentOracleSetResponse")
	proto.RegisterType((*QueryOracleSetRequestRequest)(nil), "fx.gravity.crosschain.v1.QueryOracleSetRequestRequest")
	proto.RegisterType((*QueryOracleSetRequestResponse)(nil), "fx.gravity.crosschain.v1.QueryOracleSetRequestResponse")
	proto.RegisterType((*QueryOracleSetConfirmRequest)(nil), "fx.gravity.crosschain.v1.QueryOracleSetConfirmRequest")
	proto.RegisterType((*QueryOracleSetConfirmResponse)(nil), "fx.gravity.crosschain.v1.QueryOracleSetConfirmResponse")
	proto.RegisterType((*QueryOracleSetConfirmsByNonceRequest)(nil), "fx.gravity.crosschain.v1.QueryOracleSetConfirmsByNonceRequest")
	proto.RegisterType((*QueryOracleSetConfirmsByNonceResponse)(nil), "fx.gravity.crosschain.v1.QueryOracleSetConfirmsByNonceResponse")
	proto.RegisterType((*QueryLastOracleSetRequestsRequest)(nil), "fx.gravity.crosschain.v1.QueryLastOracleSetRequestsRequest")
	proto.RegisterType((*QueryLastOracleSetRequestsResponse)(nil), "fx.gravity.crosschain.v1.QueryLastOracleSetRequestsResponse")
	proto.RegisterType((*QueryLastPendingOracleSetRequestByAddrRequest)(nil), "fx.gravity.crosschain.v1.QueryLastPendingOracleSetRequestByAddrRequest")
	proto.RegisterType((*QueryLastPendingOracleSetRequestByAddrResponse)(nil), "fx.gravity.crosschain.v1.QueryLastPendingOracleSetRequestByAddrResponse")
	proto.RegisterType((*QueryBatchFeeRequest)(nil), "fx.gravity.crosschain.v1.QueryBatchFeeRequest")
	proto.RegisterType((*QueryBatchFeeResponse)(nil), "fx.gravity.crosschain.v1.QueryBatchFeeResponse")
	proto.RegisterType((*QueryLastPendingBatchRequestByAddrRequest)(nil), "fx.gravity.crosschain.v1.QueryLastPendingBatchRequestByAddrRequest")
	proto.RegisterType((*QueryLastPendingBatchRequestByAddrResponse)(nil), "fx.gravity.crosschain.v1.QueryLastPendingBatchRequestByAddrResponse")
	proto.RegisterType((*QueryOutgoingTxBatchesRequest)(nil), "fx.gravity.crosschain.v1.QueryOutgoingTxBatchesRequest")
	proto.RegisterType((*QueryOutgoingTxBatchesResponse)(nil), "fx.gravity.crosschain.v1.QueryOutgoingTxBatchesResponse")
	proto.RegisterType((*QueryOutgoingTxBatchRequest)(nil), "fx.gravity.crosschain.v1.QueryOutgoingTxBatchRequest")
	proto.RegisterType((*QueryOutgoingTxBatchResponse)(nil), "fx.gravity.crosschain.v1.QueryOutgoingTxBatchResponse")
	proto.RegisterType((*QueryBatchConfirmRequest)(nil), "fx.gravity.crosschain.v1.QueryBatchConfirmRequest")
	proto.RegisterType((*QueryBatchConfirmResponse)(nil), "fx.gravity.crosschain.v1.QueryBatchConfirmResponse")
	proto.RegisterType((*QueryBatchConfirmsRequest)(nil), "fx.gravity.crosschain.v1.QueryBatchConfirmsRequest")
	proto.RegisterType((*QueryBatchConfirmsResponse)(nil), "fx.gravity.crosschain.v1.QueryBatchConfirmsResponse")
	proto.RegisterType((*QueryLastEventNonceByAddrRequest)(nil), "fx.gravity.crosschain.v1.QueryLastEventNonceByAddrRequest")
	proto.RegisterType((*QueryLastEventNonceByAddrResponse)(nil), "fx.gravity.crosschain.v1.QueryLastEventNonceByAddrResponse")
	proto.RegisterType((*QueryTokenToDenomRequest)(nil), "fx.gravity.crosschain.v1.QueryTokenToDenomRequest")
	proto.RegisterType((*QueryTokenToDenomResponse)(nil), "fx.gravity.crosschain.v1.QueryTokenToDenomResponse")
	proto.RegisterType((*QueryDenomToTokenRequest)(nil), "fx.gravity.crosschain.v1.QueryDenomToTokenRequest")
	proto.RegisterType((*QueryDenomToTokenResponse)(nil), "fx.gravity.crosschain.v1.QueryDenomToTokenResponse")
	proto.RegisterType((*QueryOracleByAddrRequest)(nil), "fx.gravity.crosschain.v1.QueryOracleByAddrRequest")
	proto.RegisterType((*QueryOracleResponse)(nil), "fx.gravity.crosschain.v1.QueryOracleResponse")
	proto.RegisterType((*QueryOracleByExternalAddrRequest)(nil), "fx.gravity.crosschain.v1.QueryOracleByExternalAddrRequest")
	proto.RegisterType((*QueryOracleByBridgerAddrRequest)(nil), "fx.gravity.crosschain.v1.QueryOracleByBridgerAddrRequest")
	proto.RegisterType((*QueryPendingSendToExternalRequest)(nil), "fx.gravity.crosschain.v1.QueryPendingSendToExternalRequest")
	proto.RegisterType((*QueryPendingSendToExternalResponse)(nil), "fx.gravity.crosschain.v1.QueryPendingSendToExternalResponse")
	proto.RegisterType((*QueryLastObservedBlockHeightRequest)(nil), "fx.gravity.crosschain.v1.QueryLastObservedBlockHeightRequest")
	proto.RegisterType((*QueryLastObservedBlockHeightResponse)(nil), "fx.gravity.crosschain.v1.QueryLastObservedBlockHeightResponse")
	proto.RegisterType((*QueryLastEventBlockHeightByAddrRequest)(nil), "fx.gravity.crosschain.v1.QueryLastEventBlockHeightByAddrRequest")
	proto.RegisterType((*QueryLastEventBlockHeightByAddrResponse)(nil), "fx.gravity.crosschain.v1.QueryLastEventBlockHeightByAddrResponse")
	proto.RegisterType((*QueryOraclesRequest)(nil), "fx.gravity.crosschain.v1.QueryOraclesRequest")
	proto.RegisterType((*QueryOraclesResponse)(nil), "fx.gravity.crosschain.v1.QueryOraclesResponse")
	proto.RegisterType((*QueryProjectedBatchTimeoutHeightRequest)(nil), "fx.gravity.crosschain.v1.QueryProjectedBatchTimeoutHeightRequest")
	proto.RegisterType((*QueryProjectedBatchTimeoutHeightResponse)(nil), "fx.gravity.crosschain.v1.QueryProjectedBatchTimeoutHeightResponse")
	proto.RegisterType((*QueryBridgeTokensRequest)(nil), "fx.gravity.crosschain.v1.QueryBridgeTokensRequest")
	proto.RegisterType((*QueryBridgeTokensResponse)(nil), "fx.gravity.crosschain.v1.QueryBridgeTokensResponse")
	proto.RegisterType((*QueryBridgeCoinByDenomRequest)(nil), "fx.gravity.crosschain.v1.QueryBridgeCoinByDenomRequest")
	proto.RegisterType((*QueryBridgeCoinByDenomResponse)(nil), "fx.gravity.crosschain.v1.QueryBridgeCoinByDenomResponse")
	proto.RegisterType((*QueryBridgeChainListRequest)(nil), "fx.gravity.crosschain.v1.QueryBridgeChainListRequest")
	proto.RegisterType((*QueryBridgeChainListResponse)(nil), "fx.gravity.crosschain.v1.QueryBridgeChainListResponse")
	proto.RegisterType((*QueryBridgeCallsRequest)(nil), "fx.gravity.crosschain.v1.QueryBridgeCallsRequest")
	proto.RegisterType((*QueryBridgeCallsResponse)(nil), "fx.gravity.crosschain.v1.QueryBridgeCallsResponse")
	proto.RegisterType((*QueryBridgeCallByNonceRequest)(nil), "fx.gravity.crosschain.v1.QueryBridgeCallByNonceRequest")
	proto.RegisterType((*QueryBridgeCallByNonceResponse)(nil), "fx.gravity.crosschain.v1.QueryBridgeCallByNonceResponse")
	proto.RegisterType((*QueryBridgeCallBySenderRequest)(nil), "fx.gravity.crosschain.v1.QueryBridgeCallBySenderRequest")
	proto.RegisterType((*QueryBridgeCallBySenderResponse)(nil), "fx.gravity.crosschain.v1.QueryBridgeCallBySenderResponse")
	proto.RegisterType((*QueryBridgeCallConfirmByNonceRequest)(nil), "fx.gravity.crosschain.v1.QueryBridgeCallConfirmByNonceRequest")
	proto.RegisterType((*QueryBridgeCallConfirmByNonceResponse)(nil), "fx.gravity.crosschain.v1.QueryBridgeCallConfirmByNonceResponse")
	proto.RegisterType((*QueryLastPendingBridgeCallByAddrRequest)(nil), "fx.gravity.crosschain.v1.QueryLastPendingBridgeCallByAddrRequest")
	proto.RegisterType((*QueryLastPendingBridgeCallByAddrResponse)(nil), "fx.gravity.crosschain.v1.QueryLastPendingBridgeCallByAddrResponse")
	proto.RegisterType((*QueryPendingExecuteClaimRequest)(nil), "fx.gravity.crosschain.v1.QueryPendingExecuteClaimRequest")
	proto.RegisterType((*QueryPendingExecuteClaimResponse)(nil), "fx.gravity.crosschain.v1.QueryPendingExecuteClaimResponse")
}

func init() {
	proto.RegisterFile("fx/gravity/crosschain/v1/query.proto", fileDescriptor_210db95ef9589dec)
}

var fileDescriptor_210db95ef9589dec = []byte{
	// 2506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5b, 0xdd, 0x6f, 0x14, 0xd7,
	0x15, 0xe7, 0xf2, 0x19, 0x1f, 0x63, 0x08, 0x17, 0x53, 0xec, 0x05, 0x8c, 0x3d, 0x60, 0x6c, 0x03,
	0xde, 0x8d, 0x0d, 0xa5, 0x81, 0x34, 0x10, 0xd6, 0x10, 0xa0, 0x22, 0x01, 0x16, 0x47, 0xaa, 0x1a,
	0xb5, 0x9b, 0xd9, 0xf1, 0xdd, 0xf5, 0x90, 0xdd, 0x19, 0x33, 0x33, 0x6b, 0xd6, 0x6a, 0x2b, 0x55,
	0x7d, 0x69, 0xa4, 0xbe, 0x54, 0xaa, 0x54, 0xf5, 0xa1, 0x6a, 0xfb, 0xd0, 0xc7, 0xf6, 0xa1, 0x12,
	0x6a, 0xa5, 0x4a, 0x79, 0xe8, 0x5b, 0x9a, 0x27, 0xa4, 0xa8, 0x1f, 0x4f, 0x55, 0x0a, 0xfd, 0x43,
	0xa2, 0xb9, 0xf7, 0xcc, 0xf7, 0xd7, 0x1d, 0x7f, 0xe4, 0xcd, 0x7b, 0xe7, 0x9e, 0x73, 0x7e, 0xbf,
	0xfb, 0x71, 0xce, 0xb9, 0xe7, 0x00, 0x9c, 0x6d, 0x0f, 0x6a, 0x1d, 0x4b, 0x5d, 0xd7, 0x9d, 0x8d,
	0x9a, 0x66, 0x99, 0xb6, 0xad, 0xad, 0xaa, 0xba, 0x51, 0x5b, 0x5f, 0xa8, 0x3d, 0xed, 0x33, 0x6b,
	0xa3, 0xba, 0x66, 0x99, 0x8e, 0x49, 0xc7, 0xda, 0x83, 0x2a, 0xce, 0xaa, 0x06, 0xb3, 0xaa, 0xeb,
	0x0b, 0x95, 0xf3, 0x9a, 0x69, 0xf7, 0x4c, 0xbb, 0xd6, 0x52, 0x6d, 0x26, 0x44, 0x6a, 0xeb, 0x0b,
	0x2d, 0xe6, 0xa8, 0x0b, 0xb5, 0x35, 0xb5, 0xa3, 0x1b, 0xaa, 0xa3, 0x9b, 0x86, 0xd0, 0x52, 0x99,
	0x08, 0xcf, 0xf5, 0x66, 0x69, 0xa6, 0xee, 0x7d, 0x1f, 0x17, 0xdf, 0x9b, 0xfc, 0x57, 0x4d, 0xfc,
	0xc0, 0x4f, 0x53, 0x99, 0x30, 0x9d, 0x01, 0x4e, 0xc9, 0x66, 0xe2, 0x6c, 0xac, 0x31, 0x4f, 0xd1,
	0x68, 0xc7, 0xec, 0x98, 0xc2, 0x80, 0xfb, 0x17, 0x8e, 0x9e, 0xec, 0x98, 0x66, 0xa7, 0xcb, 0x6a,
	0xea, 0x9a, 0x5e, 0x53, 0x0d, 0xc3, 0x74, 0x38, 0x6c, 0x4f, 0x66, 0x1c, 0xbf, 0xf2, 0x5f, 0xad,
	0x7e, 0xbb, 0xa6, 0x1a, 0xb8, 0x30, 0xca, 0x25, 0xa0, 0x8f, 0x5c, 0xd2, 0x0f, 0x55, 0x4b, 0xed,
	0xd9, 0x0d, 0xf6, 0xb4, 0xcf, 0x6c, 0x87, 0x9e, 0x02, 0xe0, 0xc6, 0x9b, 0x86, 0xda, 0x63, 0x63,
	0x64, 0x92, 0xcc, 0x0e, 0x35, 0x86, 0xf8, 0xc8, 0xfb, 0x6a, 0x8f, 0x29, 0x1f, 0xc0, 0xd1, 0x88,
	0x90, 0xbd, 0x66, 0x1a, 0x36, 0xa3, 0xd7, 0x61, 0xff, 0x1a, 0x1f, 0xe1, 0x12, 0xc3, 0x8b, 0x93,
	0xd5, 0xac, 0x55, 0xaf, 0x0a, 0xc9, 0xfa, 0xde, 0xcf, 0xfe, 0x7b, 0x7a, 0x57, 0x03, 0xa5, 0x94,
	0xb7, 0xe1, 0x24, 0x57, 0xbb, 0xd4, 0xb7, 0x2c, 0x66, 0x38, 0x0f, 0x2c, 0x55, 0xeb, 0xb2, 0xc7,
	0xcc, 0x91, 0x44, 0xa5, 0xc1, 0xa9, 0x0c, 0x71, 0xc4, 0x57, 0x07, 0x30, 0xf9, 0x60, 0xd3, 0x66,
	0x0e, 0x62, 0x3c, 0x93, 0x8d, 0x31, 0x50, 0x30, 0x64, 0x7a, 0x7f, 0x2a, 0x8f, 0x11, 0x63, 0x1c,
	0x9c, 0x1c, 0x46, 0x3a, 0x0a, 0xfb, 0x0c, 0xd3, 0xd0, 0xd8, 0xd8, 0xee, 0x49, 0x32, 0xbb, 0xb7,
	0x21, 0x7e, 0xf8, 0xc8, 0x93, 0x4a, 0xb7, 0x11, 0xf9, 0x8f, 0xe2, 0xc8, 0x97, 0x4c, 0xa3, 0xad,
	0x5b, 0x3d, 0x49, 0xe4, 0x33, 0x70, 0xb8, 0x65, 0xe9, 0x2b, 0x1d, 0x66, 0x35, 0xd5, 0x95, 0x15,
	0x8b, 0xd9, 0x36, 0xe7, 0x30, 0xd4, 0x38, 0x84, 0xc3, 0x37, 0xc5, 0x68, 0x40, 0x71, 0x4f, 0x98,
	0xe2, 0x6a, 0x9c, 0xa2, 0x6f, 0x1d, 0x29, 0xde, 0x81, 0x03, 0x9a, 0x18, 0x42, 0x7e, 0xf3, 0xd9,
	0xfc, 0xde, 0xb3, 0x3b, 0x09, 0x3d, 0x9e, 0xb4, 0xf2, 0x21, 0x9c, 0x4d, 0xb5, 0x64, 0xd7, 0x37,
	0xde, 0x77, 0xa1, 0x6c, 0x69, 0xa7, 0x2c, 0x98, 0x2e, 0x50, 0x8e, 0x74, 0xee, 0xc1, 0x6b, 0x08,
	0xc8, 0xbd, 0x0d, 0x7b, 0xca, 0xf3, 0xf1, 0xc5, 0x95, 0x3a, 0x4c, 0x71, 0x9b, 0xf7, 0x55, 0x3b,
	0x71, 0x27, 0x64, 0x6f, 0xec, 0x13, 0x50, 0xf2, 0x74, 0x20, 0xe8, 0x5b, 0x30, 0x1c, 0x1c, 0x33,
	0x0f, 0xb7, 0xd4, 0x39, 0x03, 0xff, 0x9c, 0xd9, 0xca, 0x33, 0x98, 0xf7, 0x6d, 0x3d, 0x64, 0xc6,
	0x8a, 0x6e, 0x74, 0xe2, 0x26, 0xeb, 0x1b, 0xee, 0x69, 0xd9, 0xe6, 0x93, 0xa7, 0xac, 0x43, 0x55,
	0xd6, 0xf0, 0xb6, 0x12, 0xfe, 0x84, 0xc0, 0x28, 0x37, 0x5c, 0x57, 0x1d, 0x6d, 0xf5, 0x5d, 0x26,
	0x7b, 0xc4, 0x1e, 0xc1, 0xa1, 0x9e, 0x6e, 0x34, 0x5b, 0xae, 0x54, 0xb3, 0xcd, 0x98, 0xcb, 0xcb,
	0x05, 0x30, 0x9d, 0x73, 0x52, 0x74, 0xc3, 0x33, 0x82, 0xce, 0xf3, 0x60, 0x2f, 0x18, 0xb2, 0x95,
	0x0f, 0xe1, 0x58, 0x0c, 0x49, 0xe0, 0x41, 0x42, 0x76, 0x0a, 0x89, 0xfa, 0x1a, 0x1b, 0x43, 0x2d,
	0x5f, 0xb9, 0x0d, 0x73, 0xf1, 0xf5, 0xe5, 0xf3, 0x76, 0x74, 0x53, 0x7b, 0x70, 0x5e, 0xc6, 0x28,
	0xd2, 0xbc, 0x01, 0xfb, 0x38, 0x5e, 0xf4, 0x21, 0x73, 0x39, 0x5b, 0xd9, 0x77, 0x3a, 0xa6, 0x6e,
	0x74, 0x96, 0x07, 0x42, 0x9d, 0x90, 0x53, 0xae, 0x7b, 0x7e, 0x2a, 0xfa, 0x99, 0xc9, 0x5e, 0x34,
	0x06, 0x13, 0x59, 0xf2, 0x08, 0x71, 0x09, 0x0e, 0xb4, 0xc4, 0x10, 0x6e, 0x43, 0x09, 0x90, 0x9e,
	0xa4, 0xb2, 0x01, 0x27, 0xd2, 0xcc, 0x48, 0x2e, 0xfe, 0x34, 0x1c, 0x72, 0xcc, 0x8f, 0x99, 0xd1,
	0xd4, 0x4c, 0xc3, 0xb1, 0x54, 0xcd, 0xc1, 0xb5, 0x1f, 0xe1, 0xa3, 0x4b, 0x38, 0x98, 0xe1, 0xc9,
	0x9b, 0x5e, 0x1c, 0x89, 0x9b, 0xde, 0xae, 0x2d, 0xf8, 0x1d, 0x81, 0xb1, 0xe0, 0x10, 0x97, 0x8b,
	0x52, 0x92, 0xcc, 0x52, 0x4e, 0xdf, 0x9e, 0xfc, 0x60, 0xb6, 0x37, 0xbc, 0x04, 0x1f, 0xc1, 0x78,
	0x0a, 0xc0, 0x60, 0x7f, 0xa3, 0x81, 0x6c, 0x2e, 0xd7, 0xf1, 0xa3, 0x38, 0xee, 0xaf, 0x17, 0xc4,
	0x9e, 0xa5, 0x58, 0xb0, 0xbf, 0x8e, 0xdd, 0xd5, 0xa0, 0x92, 0x66, 0x18, 0xb9, 0xdd, 0x4e, 0x44,
	0xb5, 0x12, 0xe4, 0x82, 0x88, 0xf6, 0x04, 0x26, 0xfd, 0x3b, 0x7d, 0x7b, 0x9d, 0x19, 0x0e, 0x8f,
	0x9d, 0x3b, 0xe3, 0x3f, 0x6e, 0x85, 0xa2, 0x67, 0xd2, 0x16, 0xf2, 0x3a, 0x0d, 0xc3, 0xcc, 0xfd,
	0xd6, 0x14, 0x2b, 0x42, 0xf8, 0x8a, 0x00, 0xf3, 0xa7, 0x2b, 0x0f, 0xf0, 0x48, 0x2e, 0xbb, 0x4b,
	0xb8, 0x6c, 0xde, 0x62, 0x86, 0xd9, 0x93, 0x4f, 0x24, 0xf8, 0xc2, 0x23, 0x3e, 0xf1, 0x43, 0x59,
	0xc0, 0x0d, 0x8e, 0x2a, 0x44, 0x38, 0xa3, 0xb0, 0x6f, 0xc5, 0x1d, 0x40, 0x65, 0xe2, 0x87, 0x8f,
	0x81, 0xcf, 0x5d, 0x36, 0xb9, 0xa4, 0x3c, 0x06, 0xa1, 0x70, 0x77, 0x58, 0xa1, 0x87, 0x21, 0xaa,
	0x30, 0xc0, 0x20, 0x60, 0x93, 0x30, 0xec, 0x8f, 0x10, 0x83, 0x08, 0x84, 0xa5, 0x76, 0x6c, 0x1a,
	0x0e, 0x61, 0xac, 0x8d, 0x6e, 0xd8, 0x88, 0x18, 0xf5, 0xf6, 0xeb, 0x01, 0xbe, 0x2d, 0x84, 0x05,
	0x1f, 0xce, 0x9b, 0xb0, 0x5f, 0xcc, 0x2b, 0x7e, 0x5b, 0xa0, 0x24, 0xce, 0x57, 0xba, 0x78, 0xd8,
	0x3c, 0xc8, 0xb7, 0x07, 0x0e, 0xb3, 0x0c, 0xb5, 0x5b, 0x02, 0xfa, 0x1c, 0xbc, 0xce, 0x50, 0x2a,
	0x06, 0xfe, 0x30, 0x0b, 0x69, 0x73, 0xe1, 0xeb, 0x70, 0x3a, 0x62, 0xad, 0x1e, 0x9c, 0xc6, 0xed,
	0x3e, 0xd9, 0x3a, 0x9e, 0x6c, 0x8c, 0x8a, 0x8f, 0x99, 0xb1, 0xb2, 0x6c, 0x7a, 0xec, 0xe4, 0x37,
	0xc5, 0x66, 0xc6, 0x4a, 0xc2, 0xd6, 0x88, 0x18, 0xf5, 0x4c, 0xbd, 0x22, 0x98, 0x3f, 0x66, 0xd8,
	0xc2, 0x4d, 0xfa, 0x01, 0x8c, 0x3a, 0x96, 0x6a, 0xd8, 0x6d, 0x66, 0xd9, 0x4d, 0x2f, 0xb3, 0xf1,
	0xe3, 0xdc, 0x45, 0x89, 0x48, 0x80, 0xd2, 0xcb, 0x83, 0x06, 0xf5, 0x35, 0xdd, 0x33, 0x30, 0x84,
	0xd2, 0xef, 0xc3, 0xd1, 0xbe, 0x21, 0x94, 0xae, 0x34, 0xfd, 0xef, 0x98, 0x35, 0x95, 0x54, 0xef,
	0x2b, 0xf2, 0x06, 0x5d, 0x57, 0x71, 0x26, 0x48, 0x92, 0x5b, 0x36, 0xb3, 0xd6, 0xd9, 0x4a, 0xbd,
	0x6b, 0x6a, 0x1f, 0xdf, 0x65, 0x7a, 0x67, 0x55, 0xf6, 0x19, 0xfa, 0x63, 0x7c, 0x7f, 0x64, 0x6a,
	0xc1, 0xc5, 0x5a, 0x84, 0x63, 0xfe, 0xa1, 0x6a, 0xb9, 0xdf, 0x9b, 0xab, 0x7c, 0x02, 0x7a, 0x9f,
	0xa3, 0xde, 0xc7, 0x90, 0x2c, 0x9d, 0x82, 0x83, 0x91, 0xa9, 0xe2, 0x6d, 0x32, 0xdc, 0x0a, 0xa6,
	0x28, 0x6b, 0x70, 0x2e, 0xea, 0xef, 0x42, 0xf2, 0x3b, 0xe3, 0x61, 0xef, 0xc3, 0x4c, 0xa1, 0x45,
	0xe4, 0x1c, 0xc7, 0x4f, 0x92, 0xf8, 0x2f, 0x47, 0xee, 0xbf, 0x6c, 0xda, 0xf5, 0x5d, 0xcc, 0xc0,
	0x7d, 0x29, 0x34, 0xf8, 0x0e, 0x1c, 0x10, 0x6e, 0xc0, 0x3b, 0x84, 0x85, 0x7e, 0x03, 0xd3, 0x6a,
	0x4f, 0x4c, 0xb9, 0x8b, 0xec, 0x1e, 0x5a, 0xe6, 0x13, 0xa6, 0x39, 0x6c, 0x85, 0x1f, 0xc6, 0x65,
	0xbd, 0xc7, 0xcc, 0xbe, 0x53, 0xea, 0x60, 0x3c, 0x82, 0xd9, 0x62, 0x4d, 0x88, 0xdb, 0x8d, 0xe1,
	0xe2, 0x43, 0x74, 0xa9, 0x46, 0x9c, 0xf0, 0x74, 0xe5, 0xaa, 0x97, 0x29, 0xf1, 0x1d, 0xe1, 0x0e,
	0x5c, 0x76, 0xc5, 0x3a, 0x5e, 0x86, 0x11, 0x11, 0x45, 0xf3, 0xdf, 0x81, 0x11, 0xb1, 0xc9, 0x4d,
	0xee, 0xf6, 0xbd, 0xc5, 0xcb, 0x79, 0x98, 0x84, 0xd4, 0x34, 0x0e, 0xb6, 0x42, 0x3a, 0x95, 0x65,
	0xcc, 0xa8, 0xc5, 0x8c, 0x25, 0x53, 0x37, 0xea, 0x1b, 0x25, 0xe3, 0x67, 0x4a, 0xec, 0xfa, 0x00,
	0xf3, 0xec, 0x14, 0xad, 0xc8, 0xe1, 0x12, 0xec, 0xd5, 0x4c, 0xdd, 0xc0, 0x78, 0x31, 0x5e, 0xc5,
	0x72, 0x5c, 0x4b, 0xb5, 0x59, 0x15, 0x6b, 0x77, 0x55, 0x2e, 0x27, 0x36, 0x9c, 0x4f, 0x56, 0x4e,
	0x61, 0x5e, 0x8d, 0x6a, 0x5d, 0x10, 0xf7, 0x75, 0xbf, 0xba, 0xa3, 0xdc, 0xc0, 0xdc, 0x37, 0xf1,
	0x39, 0xc8, 0x23, 0x02, 0x2a, 0x62, 0xd5, 0x86, 0x1a, 0xe0, 0x73, 0xb1, 0x95, 0x9f, 0x10, 0x38,
	0x1e, 0xd6, 0xa0, 0x76, 0xbb, 0xb2, 0x69, 0xdd, 0xbb, 0x00, 0x41, 0x41, 0x92, 0x2f, 0xc6, 0xf0,
	0xe2, 0xb9, 0x08, 0x2b, 0x51, 0xf0, 0xf4, 0xb8, 0x3d, 0x54, 0x3b, 0xde, 0x43, 0xb4, 0x11, 0x92,
	0x54, 0x9e, 0x93, 0xc8, 0xa1, 0x41, 0x08, 0x48, 0xe0, 0x01, 0xe0, 0xe6, 0x35, 0x35, 0x77, 0x5c,
	0xde, 0x73, 0x07, 0xca, 0x1a, 0xc3, 0xad, 0x40, 0x31, 0xbd, 0x93, 0x82, 0x7a, 0xa6, 0x10, 0xb5,
	0x40, 0x13, 0x81, 0x1d, 0x3b, 0x46, 0x6a, 0xb7, 0xbb, 0x1d, 0xf5, 0x1c, 0x33, 0x7a, 0x8c, 0xc2,
	0x5a, 0x71, 0x45, 0xde, 0x83, 0xe1, 0xd0, 0x8a, 0xe0, 0x69, 0x2a, 0xb7, 0x20, 0x10, 0x2c, 0x88,
	0xd2, 0x4e, 0x31, 0xf8, 0x98, 0xc7, 0xda, 0xed, 0x8d, 0xd8, 0x16, 0xe6, 0x21, 0x69, 0x76, 0x76,
	0x68, 0xaf, 0x95, 0x36, 0x46, 0xbe, 0xe0, 0xbb, 0x97, 0xff, 0x97, 0xda, 0xa9, 0x58, 0x32, 0xbe,
	0x3b, 0x91, 0x8c, 0xff, 0x8a, 0x60, 0x15, 0x2e, 0xdb, 0x90, 0xef, 0xc7, 0xe2, 0xef, 0x95, 0x6a,
	0xee, 0x7b, 0x25, 0xa1, 0x30, 0x78, 0xb4, 0xb8, 0xb1, 0x8b, 0x19, 0x66, 0xbf, 0xb3, 0xda, 0x5c,
	0x33, 0x9f, 0x31, 0x8b, 0xe3, 0x7a, 0xad, 0x31, 0x2c, 0xc6, 0x1e, 0xba, 0x43, 0xca, 0xd3, 0x50,
	0x24, 0xf4, 0x6a, 0x15, 0xa1, 0xf5, 0xdf, 0x89, 0xe0, 0xfb, 0x43, 0x0c, 0x2a, 0xb9, 0x26, 0x77,
	0x6a, 0xc3, 0x3f, 0x21, 0x78, 0xca, 0xd0, 0xf2, 0xed, 0x01, 0xd3, 0xfa, 0x0e, 0x5b, 0xea, 0xaa,
	0x7a, 0xef, 0x6b, 0xf6, 0x6a, 0x7f, 0x24, 0x98, 0xe6, 0xa7, 0x42, 0xf1, 0x4b, 0x13, 0xfb, 0x35,
	0x77, 0xc0, 0xa3, 0x3e, 0x5a, 0x15, 0x8d, 0x91, 0xaa, 0xd7, 0x18, 0xa9, 0xde, 0x34, 0x36, 0xea,
	0x47, 0x3e, 0x7f, 0x3e, 0x3f, 0xe2, 0xe5, 0xb6, 0x42, 0x01, 0x8a, 0x6d, 0x9b, 0x37, 0x5b, 0xfc,
	0xe7, 0x45, 0xd8, 0xc7, 0xe1, 0xd2, 0x9f, 0x11, 0xd8, 0x2f, 0xba, 0x21, 0x34, 0x67, 0x27, 0x92,
	0x3d, 0x9a, 0xca, 0xbc, 0xe4, 0x6c, 0x61, 0x5d, 0x99, 0xfc, 0xe9, 0x17, 0xff, 0xff, 0xe5, 0xee,
	0x0a, 0x1d, 0xab, 0xb5, 0x07, 0xb1, 0xf6, 0x92, 0x68, 0xbf, 0xd0, 0x3f, 0x13, 0x78, 0x3d, 0xde,
	0x3b, 0xa1, 0x57, 0x0a, 0xac, 0x64, 0xf4, 0x6a, 0x2a, 0xdf, 0x2a, 0x2d, 0x87, 0x38, 0x2f, 0x72,
	0x9c, 0xe7, 0xe8, 0xd9, 0x24, 0xce, 0xa0, 0x54, 0x5b, 0xd3, 0x84, 0x38, 0xc7, 0x9c, 0xe8, 0x13,
	0x15, 0x61, 0xce, 0xe8, 0xdd, 0x14, 0x62, 0xce, 0x6a, 0xcf, 0x48, 0x62, 0xb6, 0x10, 0x5e, 0x04,
	0x33, 0xfa, 0x19, 0x79, 0xcc, 0xd1, 0x7a, 0x98, 0x3c, 0xe6, 0x58, 0x99, 0x4a, 0x76, 0x9d, 0x11,
	0xde, 0xe7, 0x04, 0xc6, 0xb2, 0x7a, 0x1e, 0xf4, 0x7a, 0x49, 0x0c, 0xb1, 0x4e, 0x4c, 0xe5, 0xc6,
	0xa6, 0xe5, 0x91, 0xcb, 0x3c, 0xe7, 0x32, 0x43, 0xa7, 0x65, 0xb8, 0xd8, 0xf4, 0xef, 0x04, 0x8e,
	0xa5, 0x36, 0x42, 0xe8, 0x5b, 0x05, 0x48, 0xf2, 0x5a, 0x30, 0x95, 0x6f, 0x6f, 0x4e, 0xb8, 0x14,
	0x07, 0xcb, 0x43, 0xfa, 0x3f, 0x02, 0x53, 0x85, 0x7d, 0x0e, 0x7a, 0x47, 0x02, 0x92, 0x4c, 0x8b,
	0xa6, 0x72, 0x77, 0xeb, 0x8a, 0x90, 0xe7, 0x1c, 0xe7, 0x79, 0x86, 0x4e, 0xe5, 0xf2, 0xec, 0xaa,
	0xb6, 0x43, 0x5f, 0x10, 0x38, 0x95, 0x5b, 0xf6, 0xa7, 0x4b, 0xf2, 0xb0, 0x32, 0x3b, 0x15, 0x95,
	0x5b, 0x5b, 0x53, 0x82, 0xbc, 0xce, 0x72, 0x5e, 0x13, 0xf4, 0x64, 0x92, 0x17, 0x2f, 0x34, 0x08,
	0x4a, 0x9f, 0x12, 0x18, 0x4d, 0xab, 0x44, 0xd2, 0x6b, 0x12, 0x20, 0x32, 0x4a, 0xa5, 0x95, 0xb7,
	0x36, 0x25, 0x2b, 0xeb, 0x07, 0x6a, 0xa1, 0x64, 0x8c, 0xfe, 0x8b, 0x40, 0x25, 0xfb, 0x9d, 0x4f,
	0xdf, 0x91, 0x45, 0x92, 0x55, 0x94, 0xa8, 0xdc, 0xdc, 0x82, 0x06, 0x64, 0x74, 0x89, 0x33, 0x9a,
	0xa7, 0x17, 0xf2, 0x19, 0xd5, 0xc2, 0x95, 0x08, 0xfa, 0x0f, 0x02, 0xc7, 0x33, 0x2a, 0x36, 0xf4,
	0x6d, 0x99, 0x8b, 0x9d, 0x59, 0x2f, 0xaa, 0x5c, 0xdf, 0xac, 0x38, 0xf2, 0xa9, 0x71, 0x3e, 0x73,
	0x74, 0x26, 0x85, 0x0f, 0x8a, 0x45, 0xb9, 0x3c, 0x27, 0x70, 0x24, 0xd1, 0x7f, 0xa2, 0x85, 0x91,
	0x22, 0xa3, 0xe3, 0x55, 0x79, 0xb3, 0xbc, 0x60, 0xf1, 0xd9, 0x12, 0x77, 0xc2, 0x44, 0xd1, 0xa6,
	0x33, 0xb0, 0xe9, 0x9f, 0x08, 0x1c, 0x8e, 0xe9, 0xa2, 0xdf, 0x2c, 0x67, 0xdb, 0x83, 0x7c, 0xa5,
	0xac, 0x18, 0x02, 0xbe, 0xc0, 0x01, 0x4f, 0xd3, 0x33, 0x12, 0x80, 0xe9, 0xef, 0x09, 0x1c, 0x0c,
	0xb7, 0x49, 0xe8, 0x62, 0x81, 0xd5, 0x94, 0x7e, 0x56, 0xe5, 0x52, 0x29, 0x19, 0x84, 0x39, 0xc3,
	0x61, 0x4e, 0xd1, 0xd3, 0x59, 0x30, 0xbd, 0xb0, 0xfd, 0x07, 0x02, 0x23, 0x91, 0x4e, 0x0e, 0x2d,
	0x63, 0xcf, 0x3f, 0x01, 0x97, 0xcb, 0x09, 0x21, 0xca, 0x59, 0x8e, 0x52, 0xa1, 0x93, 0x05, 0x28,
	0x6d, 0xfa, 0x6b, 0x02, 0x07, 0xc3, 0x8d, 0x90, 0xc2, 0x95, 0x4c, 0x69, 0xc3, 0x14, 0xae, 0x64,
	0x5a, 0xa7, 0x45, 0x39, 0xcd, 0x31, 0x8e, 0xd3, 0xe3, 0x49, 0x8c, 0xbc, 0xce, 0xc4, 0xa1, 0x85,
	0xfb, 0x23, 0x85, 0xd0, 0x52, 0xba, 0x33, 0x85, 0xd0, 0xd2, 0x1a, 0x30, 0x79, 0xd0, 0x78, 0x51,
	0x8e, 0xfe, 0x96, 0xc0, 0xe1, 0x3b, 0xcc, 0x09, 0xb7, 0x62, 0x0a, 0xd1, 0xa5, 0xf4, 0x6d, 0x0a,
	0x1f, 0x12, 0xd1, 0x4e, 0x4c, 0xde, 0xb6, 0x62, 0x00, 0x6f, 0x6d, 0xf0, 0x47, 0x2b, 0xfd, 0x2b,
	0x81, 0xe3, 0x21, 0x80, 0xe1, 0xc6, 0x4b, 0x61, 0xbc, 0xcb, 0xe9, 0xd6, 0x94, 0x05, 0xbc, 0xc0,
	0x01, 0x5f, 0xa0, 0x73, 0x79, 0x80, 0x23, 0xfd, 0x1d, 0xd7, 0x83, 0x7e, 0x23, 0x84, 0x3c, 0xd4,
	0xc4, 0xa1, 0x57, 0x25, 0x81, 0x27, 0x1b, 0x3f, 0x65, 0x71, 0xbf, 0xc1, 0x71, 0x9f, 0xa7, 0xb3,
	0x79, 0xb8, 0xc3, 0x55, 0x02, 0xfa, 0x1b, 0x02, 0xc3, 0xa1, 0xaa, 0x1e, 0x5d, 0x28, 0xba, 0xb7,
	0x89, 0x22, 0x64, 0x65, 0xb1, 0x8c, 0x08, 0x02, 0x3d, 0xc7, 0x81, 0x4e, 0xd2, 0x89, 0x94, 0x8b,
	0x1e, 0xaa, 0x37, 0xd0, 0x2f, 0x08, 0x8c, 0x65, 0x95, 0x6c, 0x0a, 0x1f, 0x11, 0x05, 0x45, 0xa5,
	0xc2, 0x47, 0x44, 0x51, 0xad, 0x48, 0xb9, 0xc2, 0x59, 0xbc, 0x41, 0xab, 0xb9, 0x2c, 0x9a, 0xe8,
	0xb4, 0xdc, 0xb5, 0x17, 0x29, 0xd1, 0x5f, 0x08, 0x1c, 0x49, 0x94, 0x0f, 0x0b, 0xa3, 0x6d, 0x56,
	0x19, 0xb3, 0x30, 0xda, 0x66, 0x56, 0x2a, 0x95, 0x2a, 0x27, 0x30, 0x4b, 0xcf, 0xe5, 0x13, 0xf0,
	0x81, 0xff, 0x8d, 0x00, 0x4d, 0x96, 0x07, 0x69, 0x19, 0x00, 0x91, 0xca, 0x65, 0xe5, 0xea, 0x26,
	0x24, 0x8b, 0x73, 0x9c, 0x18, 0x76, 0x51, 0xe6, 0xa4, 0x5f, 0x12, 0x38, 0x91, 0x53, 0xf3, 0xa2,
	0x37, 0x4b, 0x24, 0xf5, 0xe9, 0x25, 0xba, 0x4a, 0x7d, 0x2b, 0x2a, 0x90, 0xd7, 0x35, 0xce, 0xeb,
	0x32, 0x5d, 0x4c, 0xf2, 0x72, 0xdf, 0x03, 0xcd, 0x35, 0x21, 0xdf, 0x8c, 0x91, 0xe4, 0xb7, 0xf9,
	0x53, 0x02, 0x47, 0x53, 0xaa, 0x59, 0x85, 0x1e, 0x28, 0xbb, 0x18, 0x57, 0xb9, 0xb6, 0x19, 0xd1,
	0xe2, 0x2d, 0xf2, 0x58, 0x30, 0x21, 0xd7, 0xe4, 0xd5, 0x32, 0xfa, 0x73, 0x02, 0x07, 0xb0, 0x1f,
	0x47, 0xe5, 0x5c, 0x9f, 0xef, 0x85, 0xaa, 0xb2, 0xd3, 0x11, 0xdb, 0x14, 0xc7, 0x76, 0x82, 0x8e,
	0x67, 0xb9, 0x4a, 0x9b, 0xfe, 0x9b, 0xc0, 0x89, 0x9c, 0xce, 0x5b, 0xe1, 0x81, 0x29, 0xee, 0xff,
	0x15, 0x1e, 0x18, 0x89, 0xc6, 0x5f, 0x5e, 0xb0, 0x5a, 0xf3, 0xc4, 0xf1, 0x5f, 0x0c, 0x62, 0x2b,
	0x50, 0xe4, 0xa1, 0xa1, 0x8e, 0x1b, 0x95, 0xf3, 0xe1, 0x91, 0x6e, 0x61, 0x71, 0x1e, 0x9a, 0xd2,
	0x26, 0xcc, 0xcd, 0x43, 0xc3, 0xed, 0xc3, 0xb0, 0x8f, 0x0c, 0x3a, 0x75, 0xb2, 0x3e, 0x32, 0xd1,
	0x31, 0x94, 0xf5, 0x91, 0xc9, 0xa6, 0xa0, 0x8c, 0x8f, 0x34, 0x75, 0xc3, 0xbd, 0x82, 0x22, 0xfd,
	0x73, 0xdf, 0x24, 0xb1, 0x66, 0x5f, 0xe1, 0x9b, 0x24, 0xbd, 0x77, 0x58, 0xf8, 0x26, 0xc9, 0xe8,
	0x29, 0xe6, 0xbe, 0x49, 0x10, 0x32, 0xaf, 0xaf, 0x77, 0x75, 0xdb, 0xa9, 0xdf, 0xfb, 0xec, 0xe5,
	0x04, 0x79, 0xf1, 0x72, 0x82, 0x7c, 0xf9, 0x72, 0x82, 0xfc, 0xe2, 0xd5, 0xc4, 0xae, 0x17, 0xaf,
	0x26, 0x76, 0xfd, 0xe7, 0xd5, 0xc4, 0xae, 0xef, 0xd5, 0x3a, 0xba, 0xb3, 0xda, 0x6f, 0x55, 0x35,
	0xb3, 0x57, 0x6b, 0xf7, 0x0d, 0xcd, 0xd1, 0x4d, 0x63, 0x50, 0x6b, 0x0f, 0xe6, 0x35, 0xd3, 0x62,
	0xb5, 0x88, 0x66, 0xfe, 0xdf, 0x0d, 0x5a, 0xfb, 0x79, 0x51, 0xfc, 0xd2, 0x57, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x32, 0xb8, 0x9f, 0xd1, 0x61, 0x31, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Deployments queries deployments
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	CurrentOracleSet(ctx context.Context, in *QueryCurrentOracleSetRequest, opts ...grpc.CallOption) (*QueryCurrentOracleSetResponse, error)
	OracleSetRequest(ctx context.Context, in *QueryOracleSetRequestRequest, opts ...grpc.CallOption) (*QueryOracleSetRequestResponse, error)
	OracleSetConfirm(ctx context.Context, in *QueryOracleSetConfirmRequest, opts ...grpc.CallOption) (*QueryOracleSetConfirmResponse, error)
	OracleSetConfirmsByNonce(ctx context.Context, in *QueryOracleSetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryOracleSetConfirmsByNonceResponse, error)
	LastOracleSetRequests(ctx context.Context, in *QueryLastOracleSetRequestsRequest, opts ...grpc.CallOption) (*QueryLastOracleSetRequestsResponse, error)
	LastPendingOracleSetRequestByAddr(ctx context.Context, in *QueryLastPendingOracleSetRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingOracleSetRequestByAddrResponse, error)
	LastPendingBatchRequestByAddr(ctx context.Context, in *QueryLastPendingBatchRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchRequestByAddrResponse, error)
	LastEventNonceByAddr(ctx context.Context, in *QueryLastEventNonceByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventNonceByAddrResponse, error)
	LastEventBlockHeightByAddr(ctx context.Context, in *QueryLastEventBlockHeightByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventBlockHeightByAddrResponse, error)
	LastObservedBlockHeight(ctx context.Context, in *QueryLastObservedBlockHeightRequest, opts ...grpc.CallOption) (*QueryLastObservedBlockHeightResponse, error)
	OutgoingTxBatches(ctx context.Context, in *QueryOutgoingTxBatchesRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesResponse, error)
	OutgoingTxBatch(ctx context.Context, in *QueryOutgoingTxBatchRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchResponse, error)
	BatchConfirm(ctx context.Context, in *QueryBatchConfirmRequest, opts ...grpc.CallOption) (*QueryBatchConfirmResponse, error)
	BatchConfirms(ctx context.Context, in *QueryBatchConfirmsRequest, opts ...grpc.CallOption) (*QueryBatchConfirmsResponse, error)
	TokenToDenom(ctx context.Context, in *QueryTokenToDenomRequest, opts ...grpc.CallOption) (*QueryTokenToDenomResponse, error)
	DenomToToken(ctx context.Context, in *QueryDenomToTokenRequest, opts ...grpc.CallOption) (*QueryDenomToTokenResponse, error)
	GetOracleByAddr(ctx context.Context, in *QueryOracleByAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error)
	GetOracleByExternalAddr(ctx context.Context, in *QueryOracleByExternalAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error)
	GetOracleByBridgerAddr(ctx context.Context, in *QueryOracleByBridgerAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error)
	BridgeCalls(ctx context.Context, in *QueryBridgeCallsRequest, opts ...grpc.CallOption) (*QueryBridgeCallsResponse, error)
	BridgeCallConfirmByNonce(ctx context.Context, in *QueryBridgeCallConfirmByNonceRequest, opts ...grpc.CallOption) (*QueryBridgeCallConfirmByNonceResponse, error)
	BridgeCallByNonce(ctx context.Context, in *QueryBridgeCallByNonceRequest, opts ...grpc.CallOption) (*QueryBridgeCallByNonceResponse, error)
	BridgeCallBySender(ctx context.Context, in *QueryBridgeCallBySenderRequest, opts ...grpc.CallOption) (*QueryBridgeCallBySenderResponse, error)
	LastPendingBridgeCallByAddr(ctx context.Context, in *QueryLastPendingBridgeCallByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBridgeCallByAddrResponse, error)
	PendingExecuteClaim(ctx context.Context, in *QueryPendingExecuteClaimRequest, opts ...grpc.CallOption) (*QueryPendingExecuteClaimResponse, error)
	// Validators queries all oracle that match the given status.
	Oracles(ctx context.Context, in *QueryOraclesRequest, opts ...grpc.CallOption) (*QueryOraclesResponse, error)
	ProjectedBatchTimeoutHeight(ctx context.Context, in *QueryProjectedBatchTimeoutHeightRequest, opts ...grpc.CallOption) (*QueryProjectedBatchTimeoutHeightResponse, error)
	BridgeTokens(ctx context.Context, in *QueryBridgeTokensRequest, opts ...grpc.CallOption) (*QueryBridgeTokensResponse, error)
	BridgeCoinByDenom(ctx context.Context, in *QueryBridgeCoinByDenomRequest, opts ...grpc.CallOption) (*QueryBridgeCoinByDenomResponse, error)
	BridgeChainList(ctx context.Context, in *QueryBridgeChainListRequest, opts ...grpc.CallOption) (*QueryBridgeChainListResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentOracleSet(ctx context.Context, in *QueryCurrentOracleSetRequest, opts ...grpc.CallOption) (*QueryCurrentOracleSetResponse, error) {
	out := new(QueryCurrentOracleSetResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/CurrentOracleSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleSetRequest(ctx context.Context, in *QueryOracleSetRequestRequest, opts ...grpc.CallOption) (*QueryOracleSetRequestResponse, error) {
	out := new(QueryOracleSetRequestResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/OracleSetRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleSetConfirm(ctx context.Context, in *QueryOracleSetConfirmRequest, opts ...grpc.CallOption) (*QueryOracleSetConfirmResponse, error) {
	out := new(QueryOracleSetConfirmResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/OracleSetConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleSetConfirmsByNonce(ctx context.Context, in *QueryOracleSetConfirmsByNonceRequest, opts ...grpc.CallOption) (*QueryOracleSetConfirmsByNonceResponse, error) {
	out := new(QueryOracleSetConfirmsByNonceResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/OracleSetConfirmsByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastOracleSetRequests(ctx context.Context, in *QueryLastOracleSetRequestsRequest, opts ...grpc.CallOption) (*QueryLastOracleSetRequestsResponse, error) {
	out := new(QueryLastOracleSetRequestsResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/LastOracleSetRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingOracleSetRequestByAddr(ctx context.Context, in *QueryLastPendingOracleSetRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingOracleSetRequestByAddrResponse, error) {
	out := new(QueryLastPendingOracleSetRequestByAddrResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/LastPendingOracleSetRequestByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingBatchRequestByAddr(ctx context.Context, in *QueryLastPendingBatchRequestByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBatchRequestByAddrResponse, error) {
	out := new(QueryLastPendingBatchRequestByAddrResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/LastPendingBatchRequestByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastEventNonceByAddr(ctx context.Context, in *QueryLastEventNonceByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventNonceByAddrResponse, error) {
	out := new(QueryLastEventNonceByAddrResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/LastEventNonceByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastEventBlockHeightByAddr(ctx context.Context, in *QueryLastEventBlockHeightByAddrRequest, opts ...grpc.CallOption) (*QueryLastEventBlockHeightByAddrResponse, error) {
	out := new(QueryLastEventBlockHeightByAddrResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/LastEventBlockHeightByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastObservedBlockHeight(ctx context.Context, in *QueryLastObservedBlockHeightRequest, opts ...grpc.CallOption) (*QueryLastObservedBlockHeightResponse, error) {
	out := new(QueryLastObservedBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/LastObservedBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingTxBatches(ctx context.Context, in *QueryOutgoingTxBatchesRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchesResponse, error) {
	out := new(QueryOutgoingTxBatchesResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/OutgoingTxBatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutgoingTxBatch(ctx context.Context, in *QueryOutgoingTxBatchRequest, opts ...grpc.CallOption) (*QueryOutgoingTxBatchResponse, error) {
	out := new(QueryOutgoingTxBatchResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/OutgoingTxBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchConfirm(ctx context.Context, in *QueryBatchConfirmRequest, opts ...grpc.CallOption) (*QueryBatchConfirmResponse, error) {
	out := new(QueryBatchConfirmResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/BatchConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BatchConfirms(ctx context.Context, in *QueryBatchConfirmsRequest, opts ...grpc.CallOption) (*QueryBatchConfirmsResponse, error) {
	out := new(QueryBatchConfirmsResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/BatchConfirms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenToDenom(ctx context.Context, in *QueryTokenToDenomRequest, opts ...grpc.CallOption) (*QueryTokenToDenomResponse, error) {
	out := new(QueryTokenToDenomResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/TokenToDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomToToken(ctx context.Context, in *QueryDenomToTokenRequest, opts ...grpc.CallOption) (*QueryDenomToTokenResponse, error) {
	out := new(QueryDenomToTokenResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/DenomToToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOracleByAddr(ctx context.Context, in *QueryOracleByAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error) {
	out := new(QueryOracleResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/GetOracleByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOracleByExternalAddr(ctx context.Context, in *QueryOracleByExternalAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error) {
	out := new(QueryOracleResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/GetOracleByExternalAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOracleByBridgerAddr(ctx context.Context, in *QueryOracleByBridgerAddrRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error) {
	out := new(QueryOracleResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/GetOracleByBridgerAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCalls(ctx context.Context, in *QueryBridgeCallsRequest, opts ...grpc.CallOption) (*QueryBridgeCallsResponse, error) {
	out := new(QueryBridgeCallsResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/BridgeCalls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCallConfirmByNonce(ctx context.Context, in *QueryBridgeCallConfirmByNonceRequest, opts ...grpc.CallOption) (*QueryBridgeCallConfirmByNonceResponse, error) {
	out := new(QueryBridgeCallConfirmByNonceResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/BridgeCallConfirmByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCallByNonce(ctx context.Context, in *QueryBridgeCallByNonceRequest, opts ...grpc.CallOption) (*QueryBridgeCallByNonceResponse, error) {
	out := new(QueryBridgeCallByNonceResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/BridgeCallByNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCallBySender(ctx context.Context, in *QueryBridgeCallBySenderRequest, opts ...grpc.CallOption) (*QueryBridgeCallBySenderResponse, error) {
	out := new(QueryBridgeCallBySenderResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/BridgeCallBySender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastPendingBridgeCallByAddr(ctx context.Context, in *QueryLastPendingBridgeCallByAddrRequest, opts ...grpc.CallOption) (*QueryLastPendingBridgeCallByAddrResponse, error) {
	out := new(QueryLastPendingBridgeCallByAddrResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/LastPendingBridgeCallByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingExecuteClaim(ctx context.Context, in *QueryPendingExecuteClaimRequest, opts ...grpc.CallOption) (*QueryPendingExecuteClaimResponse, error) {
	out := new(QueryPendingExecuteClaimResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/PendingExecuteClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Oracles(ctx context.Context, in *QueryOraclesRequest, opts ...grpc.CallOption) (*QueryOraclesResponse, error) {
	out := new(QueryOraclesResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/Oracles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProjectedBatchTimeoutHeight(ctx context.Context, in *QueryProjectedBatchTimeoutHeightRequest, opts ...grpc.CallOption) (*QueryProjectedBatchTimeoutHeightResponse, error) {
	out := new(QueryProjectedBatchTimeoutHeightResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/ProjectedBatchTimeoutHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeTokens(ctx context.Context, in *QueryBridgeTokensRequest, opts ...grpc.CallOption) (*QueryBridgeTokensResponse, error) {
	out := new(QueryBridgeTokensResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/BridgeTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeCoinByDenom(ctx context.Context, in *QueryBridgeCoinByDenomRequest, opts ...grpc.CallOption) (*QueryBridgeCoinByDenomResponse, error) {
	out := new(QueryBridgeCoinByDenomResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/BridgeCoinByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BridgeChainList(ctx context.Context, in *QueryBridgeChainListRequest, opts ...grpc.CallOption) (*QueryBridgeChainListResponse, error) {
	out := new(QueryBridgeChainListResponse)
	err := c.cc.Invoke(ctx, "/fx.gravity.crosschain.v1.Query/BridgeChainList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Deployments queries deployments
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	CurrentOracleSet(context.Context, *QueryCurrentOracleSetRequest) (*QueryCurrentOracleSetResponse, error)
	OracleSetRequest(context.Context, *QueryOracleSetRequestRequest) (*QueryOracleSetRequestResponse, error)
	OracleSetConfirm(context.Context, *QueryOracleSetConfirmRequest) (*QueryOracleSetConfirmResponse, error)
	OracleSetConfirmsByNonce(context.Context, *QueryOracleSetConfirmsByNonceRequest) (*QueryOracleSetConfirmsByNonceResponse, error)
	LastOracleSetRequests(context.Context, *QueryLastOracleSetRequestsRequest) (*QueryLastOracleSetRequestsResponse, error)
	LastPendingOracleSetRequestByAddr(context.Context, *QueryLastPendingOracleSetRequestByAddrRequest) (*QueryLastPendingOracleSetRequestByAddrResponse, error)
	LastPendingBatchRequestByAddr(context.Context, *QueryLastPendingBatchRequestByAddrRequest) (*QueryLastPendingBatchRequestByAddrResponse, error)
	LastEventNonceByAddr(context.Context, *QueryLastEventNonceByAddrRequest) (*QueryLastEventNonceByAddrResponse, error)
	LastEventBlockHeightByAddr(context.Context, *QueryLastEventBlockHeightByAddrRequest) (*QueryLastEventBlockHeightByAddrResponse, error)
	LastObservedBlockHeight(context.Context, *QueryLastObservedBlockHeightRequest) (*QueryLastObservedBlockHeightResponse, error)
	OutgoingTxBatches(context.Context, *QueryOutgoingTxBatchesRequest) (*QueryOutgoingTxBatchesResponse, error)
	OutgoingTxBatch(context.Context, *QueryOutgoingTxBatchRequest) (*QueryOutgoingTxBatchResponse, error)
	BatchConfirm(context.Context, *QueryBatchConfirmRequest) (*QueryBatchConfirmResponse, error)
	BatchConfirms(context.Context, *QueryBatchConfirmsRequest) (*QueryBatchConfirmsResponse, error)
	TokenToDenom(context.Context, *QueryTokenToDenomRequest) (*QueryTokenToDenomResponse, error)
	DenomToToken(context.Context, *QueryDenomToTokenRequest) (*QueryDenomToTokenResponse, error)
	GetOracleByAddr(context.Context, *QueryOracleByAddrRequest) (*QueryOracleResponse, error)
	GetOracleByExternalAddr(context.Context, *QueryOracleByExternalAddrRequest) (*QueryOracleResponse, error)
	GetOracleByBridgerAddr(context.Context, *QueryOracleByBridgerAddrRequest) (*QueryOracleResponse, error)
	BridgeCalls(context.Context, *QueryBridgeCallsRequest) (*QueryBridgeCallsResponse, error)
	BridgeCallConfirmByNonce(context.Context, *QueryBridgeCallConfirmByNonceRequest) (*QueryBridgeCallConfirmByNonceResponse, error)
	BridgeCallByNonce(context.Context, *QueryBridgeCallByNonceRequest) (*QueryBridgeCallByNonceResponse, error)
	BridgeCallBySender(context.Context, *QueryBridgeCallBySenderRequest) (*QueryBridgeCallBySenderResponse, error)
	LastPendingBridgeCallByAddr(context.Context, *QueryLastPendingBridgeCallByAddrRequest) (*QueryLastPendingBridgeCallByAddrResponse, error)
	PendingExecuteClaim(context.Context, *QueryPendingExecuteClaimRequest) (*QueryPendingExecuteClaimResponse, error)
	// Validators queries all oracle that match the given status.
	Oracles(context.Context, *QueryOraclesRequest) (*QueryOraclesResponse, error)
	ProjectedBatchTimeoutHeight(context.Context, *QueryProjectedBatchTimeoutHeightRequest) (*QueryProjectedBatchTimeoutHeightResponse, error)
	BridgeTokens(context.Context, *QueryBridgeTokensRequest) (*QueryBridgeTokensResponse, error)
	BridgeCoinByDenom(context.Context, *QueryBridgeCoinByDenomRequest) (*QueryBridgeCoinByDenomResponse, error)
	BridgeChainList(context.Context, *QueryBridgeChainListRequest) (*QueryBridgeChainListResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CurrentOracleSet(ctx context.Context, req *QueryCurrentOracleSetRequest) (*QueryCurrentOracleSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentOracleSet not implemented")
}
func (*UnimplementedQueryServer) OracleSetRequest(ctx context.Context, req *QueryOracleSetRequestRequest) (*QueryOracleSetRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSetRequest not implemented")
}
func (*UnimplementedQueryServer) OracleSetConfirm(ctx context.Context, req *QueryOracleSetConfirmRequest) (*QueryOracleSetConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSetConfirm not implemented")
}
func (*UnimplementedQueryServer) OracleSetConfirmsByNonce(ctx context.Context, req *QueryOracleSetConfirmsByNonceRequest) (*QueryOracleSetConfirmsByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleSetConfirmsByNonce not implemented")
}
func (*UnimplementedQueryServer) LastOracleSetRequests(ctx context.Context, req *QueryLastOracleSetRequestsRequest) (*QueryLastOracleSetRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastOracleSetRequests not implemented")
}
func (*UnimplementedQueryServer) LastPendingOracleSetRequestByAddr(ctx context.Context, req *QueryLastPendingOracleSetRequestByAddrRequest) (*QueryLastPendingOracleSetRequestByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingOracleSetRequestByAddr not implemented")
}
func (*UnimplementedQueryServer) LastPendingBatchRequestByAddr(ctx context.Context, req *QueryLastPendingBatchRequestByAddrRequest) (*QueryLastPendingBatchRequestByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingBatchRequestByAddr not implemented")
}
func (*UnimplementedQueryServer) LastEventNonceByAddr(ctx context.Context, req *QueryLastEventNonceByAddrRequest) (*QueryLastEventNonceByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastEventNonceByAddr not implemented")
}
func (*UnimplementedQueryServer) LastEventBlockHeightByAddr(ctx context.Context, req *QueryLastEventBlockHeightByAddrRequest) (*QueryLastEventBlockHeightByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastEventBlockHeightByAddr not implemented")
}
func (*UnimplementedQueryServer) LastObservedBlockHeight(ctx context.Context, req *QueryLastObservedBlockHeightRequest) (*QueryLastObservedBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastObservedBlockHeight not implemented")
}
func (*UnimplementedQueryServer) OutgoingTxBatches(ctx context.Context, req *QueryOutgoingTxBatchesRequest) (*QueryOutgoingTxBatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingTxBatches not implemented")
}
func (*UnimplementedQueryServer) OutgoingTxBatch(ctx context.Context, req *QueryOutgoingTxBatchRequest) (*QueryOutgoingTxBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutgoingTxBatch not implemented")
}
func (*UnimplementedQueryServer) BatchConfirm(ctx context.Context, req *QueryBatchConfirmRequest) (*QueryBatchConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchConfirm not implemented")
}
func (*UnimplementedQueryServer) BatchConfirms(ctx context.Context, req *QueryBatchConfirmsRequest) (*QueryBatchConfirmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchConfirms not implemented")
}
func (*UnimplementedQueryServer) TokenToDenom(ctx context.Context, req *QueryTokenToDenomRequest) (*QueryTokenToDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenToDenom not implemented")
}
func (*UnimplementedQueryServer) DenomToToken(ctx context.Context, req *QueryDenomToTokenRequest) (*QueryDenomToTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomToToken not implemented")
}
func (*UnimplementedQueryServer) GetOracleByAddr(ctx context.Context, req *QueryOracleByAddrRequest) (*QueryOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleByAddr not implemented")
}
func (*UnimplementedQueryServer) GetOracleByExternalAddr(ctx context.Context, req *QueryOracleByExternalAddrRequest) (*QueryOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleByExternalAddr not implemented")
}
func (*UnimplementedQueryServer) GetOracleByBridgerAddr(ctx context.Context, req *QueryOracleByBridgerAddrRequest) (*QueryOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleByBridgerAddr not implemented")
}
func (*UnimplementedQueryServer) BridgeCalls(ctx context.Context, req *QueryBridgeCallsRequest) (*QueryBridgeCallsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCalls not implemented")
}
func (*UnimplementedQueryServer) BridgeCallConfirmByNonce(ctx context.Context, req *QueryBridgeCallConfirmByNonceRequest) (*QueryBridgeCallConfirmByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCallConfirmByNonce not implemented")
}
func (*UnimplementedQueryServer) BridgeCallByNonce(ctx context.Context, req *QueryBridgeCallByNonceRequest) (*QueryBridgeCallByNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCallByNonce not implemented")
}
func (*UnimplementedQueryServer) BridgeCallBySender(ctx context.Context, req *QueryBridgeCallBySenderRequest) (*QueryBridgeCallBySenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCallBySender not implemented")
}
func (*UnimplementedQueryServer) LastPendingBridgeCallByAddr(ctx context.Context, req *QueryLastPendingBridgeCallByAddrRequest) (*QueryLastPendingBridgeCallByAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastPendingBridgeCallByAddr not implemented")
}
func (*UnimplementedQueryServer) PendingExecuteClaim(ctx context.Context, req *QueryPendingExecuteClaimRequest) (*QueryPendingExecuteClaimResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingExecuteClaim not implemented")
}
func (*UnimplementedQueryServer) Oracles(ctx context.Context, req *QueryOraclesRequest) (*QueryOraclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oracles not implemented")
}
func (*UnimplementedQueryServer) ProjectedBatchTimeoutHeight(ctx context.Context, req *QueryProjectedBatchTimeoutHeightRequest) (*QueryProjectedBatchTimeoutHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectedBatchTimeoutHeight not implemented")
}
func (*UnimplementedQueryServer) BridgeTokens(ctx context.Context, req *QueryBridgeTokensRequest) (*QueryBridgeTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeTokens not implemented")
}
func (*UnimplementedQueryServer) BridgeCoinByDenom(ctx context.Context, req *QueryBridgeCoinByDenomRequest) (*QueryBridgeCoinByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeCoinByDenom not implemented")
}
func (*UnimplementedQueryServer) BridgeChainList(ctx context.Context, req *QueryBridgeChainListRequest) (*QueryBridgeChainListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BridgeChainList not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentOracleSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentOracleSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentOracleSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/CurrentOracleSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentOracleSet(ctx, req.(*QueryCurrentOracleSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleSetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleSetRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleSetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/OracleSetRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleSetRequest(ctx, req.(*QueryOracleSetRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleSetConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleSetConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleSetConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/OracleSetConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleSetConfirm(ctx, req.(*QueryOracleSetConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleSetConfirmsByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleSetConfirmsByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleSetConfirmsByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/OracleSetConfirmsByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleSetConfirmsByNonce(ctx, req.(*QueryOracleSetConfirmsByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastOracleSetRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastOracleSetRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastOracleSetRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/LastOracleSetRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastOracleSetRequests(ctx, req.(*QueryLastOracleSetRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingOracleSetRequestByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingOracleSetRequestByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingOracleSetRequestByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/LastPendingOracleSetRequestByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingOracleSetRequestByAddr(ctx, req.(*QueryLastPendingOracleSetRequestByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingBatchRequestByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingBatchRequestByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingBatchRequestByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/LastPendingBatchRequestByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingBatchRequestByAddr(ctx, req.(*QueryLastPendingBatchRequestByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastEventNonceByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastEventNonceByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastEventNonceByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/LastEventNonceByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastEventNonceByAddr(ctx, req.(*QueryLastEventNonceByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastEventBlockHeightByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastEventBlockHeightByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastEventBlockHeightByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/LastEventBlockHeightByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastEventBlockHeightByAddr(ctx, req.(*QueryLastEventBlockHeightByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastObservedBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastObservedBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastObservedBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/LastObservedBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastObservedBlockHeight(ctx, req.(*QueryLastObservedBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingTxBatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingTxBatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingTxBatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/OutgoingTxBatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingTxBatches(ctx, req.(*QueryOutgoingTxBatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutgoingTxBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutgoingTxBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutgoingTxBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/OutgoingTxBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutgoingTxBatch(ctx, req.(*QueryOutgoingTxBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/BatchConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchConfirm(ctx, req.(*QueryBatchConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BatchConfirms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBatchConfirmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BatchConfirms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/BatchConfirms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BatchConfirms(ctx, req.(*QueryBatchConfirmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenToDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenToDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenToDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/TokenToDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenToDenom(ctx, req.(*QueryTokenToDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomToToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomToTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomToToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/DenomToToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomToToken(ctx, req.(*QueryDenomToTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOracleByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOracleByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/GetOracleByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOracleByAddr(ctx, req.(*QueryOracleByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOracleByExternalAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleByExternalAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOracleByExternalAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/GetOracleByExternalAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOracleByExternalAddr(ctx, req.(*QueryOracleByExternalAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOracleByBridgerAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleByBridgerAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOracleByBridgerAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/GetOracleByBridgerAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOracleByBridgerAddr(ctx, req.(*QueryOracleByBridgerAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/BridgeCalls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCalls(ctx, req.(*QueryBridgeCallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCallConfirmByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCallConfirmByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCallConfirmByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/BridgeCallConfirmByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCallConfirmByNonce(ctx, req.(*QueryBridgeCallConfirmByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCallByNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCallByNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCallByNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/BridgeCallByNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCallByNonce(ctx, req.(*QueryBridgeCallByNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCallBySender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCallBySenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCallBySender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/BridgeCallBySender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCallBySender(ctx, req.(*QueryBridgeCallBySenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastPendingBridgeCallByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastPendingBridgeCallByAddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastPendingBridgeCallByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/LastPendingBridgeCallByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastPendingBridgeCallByAddr(ctx, req.(*QueryLastPendingBridgeCallByAddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingExecuteClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingExecuteClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingExecuteClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/PendingExecuteClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingExecuteClaim(ctx, req.(*QueryPendingExecuteClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Oracles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOraclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Oracles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/Oracles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Oracles(ctx, req.(*QueryOraclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProjectedBatchTimeoutHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectedBatchTimeoutHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProjectedBatchTimeoutHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/ProjectedBatchTimeoutHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProjectedBatchTimeoutHeight(ctx, req.(*QueryProjectedBatchTimeoutHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/BridgeTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeTokens(ctx, req.(*QueryBridgeTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeCoinByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeCoinByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeCoinByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/BridgeCoinByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeCoinByDenom(ctx, req.(*QueryBridgeCoinByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BridgeChainList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeChainListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BridgeChainList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fx.gravity.crosschain.v1.Query/BridgeChainList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BridgeChainList(ctx, req.(*QueryBridgeChainListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fx.gravity.crosschain.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CurrentOracleSet",
			Handler:    _Query_CurrentOracleSet_Handler,
		},
		{
			MethodName: "OracleSetRequest",
			Handler:    _Query_OracleSetRequest_Handler,
		},
		{
			MethodName: "OracleSetConfirm",
			Handler:    _Query_OracleSetConfirm_Handler,
		},
		{
			MethodName: "OracleSetConfirmsByNonce",
			Handler:    _Query_OracleSetConfirmsByNonce_Handler,
		},
		{
			MethodName: "LastOracleSetRequests",
			Handler:    _Query_LastOracleSetRequests_Handler,
		},
		{
			MethodName: "LastPendingOracleSetRequestByAddr",
			Handler:    _Query_LastPendingOracleSetRequestByAddr_Handler,
		},
		{
			MethodName: "LastPendingBatchRequestByAddr",
			Handler:    _Query_LastPendingBatchRequestByAddr_Handler,
		},
		{
			MethodName: "LastEventNonceByAddr",
			Handler:    _Query_LastEventNonceByAddr_Handler,
		},
		{
			MethodName: "LastEventBlockHeightByAddr",
			Handler:    _Query_LastEventBlockHeightByAddr_Handler,
		},
		{
			MethodName: "LastObservedBlockHeight",
			Handler:    _Query_LastObservedBlockHeight_Handler,
		},
		{
			MethodName: "OutgoingTxBatches",
			Handler:    _Query_OutgoingTxBatches_Handler,
		},
		{
			MethodName: "OutgoingTxBatch",
			Handler:    _Query_OutgoingTxBatch_Handler,
		},
		{
			MethodName: "BatchConfirm",
			Handler:    _Query_BatchConfirm_Handler,
		},
		{
			MethodName: "BatchConfirms",
			Handler:    _Query_BatchConfirms_Handler,
		},
		{
			MethodName: "TokenToDenom",
			Handler:    _Query_TokenToDenom_Handler,
		},
		{
			MethodName: "DenomToToken",
			Handler:    _Query_DenomToToken_Handler,
		},
		{
			MethodName: "GetOracleByAddr",
			Handler:    _Query_GetOracleByAddr_Handler,
		},
		{
			MethodName: "GetOracleByExternalAddr",
			Handler:    _Query_GetOracleByExternalAddr_Handler,
		},
		{
			MethodName: "GetOracleByBridgerAddr",
			Handler:    _Query_GetOracleByBridgerAddr_Handler,
		},
		{
			MethodName: "BridgeCalls",
			Handler:    _Query_BridgeCalls_Handler,
		},
		{
			MethodName: "BridgeCallConfirmByNonce",
			Handler:    _Query_BridgeCallConfirmByNonce_Handler,
		},
		{
			MethodName: "BridgeCallByNonce",
			Handler:    _Query_BridgeCallByNonce_Handler,
		},
		{
			MethodName: "BridgeCallBySender",
			Handler:    _Query_BridgeCallBySender_Handler,
		},
		{
			MethodName: "LastPendingBridgeCallByAddr",
			Handler:    _Query_LastPendingBridgeCallByAddr_Handler,
		},
		{
			MethodName: "PendingExecuteClaim",
			Handler:    _Query_PendingExecuteClaim_Handler,
		},
		{
			MethodName: "Oracles",
			Handler:    _Query_Oracles_Handler,
		},
		{
			MethodName: "ProjectedBatchTimeoutHeight",
			Handler:    _Query_ProjectedBatchTimeoutHeight_Handler,
		},
		{
			MethodName: "BridgeTokens",
			Handler:    _Query_BridgeTokens_Handler,
		},
		{
			MethodName: "BridgeCoinByDenom",
			Handler:    _Query_BridgeCoinByDenom_Handler,
		},
		{
			MethodName: "BridgeChainList",
			Handler:    _Query_BridgeChainList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fx/gravity/crosschain/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCurrentOracleSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentOracleSetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentOracleSetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentOracleSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentOracleSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentOracleSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleSet != nil {
		{
			size, err := m.OracleSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleSetRequestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleSetRequestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleSetRequestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleSetRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleSetRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleSetRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleSet != nil {
		{
			size, err := m.OracleSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleSetConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleSetConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleSetConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BridgerAddress) > 0 {
		i -= len(m.BridgerAddress)
		copy(dAtA[i:], m.BridgerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BridgerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleSetConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleSetConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleSetConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleSetConfirmsByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleSetConfirmsByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleSetConfirmsByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleSetConfirmsByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleSetConfirmsByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleSetConfirmsByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastOracleSetRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastOracleSetRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastOracleSetRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastOracleSetRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastOracleSetRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastOracleSetRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleSets) > 0 {
		for iNdEx := len(m.OracleSets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleSets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingOracleSetRequestByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingOracleSetRequestByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingOracleSetRequestByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgerAddress) > 0 {
		i -= len(m.BridgerAddress)
		copy(dAtA[i:], m.BridgerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BridgerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingOracleSetRequestByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingOracleSetRequestByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingOracleSetRequestByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleSets) > 0 {
		for iNdEx := len(m.OracleSets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleSets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinBatchFees) > 0 {
		for iNdEx := len(m.MinBatchFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinBatchFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchFees) > 0 {
		for iNdEx := len(m.BatchFees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchFees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingBatchRequestByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingBatchRequestByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingBatchRequestByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgerAddress) > 0 {
		i -= len(m.BridgerAddress)
		copy(dAtA[i:], m.BridgerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BridgerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingBatchRequestByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingBatchRequestByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingBatchRequestByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for iNdEx := len(m.Batches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutgoingTxBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutgoingTxBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutgoingTxBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Batch != nil {
		{
			size, err := m.Batch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchConfirmRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchConfirmRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchConfirmRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BridgerAddress) > 0 {
		i -= len(m.BridgerAddress)
		copy(dAtA[i:], m.BridgerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BridgerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchConfirmResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchConfirmResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchConfirmResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Confirm != nil {
		{
			size, err := m.Confirm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchConfirmsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchConfirmsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchConfirmsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenContract) > 0 {
		i -= len(m.TokenContract)
		copy(dAtA[i:], m.TokenContract)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenContract)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBatchConfirmsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBatchConfirmsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBatchConfirmsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastEventNonceByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastEventNonceByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastEventNonceByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgerAddress) > 0 {
		i -= len(m.BridgerAddress)
		copy(dAtA[i:], m.BridgerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BridgerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastEventNonceByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastEventNonceByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastEventNonceByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenToDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenToDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenToDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenToDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenToDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenToDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDenomToTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomToTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomToTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDenomToTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDenomToTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDenomToTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Oracle != nil {
		{
			size, err := m.Oracle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleByExternalAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleByExternalAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleByExternalAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalAddress) > 0 {
		i -= len(m.ExternalAddress)
		copy(dAtA[i:], m.ExternalAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExternalAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleByBridgerAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleByBridgerAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleByBridgerAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgerAddress) > 0 {
		i -= len(m.BridgerAddress)
		copy(dAtA[i:], m.BridgerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BridgerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingSendToExternalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSendToExternalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSendToExternalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingSendToExternalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSendToExternalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSendToExternalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbatchedTransfers) > 0 {
		for iNdEx := len(m.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TransfersInBatches) > 0 {
		for iNdEx := len(m.TransfersInBatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TransfersInBatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastObservedBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastObservedBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastObservedBlockHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastObservedBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastObservedBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastObservedBlockHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ExternalBlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExternalBlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastEventBlockHeightByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastEventBlockHeightByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastEventBlockHeightByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgerAddress) > 0 {
		i -= len(m.BridgerAddress)
		copy(dAtA[i:], m.BridgerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BridgerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastEventBlockHeightByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastEventBlockHeightByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastEventBlockHeightByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOraclesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOraclesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOraclesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOraclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOraclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOraclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Oracles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryProjectedBatchTimeoutHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectedBatchTimeoutHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectedBatchTimeoutHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProjectedBatchTimeoutHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProjectedBatchTimeoutHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProjectedBatchTimeoutHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TimeoutHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeTokensRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeTokensRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeTokensRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeTokens) > 0 {
		for iNdEx := len(m.BridgeTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BridgeTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeCoinByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeCoinByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeCoinByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeCoinByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeCoinByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeCoinByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBridgeChainListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeChainListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeChainListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBridgeChainListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeChainListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeChainListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainNames) > 0 {
		for iNdEx := len(m.ChainNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChainNames[iNdEx])
			copy(dAtA[i:], m.ChainNames[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainNames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeCallsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeCallsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeCallsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeCallsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeCallsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeCallsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BridgeCalls) > 0 {
		for iNdEx := len(m.BridgeCalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BridgeCalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeCallByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeCallByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeCallByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeCallByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeCallByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeCallByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BridgeCall != nil {
		{
			size, err := m.BridgeCall.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeCallBySenderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeCallBySenderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeCallBySenderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderAddress) > 0 {
		i -= len(m.SenderAddress)
		copy(dAtA[i:], m.SenderAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SenderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeCallBySenderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeCallBySenderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeCallBySenderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeCalls) > 0 {
		for iNdEx := len(m.BridgeCalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BridgeCalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeCallConfirmByNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeCallConfirmByNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeCallConfirmByNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EventNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeCallConfirmByNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeCallConfirmByNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeCallConfirmByNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnoughPower {
		i--
		if m.EnoughPower {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Confirms) > 0 {
		for iNdEx := len(m.Confirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Confirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingBridgeCallByAddrRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingBridgeCallByAddrRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingBridgeCallByAddrRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgerAddress) > 0 {
		i -= len(m.BridgerAddress)
		copy(dAtA[i:], m.BridgerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BridgerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPendingBridgeCallByAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPendingBridgeCallByAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPendingBridgeCallByAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeCalls) > 0 {
		for iNdEx := len(m.BridgeCalls) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BridgeCalls[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingExecuteClaimRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingExecuteClaimRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingExecuteClaimRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingExecuteClaimResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingExecuteClaimResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingExecuteClaimResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Claims) > 0 {
		for iNdEx := len(m.Claims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Claims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCurrentOracleSetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCurrentOracleSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleSet != nil {
		l = m.OracleSet.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleSetRequestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryOracleSetRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OracleSet != nil {
		l = m.OracleSet.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleSetConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BridgerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryOracleSetConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleSetConfirmsByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryOracleSetConfirmsByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastOracleSetRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastOracleSetRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OracleSets) > 0 {
		for _, e := range m.OracleSets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastPendingOracleSetRequestByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BridgerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPendingOracleSetRequestByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OracleSets) > 0 {
		for _, e := range m.OracleSets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBatchFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.MinBatchFees) > 0 {
		for _, e := range m.MinBatchFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBatchFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BatchFees) > 0 {
		for _, e := range m.BatchFees {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastPendingBatchRequestByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BridgerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPendingBatchRequestByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutgoingTxBatchesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutgoingTxBatchesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Batches) > 0 {
		for _, e := range m.Batches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOutgoingTxBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryOutgoingTxBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Batch != nil {
		l = m.Batch.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchConfirmRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BridgerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryBatchConfirmResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Confirm != nil {
		l = m.Confirm.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBatchConfirmsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenContract)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryBatchConfirmsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastEventNonceByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BridgerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastEventNonceByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	return n
}

func (m *QueryTokenToDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenToDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDenomToTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDenomToTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oracle != nil {
		l = m.Oracle.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleByExternalAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ExternalAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleByBridgerAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BridgerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingSendToExternalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingSendToExternalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TransfersInBatches) > 0 {
		for _, e := range m.TransfersInBatches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for _, e := range m.UnbatchedTransfers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryLastObservedBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastObservedBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExternalBlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.ExternalBlockHeight))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryLastEventBlockHeightByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BridgerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastEventBlockHeightByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuery(uint64(m.BlockHeight))
	}
	return n
}

func (m *QueryOraclesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOraclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oracles) > 0 {
		for _, e := range m.Oracles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryProjectedBatchTimeoutHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProjectedBatchTimeoutHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeoutHeight != 0 {
		n += 1 + sovQuery(uint64(m.TimeoutHeight))
	}
	return n
}

func (m *QueryBridgeTokensRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBridgeTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BridgeTokens) > 0 {
		for _, e := range m.BridgeTokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBridgeCoinByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBridgeCoinByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBridgeChainListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBridgeChainListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainNames) > 0 {
		for _, s := range m.ChainNames {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBridgeCallsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBridgeCallsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BridgeCalls) > 0 {
		for _, e := range m.BridgeCalls {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBridgeCallByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryBridgeCallByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeCall != nil {
		l = m.BridgeCall.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBridgeCallBySenderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SenderAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBridgeCallBySenderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BridgeCalls) > 0 {
		for _, e := range m.BridgeCalls {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBridgeCallConfirmByNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EventNonce != 0 {
		n += 1 + sovQuery(uint64(m.EventNonce))
	}
	return n
}

func (m *QueryBridgeCallConfirmByNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Confirms) > 0 {
		for _, e := range m.Confirms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.EnoughPower {
		n += 2
	}
	return n
}

func (m *QueryLastPendingBridgeCallByAddrRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BridgerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPendingBridgeCallByAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BridgeCalls) > 0 {
		for _, e := range m.BridgeCalls {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPendingExecuteClaimRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingExecuteClaimResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Claims) > 0 {
		for _, e := range m.Claims {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentOracleSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentOracleSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentOracleSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentOracleSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentOracleSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentOracleSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleSet == nil {
				m.OracleSet = &OracleSet{}
			}
			if err := m.OracleSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleSetRequestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleSetRequestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleSetRequestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleSetRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleSetRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleSetRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OracleSet == nil {
				m.OracleSet = &OracleSet{}
			}
			if err := m.OracleSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleSetConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleSetConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleSetConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleSetConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleSetConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleSetConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &MsgOracleSetConfirm{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleSetConfirmsByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleSetConfirmsByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleSetConfirmsByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleSetConfirmsByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleSetConfirmsByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleSetConfirmsByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, &MsgOracleSetConfirm{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastOracleSetRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastOracleSetRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastOracleSetRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastOracleSetRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastOracleSetRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastOracleSetRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleSets = append(m.OracleSets, &OracleSet{})
			if err := m.OracleSets[len(m.OracleSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingOracleSetRequestByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingOracleSetRequestByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingOracleSetRequestByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingOracleSetRequestByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingOracleSetRequestByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingOracleSetRequestByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleSets = append(m.OracleSets, &OracleSet{})
			if err := m.OracleSets[len(m.OracleSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBatchFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinBatchFees = append(m.MinBatchFees, MinBatchFee{})
			if err := m.MinBatchFees[len(m.MinBatchFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchFees = append(m.BatchFees, &BatchFees{})
			if err := m.BatchFees[len(m.BatchFees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingBatchRequestByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingBatchRequestByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingBatchRequestByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingBatchRequestByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingBatchRequestByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingBatchRequestByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &OutgoingTxBatch{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batches = append(m.Batches, &OutgoingTxBatch{})
			if err := m.Batches[len(m.Batches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutgoingTxBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutgoingTxBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Batch == nil {
				m.Batch = &OutgoingTxBatch{}
			}
			if err := m.Batch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchConfirmRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchConfirmRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchConfirmRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchConfirmResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchConfirmResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchConfirmResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Confirm == nil {
				m.Confirm = &MsgConfirmBatch{}
			}
			if err := m.Confirm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchConfirmsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchConfirmsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchConfirmsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBatchConfirmsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBatchConfirmsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBatchConfirmsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, &MsgConfirmBatch{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastEventNonceByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastEventNonceByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastEventNonceByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastEventNonceByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastEventNonceByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastEventNonceByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenToDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenToDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenToDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenToDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenToDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenToDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomToTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomToTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomToTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDenomToTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDenomToTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDenomToTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Oracle == nil {
				m.Oracle = &Oracle{}
			}
			if err := m.Oracle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleByExternalAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleByExternalAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleByExternalAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleByBridgerAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleByBridgerAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleByBridgerAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSendToExternalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSendToExternalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSendToExternalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSendToExternalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSendToExternalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSendToExternalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransfersInBatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransfersInBatches = append(m.TransfersInBatches, &OutgoingTransferTx{})
			if err := m.TransfersInBatches[len(m.TransfersInBatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedTransfers = append(m.UnbatchedTransfers, &OutgoingTransferTx{})
			if err := m.UnbatchedTransfers[len(m.UnbatchedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastObservedBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastObservedBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastObservedBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastObservedBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastObservedBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastObservedBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalBlockHeight", wireType)
			}
			m.ExternalBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExternalBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastEventBlockHeightByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastEventBlockHeightByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastEventBlockHeightByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastEventBlockHeightByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastEventBlockHeightByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastEventBlockHeightByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOraclesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOraclesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOraclesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOraclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOraclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOraclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, Oracle{})
			if err := m.Oracles[len(m.Oracles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProjectedBatchTimeoutHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectedBatchTimeoutHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectedBatchTimeoutHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProjectedBatchTimeoutHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProjectedBatchTimeoutHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProjectedBatchTimeoutHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			m.TimeoutHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeTokensRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeTokensRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeTokensRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeTokens = append(m.BridgeTokens, &BridgeToken{})
			if err := m.BridgeTokens[len(m.BridgeTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeCoinByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeCoinByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeCoinByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeCoinByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeCoinByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeCoinByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeChainListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeChainListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeChainListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeChainListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeChainListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeChainListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainNames = append(m.ChainNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeCallsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeCallsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeCallsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeCallsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeCallsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeCallsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeCalls = append(m.BridgeCalls, &OutgoingBridgeCall{})
			if err := m.BridgeCalls[len(m.BridgeCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeCallByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeCallByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeCallByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeCallByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeCallByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeCallByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeCall", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BridgeCall == nil {
				m.BridgeCall = &OutgoingBridgeCall{}
			}
			if err := m.BridgeCall.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeCallBySenderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeCallBySenderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeCallBySenderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeCallBySenderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeCallBySenderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeCallBySenderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeCalls = append(m.BridgeCalls, &OutgoingBridgeCall{})
			if err := m.BridgeCalls[len(m.BridgeCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeCallConfirmByNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeCallConfirmByNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeCallConfirmByNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNonce", wireType)
			}
			m.EventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeCallConfirmByNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeCallConfirmByNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeCallConfirmByNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Confirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Confirms = append(m.Confirms, &MsgBridgeCallConfirm{})
			if err := m.Confirms[len(m.Confirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnoughPower", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnoughPower = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingBridgeCallByAddrRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingBridgeCallByAddrRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingBridgeCallByAddrRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPendingBridgeCallByAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPendingBridgeCallByAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPendingBridgeCallByAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeCalls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeCalls = append(m.BridgeCalls, &OutgoingBridgeCall{})
			if err := m.BridgeCalls[len(m.BridgeCalls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingExecuteClaimRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingExecuteClaimRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingExecuteClaimRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingExecuteClaimResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingExecuteClaimResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingExecuteClaimResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims, &types1.Any{})
			if err := m.Claims[len(m.Claims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
