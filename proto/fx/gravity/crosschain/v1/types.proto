syntax = "proto3";
package fx.gravity.crosschain.v1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/pundiai/fx-core/x/crosschain/types";

message ProposalOracle { repeated string oracles = 1; }

message Oracle {
  string oracle_address = 1;
  string bridger_address = 2;
  string external_address = 3;
  string delegate_amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  // start oracle height
  int64 start_height = 5;
  bool online = 6;
  string delegate_validator = 7;
  int64 slash_times = 8;
}

// BridgeValidator represents a validator's external address and its power
message BridgeValidator {
  uint64 power = 1;
  string external_address = 2;
}

// OracleSet is the external Chain Bridge Multsig Set, each gravity validator
// also maintains an external key to sign messages, these are used to check
// signatures on external because of the significant gas savings
message OracleSet {
  uint64 nonce = 1;
  repeated BridgeValidator members = 2 [ (gogoproto.nullable) = false ];
  uint64 height = 3;
}

// LastObservedBlockHeight stores the last observed
// external block height along with the our block height that
// it was observed at. These two numbers can be used to project
// outward and always produce batches with timeouts in the future
// even if no Ethereum block height has been relayed for a long time
message LastObservedBlockHeight {
  uint64 external_block_height = 1;
  uint64 block_height = 2;
}

// ClaimType is the cosmos type of an event from the counterpart chain that can
// be handled
enum ClaimType {
  option (gogoproto.goproto_enum_prefix) = false;

  CLAIM_TYPE_UNSPECIFIED = 0;
  CLAIM_TYPE_SEND_TO_FX = 1;
  CLAIM_TYPE_SEND_TO_EXTERNAL = 2;
  CLAIM_TYPE_BRIDGE_TOKEN = 3;
  CLAIM_TYPE_ORACLE_SET_UPDATED = 4;
  CLAIM_TYPE_BRIDGE_CALL = 5;
  CLAIM_TYPE_BRIDGE_CALL_RESULT = 6;
}

// Attestation is an aggregate of `claims` that eventually becomes `observed` by
// all bridger set
// EVENT_NONCE:
// EventNonce a nonce provided by the gravity contract that is unique per event
// fired These event nonces must be relayed in order. This is a correctness
// issue, if relaying out of order transaction replay attacks become possible
// OBSERVED:
// Observed indicates that >67% of validators have attested to the event,
// and that the event should be executed by the gravity state machine
//
// The actual content of the claims is passed in with the transaction making the
// claim and then passed through the call stack alongside the attestation while
// it is processed the key in which the attestation is stored is keyed on the
// exact details of the claim but there is no reason to store those exact
// details becuause the next message sender will kindly provide you with them.
message Attestation {
  bool observed = 1;
  repeated string votes = 2;
  uint64 height = 3;
  google.protobuf.Any claim = 4;
}

// OutgoingTxBatch represents a batch of transactions going from gravity to ETH
message OutgoingTxBatch {
  uint64 batch_nonce = 1;
  uint64 batch_timeout = 2;
  repeated OutgoingTransferTx transactions = 3;
  string token_contract = 4;
  uint64 block = 5;
  string fee_receive = 6;
}

// OutgoingTransferTx represents an individual send from gravity to ETH
message OutgoingTransferTx {
  uint64 id = 1;
  string sender = 2;
  string dest_address = 3;
  ERC20Token token = 4 [ (gogoproto.nullable) = false ];
  ERC20Token fee = 5 [ (gogoproto.nullable) = false ];
}

// ERC20Token unique identifier for an Ethereum ERC20 token.
message ERC20Token {
  string contract = 1;
  string amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// Params represent the Gravity genesis and store parameters
// gravity_id:
// a random 32 byte value to prevent signature reuse, for example if the
// cosmos validators decided to use the same Ethereum keys for another chain
// also running Gravity we would not want it to be possible to play a deposit
// from chain A back on chain B's Gravity. This value IS USED ON ETHEREUM so
// it must be set in your genesis.json before launch and not changed after
// deploying Gravity
//
// These reference values may be used by future Gravity client implemetnations
// to allow for saftey features or convenience features like the Gravity address
// in your relayer. A relayer would require a configured Gravity address if
// governance had not set the address on the chain it was relaying for.
//
// signed_window
//
// These values represent the time in blocks that a validator has to submit
// a signature for a batch or oracle set, or to submit a claim for a particular
// attestation nonce. In the case of attestations this clock starts when the
// attestation is created, but only allows for slashing once the event has
// passed
//
// external_batch_timeout:
//
// This is the 'bsc' value for when batches time out, this is a bsc becuase
// Ethereum is a probabalistic chain and you can't say for sure what the block
// frequency is ahead of time.
//
// average_block_time
// average_external_block_time
//
// These values are the average Cosmos block time and Ethereum block time
// repsectively and they are used to copute what the bsc batch timeout is. It is
// important that governance updates these in case of any major, prolonged
// change in the time it takes to produce a block
//
// slash_fraction
//
// The slashing fractions for the various gravity related slashing conditions.
// The first three refer to not submitting a particular message, the third for
// submitting a different claim for the same Ethereum event

// oracle_set_update_power_change_percent
//
// If power change between validators of CurrentOracleSet and latest oracle set
// request is > 10%
message Params {
  option (gogoproto.stringer) = false;
  string gravity_id = 1;
  uint64 average_block_time = 2;
  uint64 external_batch_timeout = 3;
  uint64 average_external_block_time = 4;
  uint64 signed_window = 5;
  bytes slash_fraction = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  bytes oracle_set_update_power_change_percent = 7 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  uint64 ibc_transfer_timeout_height = 8;
  // Deprecated: after block 5713000
  repeated string oracles = 9 [ (gogoproto.nullable) = true ];
  cosmos.base.v1beta1.Coin delegate_threshold = 10
      [ (gogoproto.nullable) = false ];
  int64 delegate_multiple = 11;
  uint64 bridge_call_timeout = 12;
  uint64 bridge_call_max_gas_limit = 13;
  // Deprecated: do not use
  bool enable_send_to_external_pending = 14;
  // Deprecated: do not use
  bool enable_bridge_call_pending = 15;
}

message OutgoingBridgeCall {
  string sender = 1;
  string refund = 2;
  repeated ERC20Token tokens = 3 [ (gogoproto.nullable) = false ];
  string to = 4;
  string data = 5;
  string memo = 6;
  uint64 nonce = 7;
  uint64 timeout = 8;
  uint64 block_height = 9;
  uint64 gas_limit = 10;
  uint64 event_nonce = 11;
}

message QuoteInfo {
  uint64 id = 1;
  string token = 2;
  string fee = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string oracle = 4;
  uint64 gas_limit = 5;
  uint64 expiry = 6;
}