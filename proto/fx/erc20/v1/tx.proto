syntax = "proto3";
package fx.erc20.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "fx/erc20/v1/types.proto";
import "fx/erc20/v1/genesis.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";

option go_package = "github.com/pundiai/fx-core/x/erc20/types";

// Msg defines the erc20 Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  // ConvertCoin mints a ERC20 representation of the SDK Coin denom that is
  // registered on the token mapping.
  rpc ConvertCoin(MsgConvertCoin) returns (MsgConvertCoinResponse);

  // UpdateParams defines a governance operation for updating the x/erc20 module
  // parameters. The authority is hard-coded to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc ToggleTokenConversion(MsgToggleTokenConversion)
      returns (MsgToggleTokenConversionResponse);
}

// MsgConvertCoin defines a Msg to convert a Cosmos Coin to a ERC20 token
message MsgConvertCoin {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "erc20/MsgConvertCoin";

  // Cosmos coin which denomination is registered on erc20 bridge.
  // The coin amount defines the total ERC20 tokens to convert.
  cosmos.base.v1beta1.Coin coin = 1 [ (gogoproto.nullable) = false ];
  // recipient hex address to receive ERC20 token
  string receiver = 2;
  // cosmos bech32 address from the owner of the given ERC20 tokens
  string sender = 3;
}

// MsgConvertCoinResponse returns no fields
message MsgConvertCoinResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "erc20/MsgUpdateParams";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/erc20 parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgToggleTokenConversion {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "erc20/MsgToggleTokenConversion";

  // authority is the address of the governance account.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // token identifier can be either the hex contract address of the ERC20 or the
  // Cosmos base denomination
  string token = 2;
}

message MsgToggleTokenConversionResponse {
  ERC20Token erc20_token = 1 [ (gogoproto.nullable) = false ];
}